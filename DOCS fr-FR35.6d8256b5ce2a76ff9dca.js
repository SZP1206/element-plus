(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{637:function(e,t,n){"use strict";n.r(t);var o=n(0);const r={class:"content element-doc"},c=Object(o.createStaticVNode)('<h2 id="messagebox"><a class="header-anchor" href="#messagebox">¶</a> MessageBox</h2><p>Un ensemble de fenêtres modales pour afficher des messages système, tels que des alertes, des demandes de confirmation ou des informations importantes.</p><div class="tip"><p>MessageBox est avant tout conçue pour émuler des <code>alert</code>, <code>confirm</code> ou <code>prompt</code>, son contenu devrait donc être simple. Pour afficher un contenu plus riche, utilisez plutôt Dialog.</p></div><h3 id="alert"><a class="header-anchor" href="#alert">¶</a> Alert</h3><p>Alert interrompt l&#39;action de l&#39;utilisateur jusqu&#39;à ce qu&#39;il confirme.</p>',5),a=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Ouvrez un alert en appelant la méthode "),Object(o.createVNode)("code",null,"$alert"),Object(o.createTextVNode)(". Elle simule une "),Object(o.createVNode)("code",null,"alert"),Object(o.createTextVNode)(" système et ne peut être fermée en pressant ESC ou en cliquant hors de la boite. Dans cet exemple, deux paramètres "),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)(" et "),Object(o.createVNode)("code",null,"title"),Object(o.createTextVNode)(" sont reçus. Notez que lorsque la boite est fermée, elle retourne un objet "),Object(o.createVNode)("code",null,"Promise"),Object(o.createTextVNode)(". Si vous n'êtes pas certains que tout vos navigateurs cibles supportent "),Object(o.createVNode)("code",null,"Promise"),Object(o.createTextVNode)(", utilisez un polyfill ou utilisez des callbacks comme dans l'exemple qui suit.")])],-1),d=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('Ceci est un message', 'Titre', {\n          confirmButtonText: 'OK',\n          callback: action => {\n            this.$message({\n              type: 'info',\n              message: `action: ${ action }`\n            });\n          }\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),s=Object(o.createVNode)("h3",{id:"confirm"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#confirm"},"¶"),Object(o.createTextVNode)(" Confirm")],-1),l=Object(o.createVNode)("p",null,"Confirm est utilisé pour demander une confirmation à l'utilisateur.",-1),i=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Appelez la méthode "),Object(o.createVNode)("code",null,"$confirm"),Object(o.createTextVNode)(" pour ouvrir une confirm, qui simule le "),Object(o.createVNode)("code",null,"confirm"),Object(o.createTextVNode)(" système. Vous pouvez aussi personnaliser MessageBox en passant un objet à l'attribut "),Object(o.createVNode)("code",null,"options"),Object(o.createTextVNode)(". L'attribut "),Object(o.createVNode)("code",null,"type"),Object(o.createTextVNode)(" indique le type de message (voir en bas de la page pour la liste des valeurs possibles). Notez que l'attribut "),Object(o.createVNode)("code",null,"title"),Object(o.createTextVNode)(" doit être de type "),Object(o.createVNode)("code",null,"string"),Object(o.createTextVNode)(". S'il se trouve être un "),Object(o.createVNode)("code",null,"object"),Object(o.createTextVNode)(", il sera considéré comme étant l'attribut "),Object(o.createVNode)("code",null,"options"),Object(o.createTextVNode)(". Cet exemple utilise une "),Object(o.createVNode)("code",null,"Promise"),Object(o.createTextVNode)(" pour gérer la suite du processus.")])],-1),u=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('Ceci effacera le fichier. Continuer?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Annuler',\n          type: 'warning'\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Fichier supprimé'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Suppression annulée'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),p=Object(o.createVNode)("h3",{id:"prompt"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#prompt"},"¶"),Object(o.createTextVNode)(" Prompt")],-1),m=Object(o.createVNode)("p",null,"Prompt est utilisé lorsqu'un utilisateur.",-1),b=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Appellez la méthode "),Object(o.createVNode)("code",null,"$prompt"),Object(o.createTextVNode)(" pour ouvrir un prompt simulant le "),Object(o.createVNode)("code",null,"prompt"),Object(o.createTextVNode)(" système. Vous pouvez utiliser le paramètre "),Object(o.createVNode)("code",null,"inputPattern"),Object(o.createTextVNode)(" pour spécifier un pattern à l'aide d'une RegExp. Utilisez "),Object(o.createVNode)("code",null,"inputValidator"),Object(o.createTextVNode)(" pour indiquer la méthode de validation, qui devra retourner un "),Object(o.createVNode)("code",null,"Boolean"),Object(o.createTextVNode)(" ou un "),Object(o.createVNode)("code",null,"String"),Object(o.createTextVNode)(". Retourner "),Object(o.createVNode)("code",null,"false"),Object(o.createTextVNode)(" ou un "),Object(o.createVNode)("code",null,"String"),Object(o.createTextVNode)(" veut dire que la validation a échouée, et la string ainsi fournie sera le "),Object(o.createVNode)("code",null,"inputErrorMessage"),Object(o.createTextVNode)(". De plus, vous pouvez personnaliser le placeholder du champs avec le paramètre "),Object(o.createVNode)("code",null,"inputPlaceholder"),Object(o.createTextVNode)(".")])],-1),h=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$prompt('Entrez votre e-mail', 'Astuce', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Annuler',\n          inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n          inputErrorMessage: 'E-mail invalide'\n        }).then(({ value }) => {\n          this.$message({\n            type: 'success',\n            message: 'Votre e-mail est: ' + value\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Annulé'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),g=Object(o.createVNode)("h3",{id:"personnalisation"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#personnalisation"},"¶"),Object(o.createTextVNode)(" Personnalisation")],-1),f=Object(o.createVNode)("p",null,"Il est possible d'afficher du contenu un peu plus varié et personnalisé.",-1),j=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("les trois précédentes méthodes sont des repackagings de la méthode "),Object(o.createVNode)("code",null,"$msgbox"),Object(o.createTextVNode)(". cet exemple appelle directement "),Object(o.createVNode)("code",null,"$msgbox"),Object(o.createTextVNode)(" en utilisant l'attribut "),Object(o.createVNode)("code",null,"showCancelButton"),Object(o.createTextVNode)(" pour indiquer si un bouton annuler doit être affiché. De plus, vous pouvez utiliser "),Object(o.createVNode)("code",null,"cancelButtonClass"),Object(o.createTextVNode)(" pour ajouter du style et "),Object(o.createVNode)("code",null,"cancelButtonText"),Object(o.createTextVNode)(" pour personnaliser le bouton texte (voir la liste complète en fin de page). La méthode "),Object(o.createVNode)("code",null,"beforeClose"),Object(o.createTextVNode)("est appelée quand la MessageBox va être fermée et prévient sa fermeture. Elle prend trois paramètres: "),Object(o.createVNode)("code",null,"action"),Object(o.createTextVNode)(", "),Object(o.createVNode)("code",null,"instance"),Object(o.createTextVNode)(" et "),Object(o.createVNode)("code",null,"done"),Object(o.createTextVNode)(". Elle vous permet ainsi d'effectuer des actions avant la fermeture, e.g. activer "),Object(o.createVNode)("code",null,"loading"),Object(o.createTextVNode)(" pour le bouton de confirmation. Appelez "),Object(o.createVNode)("code",null,"done"),Object(o.createTextVNode)(" pour fermer la MessageBox, sinon l'instance ne sera jamais fermée.")])],-1),O=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open() {\n        this.$msgbox({\n          title: 'Message',\n          message: h('p', null, [\n            h('span', null, 'Le message peut être '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ]),\n          showCancelButton: true,\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Annuler',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true;\n              instance.confirmButtonText = 'Chargement...';\n              setTimeout(() => {\n                done();\n                setTimeout(() => {\n                  instance.confirmButtonLoading = false;\n                }, 300);\n              }, 3000);\n            } else {\n              done();\n            }\n          }\n        }).then(action => {\n          this.$message({\n            type: 'info',\n            message: 'Action: ' + action\n          });\n        });\n      },\n    }\n  }\n<\/script>\n")],-1),x=Object(o.createStaticVNode)('<div class="tip"><p>Le contenu de MessageBox peut être <code>VNode</code>, Vous permettant de passer des composants personnalisés. Lorsque vous ouvrer MessageBox, Vue compare le nouveau <code>VNode</code> avec l&#39;ancien <code>VNode</code>, puis détermine comment rafraîchir efficacement l&#39;UI, le composant peut donc ne pas être totalement re-rendu (<a href="https://github.com/ElemeFE/element/issues/8931">#8931</a>). Dans ce cas, Vous pouvez ajouter une clé unique à <code>VNode</code> à chaque fois que MessageBox s&#39;ouvre: <a href="https://jsfiddle.net/zhiyang/ezmhq2ef">exemple</a>.</p></div><h3 id="utiliser-du-html"><a class="header-anchor" href="#utiliser-du-html">¶</a> Utiliser du HTML</h3><p><code>message</code> supporte le HTML.</p>',3),V=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Mettez "),Object(o.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(o.createTextVNode)(" à "),Object(o.createVNode)("code",null,"true"),Object(o.createTextVNode)(" et "),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)(" sera traité comme du HTML.")])],-1),N=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('<strong>Ceci est du <i>HTML</i></strong>', 'HTML', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),C=Object(o.createStaticVNode)('<div class="warning"><p>Bien que la propriété <code>message</code> supporte le HTML, générer du contenu HTML dynamiquement peut être très dangereux, car cela permet des <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">attaques XSS</a>. Donc lorsque <code>dangerouslyUseHTMLString</code> est présent, soyez certain de sécuriser le contenu de <code>message</code>, et n&#39;assignez <strong>jamais</strong> à <code>message</code> du contenu fournit par l&#39;utilisateur.</p></div><h3 id="distinguer-annuler-de-fermer"><a class="header-anchor" href="#distinguer-annuler-de-fermer">¶</a> Distinguer &#39;annuler&#39; de &#39;fermer&#39;</h3><p>Dans certains cas, les boutons fermer et annuler peuvent avoir des sens différents.</p>',3),v=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Par défaut, le paramètre de la "),Object(o.createVNode)("code",null,"callback"),Object(o.createTextVNode)(" et de la promesse rejetée est 'cancel' lorsque l'utilisateur annule (clique sur le bouton annuler) ou lorsqu'il ferme la fenêtre (clique sur le bouton fermer, hors de la fenêtre, ou presse ESC). Si "),Object(o.createVNode)("code",null,"distinguishCancelAndClose"),Object(o.createTextVNode)(" est à "),Object(o.createVNode)("code",null,"true"),Object(o.createTextVNode)(", le dernier cas précédent renvoie 'close' au lieu de 'cancel' afin de pouvoir gérer les deux actions différemment.")])],-1),T=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('Vous avez du travail non enregistré, enregistrer et quitter?', 'Confirm', {\n          distinguishCancelAndClose: true,\n          confirmButtonText: 'Enregistrer',\n          cancelButtonText: 'Ne pas enregistrer'\n        })\n          .then(() => {\n            this.$message({\n              type: 'info',\n              message: 'Enregistré. Passage a une nouvelle route.'\n            });\n          })\n          .catch(action => {\n            this.$message({\n              type: 'info',\n              message: action === 'cancel'\n                ? 'Changements annulés. Passage sur une nouvelle route.'\n                : 'Reste sur la même route'\n            })\n          });\n      }\n    }\n  }\n<\/script>\n")],-1),B=Object(o.createVNode)("h3",{id:"contenu-centre"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#contenu-centre"},"¶"),Object(o.createTextVNode)(" Contenu centré")],-1),y=Object(o.createVNode)("p",null,"le contenu de MessageBox peut être centré.",-1),M=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Mettre "),Object(o.createVNode)("code",null,"center"),Object(o.createTextVNode)(" à "),Object(o.createVNode)("code",null,"true"),Object(o.createTextVNode)(" centrera le contenu")])],-1),w=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Cliquez pour ouvrir la MessageBox</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('Ceci effacera le fichier, continuer?' , 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Annuler',\n          type: 'warning',\n          center: true\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Fichier supprimé'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Annulé'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),$=Object(o.createStaticVNode)('<h3 id="methode-globale"><a class="header-anchor" href="#methode-globale">¶</a> Méthode globale</h3><p>Si Element Plus est importé entièrement, il ajoutera les méthodes suivantes à Vue.prototype: <code>$msgbox</code>, <code>$alert</code>, <code>$confirm</code> et <code>$prompt</code>. Dans ce cas vous pouvez appeler <code>MessageBox</code> comme nous l&#39;avons fait dans cette page. Les paramètres sont:</p><ul><li><code>$msgbox(options)</code></li><li><code>$alert(message, title, options)</code> ou <code>$alert(message, options)</code></li><li><code>$confirm(message, title, options)</code> ou <code>$confirm(message, options)</code></li><li><code>$prompt(message, title, options)</code> ou <code>$prompt(message, options)</code></li></ul><h3 id="import-a-la-demande"><a class="header-anchor" href="#import-a-la-demande">¶</a> Import à la demande</h3><p>Si vous préférer importer <code>MessageBox</code> à la demande:</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { MessageBox } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>Les méthodes correspondantes sont: <code>MessageBox</code>, <code>MessageBox.alert</code>, <code>MessageBox.confirm</code> et <code>MessageBox.prompt</code>. Les paramètres sont les mêmes que précédemment.</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>Attribut</th><th>Description</th><th>Type</th><th>Valeurs acceptées</th><th>Défaut</th></tr></thead><tbody><tr><td>title</td><td>Titre de la MessageBox.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>Contenu de la MessageBox.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>Si <code>message</code> doit être traité comme du HTML.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>Type du message, utilisé pour le choix d&#39;icône.</td><td>string</td><td>success / info / warning / error</td><td>—</td></tr><tr><td>iconClass</td><td>Classe d&#39;icône personnalisée, écrase <code>type</code>.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>Nom de classe pour MessageBox.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>callback</td><td>La callback de fermeture de MessageBox si vous n&#39;utilisez pas les promesses.</td><td>function(action, instance), ou <code>action</code> peut être &#39;confirm&#39;, &#39;cancel&#39; ou &#39;close&#39;, et <code>instance</code> est l&#39;instance MessageBox.</td><td>—</td><td>—</td></tr><tr><td>showClose</td><td>Si l&#39;icône de fermeture doit être affichée.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>beforeClose</td><td>La callback de pré-fermeture qui empèchera MessageBox de se fermer.</td><td>function(action, instance, done), ou <code>action</code> peut-être &#39;confirm&#39;, &#39;cancel&#39; ou &#39;close&#39;; <code>instance</code> est l&#39;instance de MessageBox; <code>done</code> est la méthode pour fermer l&#39;instance.</td><td>—</td><td>—</td></tr><tr><td>distinguishCancelAndClose</td><td>S&#39;il doit y avoir une différence entre l&#39;annulation et la fermeture de la MessageBox.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lockScroll</td><td>Si le défilement de la page doit être bloqué lorsque la MessageBox est active.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showCancelButton</td><td>Si le bouton annuler doit être affiché.</td><td>boolean</td><td>—</td><td>false (true dans le cas de confirm ou prompt).</td></tr><tr><td>showConfirmButton</td><td>Si le bouton confirmer doit être affiché.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>cancelButtonText</td><td>Le texte du bouton annuler.</td><td>string</td><td>—</td><td>Cancel</td></tr><tr><td>confirmButtonText</td><td>Le texte du bouton confirmer.</td><td>string</td><td>—</td><td>OK</td></tr><tr><td>cancelButtonClass</td><td>Classe du bouton annuler.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>confirmButtonClass</td><td>Classe du bouton confirmer.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>closeOnClickModal</td><td>Si MessageBox peut être fermée en cliquant en dehors.</td><td>boolean</td><td>—</td><td>true (false dans le cas de alert).</td></tr><tr><td>closeOnPressEscape</td><td>Si MessageBox peut être fermée en pressant ESC.</td><td>boolean</td><td>—</td><td>true (false dans le cas de alert)</td></tr><tr><td>closeOnHashChange</td><td>Si MessageBox doit être fermée quand le hash change.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showInput</td><td>Si un champs d&#39;input doit être affiché.</td><td>boolean</td><td>—</td><td>false (true dans le cas de prompt).</td></tr><tr><td>inputPlaceholder</td><td>Placeholder du champs d&#39;input.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputType</td><td>Type du champs d&#39;input.</td><td>string</td><td>—</td><td>text</td></tr><tr><td>inputValue</td><td>Valeur initiale du champs d&#39;input.</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputPattern</td><td>RegExp du champs d&#39;input.</td><td>regexp</td><td>—</td><td>—</td></tr><tr><td>inputValidator</td><td>Fonction de validation du champs d&#39;input. Doit retourner un boolean ou un string. Si c&#39;est un string, il sera assigné à inputErrorMessage.</td><td>function</td><td>—</td><td>—</td></tr><tr><td>inputErrorMessage</td><td>Message d&#39;erreur lorsque la validation échoue.</td><td>string</td><td>—</td><td>Illegal input</td></tr><tr><td>center</td><td>Si le contenu doit être centré.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>roundButton</td><td>Si le bouton doit être rond.</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',9);var k={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$alert("Ceci est un message","Titre",{confirmButtonText:"OK",callback:e=>{this.$message({type:"info",message:"action: "+e})}})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$confirm("Ceci effacera le fichier. Continuer?","Warning",{confirmButtonText:"OK",cancelButtonText:"Annuler",type:"warning"}).then(()=>{this.$message({type:"success",message:"Fichier supprimé"})}).catch(()=>{this.$message({type:"info",message:"Suppression annulée"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$prompt("Entrez votre e-mail","Astuce",{confirmButtonText:"OK",cancelButtonText:"Annuler",inputPattern:/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputErrorMessage:"E-mail invalide"}).then(({value:e})=>{this.$message({type:"success",message:"Votre e-mail est: "+e})}).catch(()=>{this.$message({type:"info",message:"Annulé"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const{h:s}=o,l={methods:{open(){this.$msgbox({title:"Message",message:s("p",null,[s("span",null,"Le message peut être "),s("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"OK",cancelButtonText:"Annuler",beforeClose:(e,t,n)=>{"confirm"===e?(t.confirmButtonLoading=!0,t.confirmButtonText="Chargement...",setTimeout(()=>{n(),setTimeout(()=>{t.confirmButtonLoading=!1},300)},3e3)):n()}}).then(e=>{this.$message({type:"info",message:"Action: "+e})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$alert("<strong>Ceci est du <i>HTML</i></strong>","HTML",{dangerouslyUseHTMLString:!0})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}(),"element-demo5":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$confirm("Vous avez du travail non enregistré, enregistrer et quitter?","Confirm",{distinguishCancelAndClose:!0,confirmButtonText:"Enregistrer",cancelButtonText:"Ne pas enregistrer"}).then(()=>{this.$message({type:"info",message:"Enregistré. Passage a une nouvelle route."})}).catch(e=>{this.$message({type:"info",message:"cancel"===e?"Changements annulés. Passage sur une nouvelle route.":"Reste sur la même route"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}(),"element-demo6":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:r,openBlock:c,createBlock:a}=o,d=e("Cliquez pour ouvrir la MessageBox");const s={methods:{open(){this.$confirm("Ceci effacera le fichier, continuer?","Warning",{confirmButtonText:"OK",cancelButtonText:"Annuler",type:"warning",center:!0}).then(()=>{this.$message({type:"success",message:"Fichier supprimé"})}).catch(()=>{this.$message({type:"info",message:"Annulé"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return c(),a("div",null,[r(s,{type:"text",onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"])])}},s)}()},render:function(e,t,n,k,q,z){const S=Object(o.resolveComponent)("element-demo0"),L=Object(o.resolveComponent)("demo-block"),A=Object(o.resolveComponent)("element-demo1"),E=Object(o.resolveComponent)("element-demo2"),P=Object(o.resolveComponent)("element-demo3"),_=Object(o.resolveComponent)("element-demo4"),H=Object(o.resolveComponent)("element-demo5"),D=Object(o.resolveComponent)("element-demo6");return Object(o.openBlock)(),Object(o.createBlock)("section",r,[c,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(S)]),highlight:Object(o.withCtx)(()=>[d]),default:Object(o.withCtx)(()=>[a]),_:1}),s,l,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(A)]),highlight:Object(o.withCtx)(()=>[u]),default:Object(o.withCtx)(()=>[i]),_:1}),p,m,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(E)]),highlight:Object(o.withCtx)(()=>[h]),default:Object(o.withCtx)(()=>[b]),_:1}),g,f,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(P)]),highlight:Object(o.withCtx)(()=>[O]),default:Object(o.withCtx)(()=>[j]),_:1}),x,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(_)]),highlight:Object(o.withCtx)(()=>[N]),default:Object(o.withCtx)(()=>[V]),_:1}),C,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(H)]),highlight:Object(o.withCtx)(()=>[T]),default:Object(o.withCtx)(()=>[v]),_:1}),B,y,Object(o.createVNode)(L,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(D)]),highlight:Object(o.withCtx)(()=>[w]),default:Object(o.withCtx)(()=>[M]),_:1}),$])}};t.default=k}}]);