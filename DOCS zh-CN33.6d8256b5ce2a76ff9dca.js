(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{461:function(e,t,n){"use strict";n.r(t);var a=n(0);const d={class:"content element-doc"},l=Object(a.createVNode)("h2",{id:"loading-jia-zai"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#loading-jia-zai"},"¶"),Object(a.createTextVNode)(" Loading 加载")],-1),o=Object(a.createVNode)("p",null,"加载数据时显示动效。",-1),c=Object(a.createVNode)("h3",{id:"qu-yu-jia-zai"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#qu-yu-jia-zai"},"¶"),Object(a.createTextVNode)(" 区域加载")],-1),r=Object(a.createVNode)("p",null,"在表格等容器中加载数据时显示。",-1),s=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("Element Plus 提供了两种调用 Loading 的方法：指令和服务。对于自定义指令"),Object(a.createVNode)("code",null,"v-loading"),Object(a.createTextVNode)("，只需要绑定"),Object(a.createVNode)("code",null,"Boolean"),Object(a.createTextVNode)("即可。默认状况下，Loading 遮罩会插入到绑定元素的子节点，通过添加"),Object(a.createVNode)("code",null,"body"),Object(a.createTextVNode)("修饰符，可以使遮罩插入至 DOM 中的 body 上。")])],-1),i=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <el-table\n    v-loading="loading"\n    :data="tableData"\n    style="width: 100%">\n    <el-table-column\n      prop="date"\n      label="日期"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="name"\n      label="姓名"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="address"\n      label="地址">\n    </el-table-column>\n  </el-table>\n</template>\n\n<style>\n  body {\n    margin: 0;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: \'2016-05-03\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }, {\n          date: \'2016-05-02\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }, {\n          date: \'2016-05-04\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }],\n        loading: true\n      };\n    }\n  };\n<\/script>\n')],-1),p=Object(a.createVNode)("h3",{id:"zi-ding-yi"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#zi-ding-yi"},"¶"),Object(a.createTextVNode)(" 自定义")],-1),b=Object(a.createVNode)("p",null,"可自定义加载文案、图标和背景色。",-1),u=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("在绑定了"),Object(a.createVNode)("code",null,"v-loading"),Object(a.createTextVNode)("指令的元素上添加"),Object(a.createVNode)("code",null,"element-loading-text"),Object(a.createTextVNode)("属性，其值会被渲染为加载文案，并显示在加载图标的下方。类似地，"),Object(a.createVNode)("code",null,"element-loading-spinner"),Object(a.createTextVNode)("和"),Object(a.createVNode)("code",null,"element-loading-background"),Object(a.createTextVNode)("属性分别用来设定图标类名和背景色值。")])],-1),g=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <el-table\n    v-loading="loading"\n    element-loading-text="拼命加载中"\n    element-loading-spinner="el-icon-loading"\n    element-loading-background="rgba(0, 0, 0, 0.8)"\n    :data="tableData"\n    style="width: 100%">\n    <el-table-column\n      prop="date"\n      label="日期"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="name"\n      label="姓名"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="address"\n      label="地址">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        tableData: [{\n          date: \'2016-05-03\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }, {\n          date: \'2016-05-02\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }, {\n          date: \'2016-05-04\',\n          name: \'王小虎\',\n          address: \'上海市普陀区金沙江路 1518 弄\'\n        }],\n        loading: true\n      };\n    }\n  };\n<\/script>\n')],-1),h=Object(a.createVNode)("h3",{id:"zheng-ye-jia-zai"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#zheng-ye-jia-zai"},"¶"),Object(a.createTextVNode)(" 整页加载")],-1),j=Object(a.createVNode)("p",null,"页面数据加载时显示。",-1),m=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("当使用指令方式时，全屏遮罩需要添加"),Object(a.createVNode)("code",null,"fullscreen"),Object(a.createTextVNode)("修饰符（遮罩会插入至 body 上），此时若需要锁定屏幕的滚动，可以使用"),Object(a.createVNode)("code",null,"lock"),Object(a.createTextVNode)("修饰符；当使用服务方式时，遮罩默认即为全屏，无需额外设置。")])],-1),O=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <el-button\n    type="primary"\n    @click="openFullScreen1"\n    v-loading.fullscreen.lock="fullscreenLoading">\n    指令方式\n  </el-button>\n  <el-button\n    type="primary"\n    @click="openFullScreen2">\n    服务方式\n  </el-button>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        fullscreenLoading: false\n      }\n    },\n    methods: {\n      openFullScreen1() {\n        this.fullscreenLoading = true;\n        setTimeout(() => {\n          this.fullscreenLoading = false;\n        }, 2000);\n      },\n      openFullScreen2() {\n        const loading = this.$loading({\n          lock: true,\n          text: \'Loading\',\n          spinner: \'el-icon-loading\',\n          background: \'rgba(0, 0, 0, 0.7)\'\n        });\n        setTimeout(() => {\n          loading.close();\n        }, 2000);\n      }\n    }\n  }\n<\/script>\n')],-1),V=Object(a.createStaticVNode)('<h3 id="fu-wu"><a class="header-anchor" href="#fu-wu">¶</a> 服务</h3><p>Loading 还可以以服务的方式调用。引入 Loading 服务：</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { Loading } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>在需要调用时：</p><pre><code class="hljs language-javascript">Loading.service(options);\n</code></pre><p>其中 <code>options</code> 参数为 Loading 的配置项，具体见下表。<code>LoadingService</code> 会返回一个 Loading 实例，可通过调用该实例的 <code>close</code> 方法来关闭它：</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> loadingInstance = Loading.service(options);\n<span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> { <span class="hljs-comment">// 以服务的方式调用的 Loading 需要异步关闭</span>\n  loadingInstance.close();\n});\n</code></pre><p>需要注意的是，以服务的方式调用的全屏 Loading 是单例的：若在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例：</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">let</span> loadingInstance1 = Loading.service({ <span class="hljs-attr">fullscreen</span>: <span class="hljs-literal">true</span> });\n<span class="hljs-keyword">let</span> loadingInstance2 = Loading.service({ <span class="hljs-attr">fullscreen</span>: <span class="hljs-literal">true</span> });\n<span class="hljs-built_in">console</span>.log(loadingInstance1 === loadingInstance2); <span class="hljs-comment">// true</span>\n</code></pre><p>此时调用它们中任意一个的 <code>close</code> 方法都能关闭这个全屏 Loading。</p><p>如果完整引入了 Element，那么 Vue.prototype 上会有一个全局方法 <code>$loading</code>，它的调用方式为：<code>this.$loading(options)</code>，同样会返回一个 Loading 实例。</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>target</td><td>Loading 需要覆盖的 DOM 节点。可传入一个 DOM 对象或字符串；若传入字符串，则会将其作为参数传入 <code>document.querySelector</code>以获取到对应 DOM 节点</td><td>object/string</td><td>—</td><td>document.body</td></tr><tr><td>body</td><td>同 <code>v-loading</code> 指令中的 <code>body</code> 修饰符</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>fullscreen</td><td>同 <code>v-loading</code> 指令中的 <code>fullscreen</code> 修饰符</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>lock</td><td>同 <code>v-loading</code> 指令中的 <code>lock</code> 修饰符</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>text</td><td>显示在加载图标下方的加载文案</td><td>string</td><td>—</td><td>—</td></tr><tr><td>spinner</td><td>自定义加载图标类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>background</td><td>遮罩背景色</td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>Loading 的自定义类名</td><td>string</td><td>—</td><td>—</td></tr></tbody></table>',13);var N={name:"component-doc",components:{"element-demo0":function(){const{resolveComponent:e,createVNode:t,resolveDirective:n,withCtx:d,withDirectives:l,openBlock:o,createBlock:c}=a;const r={data:()=>({tableData:[{date:"2016-05-03",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"},{date:"2016-05-02",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"}],loading:!0})};return Object.assign({render:function(a,r){const s=e("el-table-column"),i=e("el-table"),p=n("loading");return o(),c("div",null,[l(t(i,{data:a.tableData,style:{width:"100%"}},{default:d(()=>[t(s,{prop:"date",label:"日期",width:"180"}),t(s,{prop:"name",label:"姓名",width:"180"}),t(s,{prop:"address",label:"地址"})]),_:1},8,["data"]),[[p,a.loading]])])}},r)}(),"element-demo1":function(){const{resolveComponent:e,createVNode:t,resolveDirective:n,withCtx:d,withDirectives:l,openBlock:o,createBlock:c}=a;const r={data:()=>({tableData:[{date:"2016-05-03",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"},{date:"2016-05-02",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"}],loading:!0})};return Object.assign({render:function(a,r){const s=e("el-table-column"),i=e("el-table"),p=n("loading");return o(),c("div",null,[l(t(i,{"element-loading-text":"拼命加载中","element-loading-spinner":"el-icon-loading","element-loading-background":"rgba(0, 0, 0, 0.8)",data:a.tableData,style:{width:"100%"}},{default:d(()=>[t(s,{prop:"date",label:"日期",width:"180"}),t(s,{prop:"name",label:"姓名",width:"180"}),t(s,{prop:"address",label:"地址"})]),_:1},8,["data"]),[[p,a.loading]])])}},r)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,resolveDirective:n,withCtx:d,createVNode:l,withDirectives:o,openBlock:c,createBlock:r}=a,s=e(" 指令方式 "),i=e(" 服务方式 ");const p={data:()=>({fullscreenLoading:!1}),methods:{openFullScreen1(){this.fullscreenLoading=!0,setTimeout(()=>{this.fullscreenLoading=!1},2e3)},openFullScreen2(){const e=this.$loading({lock:!0,text:"Loading",spinner:"el-icon-loading",background:"rgba(0, 0, 0, 0.7)"});setTimeout(()=>{e.close()},2e3)}}};return Object.assign({render:function(e,a){const p=t("el-button"),b=n("loading");return c(),r("div",null,[o(l(p,{type:"primary",onClick:e.openFullScreen1},{default:d(()=>[s]),_:1},8,["onClick"]),[[b,e.fullscreenLoading,void 0,{fullscreen:!0,lock:!0}]]),l(p,{type:"primary",onClick:e.openFullScreen2},{default:d(()=>[i]),_:1},8,["onClick"])])}},p)}()},render:function(e,t,n,N,f,v){const w=Object(a.resolveComponent)("element-demo0"),x=Object(a.resolveComponent)("demo-block"),k=Object(a.resolveComponent)("element-demo1"),y=Object(a.resolveComponent)("element-demo2");return Object(a.openBlock)(),Object(a.createBlock)("section",d,[l,o,c,r,Object(a.createVNode)(x,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(w)]),highlight:Object(a.withCtx)(()=>[i]),default:Object(a.withCtx)(()=>[s]),_:1}),p,b,Object(a.createVNode)(x,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(k)]),highlight:Object(a.withCtx)(()=>[g]),default:Object(a.withCtx)(()=>[u]),_:1}),h,j,Object(a.createVNode)(x,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(y)]),highlight:Object(a.withCtx)(()=>[O]),default:Object(a.withCtx)(()=>[m]),_:1}),V])}};t.default=N}}]);