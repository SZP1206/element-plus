(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{579:function(e,t,o){"use strict";o.r(t);var n=o(0);const a={class:"content element-doc"},c=Object(n.createStaticVNode)('<h2 id="messagebox"><a class="header-anchor" href="#messagebox">¶</a> MessageBox</h2><p>Un conjunto de cajas modales simulando un sistema de message box, principalmente para alertar información, confirmar operaciones y mostrar mensajes de aviso.</p><div class="tip"><p>Por diseño los message box nos proveen de simulaciones de sistemas como los componentes <code>alert</code>, <code>confirm</code> y <code>prompt</code>，entonces su contenido debería ser simple. para contenido mas complejo, por favor utilice el componente Dialog.</p></div><h3 id="alert"><a class="header-anchor" href="#alert">¶</a> Alert</h3><p>Alert interrumpe las operaciones realizadas hasta que el usuario confirme la alerta.</p>',5),d=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Desplegar una alerta utilizando el método "),Object(n.createVNode)("code",null,"$alert"),Object(n.createTextVNode)(". Simula el sistema "),Object(n.createVNode)("code",null,"alert"),Object(n.createTextVNode)(", y no puede ser cerrado al presionar la tecla ESC o al dar clic fuera de la caja. En este ejemplo, dos parámetros son recibidos "),Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"title"),Object(n.createTextVNode)(". Vale la pena mencionar que cuando la caja es cerrada, regresa un objeto "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(" para su procesamiento posteriormente. Si no estas seguro si el navegador soporta "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(", deberías importar una librería de terceros de polyfill o utilizar callbacks.")])],-1),r=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open the Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('This is a message', 'Title', {\n          confirmButtonText: 'OK',\n          callback: action => {\n            this.$message({\n              type: 'info',\n              message: `action: ${ action }`\n            });\n          }\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),s=Object(n.createVNode)("h3",{id:"confirm"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#confirm"},"¶"),Object(n.createTextVNode)(" Confirm")],-1),l=Object(n.createVNode)("p",null,"Confirm es utilizado para preguntar al usuario y recibir una confirmación.",-1),i=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Llamando al método "),Object(n.createVNode)("code",null,"$confirm"),Object(n.createTextVNode)(" para abrir el componente confirm, y simula el sistema "),Object(n.createVNode)("code",null,"confirm"),Object(n.createTextVNode)(". También podemos personalizar a gran medida el componente Message Box al mandar un tercer atributo llamado "),Object(n.createVNode)("code",null,"options"),Object(n.createTextVNode)(" que es literalmente un objeto. El atributo "),Object(n.createVNode)("code",null,"type"),Object(n.createTextVNode)(" indica el tipo de mensaje, y su valor puede ser "),Object(n.createVNode)("code",null,"success"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"error"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"info"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"warning"),Object(n.createTextVNode)(". Se debe tener en cuenta que el segundo atributo "),Object(n.createVNode)("code",null,"title"),Object(n.createTextVNode)(" debe ser de tipo "),Object(n.createVNode)("code",null,"string"),Object(n.createTextVNode)(", y si es de tipo "),Object(n.createVNode)("code",null,"object"),Object(n.createTextVNode)(", sera manejado como el atributo "),Object(n.createVNode)("code",null,"options"),Object(n.createTextVNode)(". Aquí utilizamos "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(" para manejar posteriormente el proceso.")])],-1),u=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open the Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning'\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Delete completed'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Delete canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),p=Object(n.createVNode)("h3",{id:"prompt"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#prompt"},"¶"),Object(n.createTextVNode)(" Prompt")],-1),m=Object(n.createVNode)("p",null,"Prompt es utilizado cuando se requiere entrada de información del usuario.",-1),b=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Llamando al método "),Object(n.createVNode)("code",null,"$prompt"),Object(n.createTextVNode)(" desplegamos el componente prompt, y simula el sistema "),Object(n.createVNode)("code",null,"prompt"),Object(n.createTextVNode)(".Puedes utilizar el parámetro "),Object(n.createVNode)("code",null,"inputPattern"),Object(n.createTextVNode)(" para especificar tu propio patrón RegExp. Utiliza el parámetro "),Object(n.createVNode)("code",null,"inputValidator"),Object(n.createTextVNode)(" para especificar el método de validación, y debería regresar un valor de tipo "),Object(n.createVNode)("code",null,"Boolean"),Object(n.createTextVNode)(" o "),Object(n.createVNode)("code",null,"String"),Object(n.createTextVNode)(". Al regresar "),Object(n.createVNode)("code",null,"false"),Object(n.createTextVNode)(" o "),Object(n.createVNode)("code",null,"String"),Object(n.createTextVNode)(" significa que la validación a fallado, y la cadena regresada se usara como "),Object(n.createVNode)("code",null,"inputErrorMessage"),Object(n.createTextVNode)(". Ademas, puedes personalizar el atributo placeholder del input box con el parámetro "),Object(n.createVNode)("code",null,"inputPlaceholder"),Object(n.createTextVNode)(".")])],-1),g=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$prompt('Please input your e-mail', 'Tip', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n          inputErrorMessage: 'Invalid Email'\n        }).then(({ value }) => {\n          this.$message({\n            type: 'success',\n            message: 'Your email is:' + value\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Input canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),h=Object(n.createVNode)("h3",{id:"personalizacion"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#personalizacion"},"¶"),Object(n.createTextVNode)(" Personalización")],-1),j=Object(n.createVNode)("p",null,"Puede ser personalizado para mostrar diversos contenidos.",-1),O=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Los tres métodos mencionados anteriormente son un rempaquetado del método "),Object(n.createVNode)("code",null,"$msgbox"),Object(n.createTextVNode)(". En este ejemplo se realiza una llamada al método "),Object(n.createVNode)("code",null,"$msgbox"),Object(n.createTextVNode)(" directamente utilizando el atributo "),Object(n.createVNode)("code",null,"showCancelButton"),Object(n.createTextVNode)(", el cual es utilizado para indicar si el botón cancelar es mostrado en pantalla. Además podemos utilizar el atributo "),Object(n.createVNode)("code",null,"cancelButtonClass"),Object(n.createTextVNode)(" para agregar un estilo personalizado y el atributo "),Object(n.createVNode)("code",null,"cancelButtonText"),Object(n.createTextVNode)(" para personalizar el texto del botón (el botón de confirmación también cuenta con estos campos, y podrá encontrar una lista completa de estos atributos al final de esta documentación). Este ejemplo también utiliza el atributo "),Object(n.createVNode)("code",null,"beforeClose"),Object(n.createTextVNode)(". Es un método que es disparado cuando una instancia del componente MessageBox es cerrada, y su ejecución detendrá el cierre de la instancia. Tiene tres parámetros: "),Object(n.createVNode)("code",null,"action"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"instance"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(". Al utilizarla te permite manipular la instancia antes de que sea cerrada, e.g. activando "),Object(n.createVNode)("code",null,"loading"),Object(n.createTextVNode)(" para el botón de confirmación; puede invocar el método "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(" para cerrar la instancia del componente MessageBox (si el método "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(" no es llamado dentro del atributo "),Object(n.createVNode)("code",null,"beforeClose"),Object(n.createTextVNode)(", la instancia no podrá cerrarse).")])],-1),x=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open() {\n        this.$msgbox({\n          title: 'Message',\n          message: h('p', null, [\n            h('span', null, 'Message can be '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ]),\n          showCancelButton: true,\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true;\n              instance.confirmButtonText = 'Loading...';\n              setTimeout(() => {\n                done();\n                setTimeout(() => {\n                  instance.confirmButtonLoading = false;\n                }, 300);\n              }, 3000);\n            } else {\n              done();\n            }\n          }\n        }).then(action => {\n          this.$message({\n            type: 'info',\n            message: 'action: ' + action\n          });\n        });\n      },\n    }\n  }\n<\/script>\n")],-1),V=Object(n.createStaticVNode)('<div class="tip"><p>El contenido de MessageBox puede ser <code>VNode</code>, permitiéndonos pasar componentes personalizados. Al abrir el MessageBox, Vue compara el nuevo <code>VNode</code> con el viejo <code>VNode</code>, y luego averigua cómo actualizar eficientemente la interfaz de usuario, de modo que es posible que los componentes no se vuelvan a procesar completamente (<a href="https://github.com/ElemeFE/element/issues/8931">#8931</a>). En este caso, se puede añadir una clave única a <code>VNode</code> cada vez que se abre MessageBox: <a href="https://jsfiddle.net/zhiyang/ezmhq2ef">ejemplo</a>.</p></div><h3 id="utiliza-cadenas-html"><a class="header-anchor" href="#utiliza-cadenas-html">¶</a> Utiliza cadenas HTML</h3><p><code>message</code> soporta cadenas HTML.</p>',3),N=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Establezca el valor de "),Object(n.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(n.createTextVNode)(" a true y "),Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" sera tratado como una cadena HTML.")])],-1),f=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('<strong>This is <i>HTML</i> string</strong>', 'HTML String', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),T=Object(n.createStaticVNode)('<div class="warning"><p>Aunque la propiedad <code>message</code> soporta cadenas HTML, realizar arbitrariamente render dinámico de HTML en nuestro sitio web puede ser muy peligroso ya que puede conducir fácilmente a <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS attacks</a>. Entonces cuando <code>dangerouslyUseHTMLString</code> esta activada, asegúrese que el contenido de <code>message</code> sea de confianza, y <strong>nunca</strong> asignar <code>message</code> a contenido generado por el usuario.</p></div><h3 id="distinguir-entre-cancelar-y-cerrar"><a class="header-anchor" href="#distinguir-entre-cancelar-y-cerrar">¶</a> Distinguir entre cancelar y cerrar</h3><p>En algunos casos, hacer clic en el botón Cancelar y en el botón Cerrar puede tener diferentes significados.</p>',3),C=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Por defecto, los parámetros de "),Object(n.createVNode)("code",null,"Promise's reject callback"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"callback"),Object(n.createTextVNode)(" son "),Object(n.createVNode)("code",null,"cancel"),Object(n.createTextVNode)(" cuando el usuario cancela (haciendo clic en el botón de cancelación) y cierra (haciendo clic en el botón de cerrar o en la capa de máscara, pulsando la tecla ESC) el MessageBox. Si "),Object(n.createVNode)("code",null,"distinguishCancelAndClose"),Object(n.createTextVNode)(" está ajustado a "),Object(n.createVNode)("code",null,"true"),Object(n.createTextVNode)(", los parámetros de las dos operaciones anteriores son "),Object(n.createVNode)("code",null,"cancel"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"close"),Object(n.createTextVNode)(" respectivamente.")])],-1),y=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('You have unsaved changes, save and proceed?', 'Confirm', {\n          distinguishCancelAndClose: true,\n          confirmButtonText: 'Save',\n          cancelButtonText: 'Discard Changes'\n        })\n          .then(() => {\n            this.$message({\n              type: 'info',\n              message: 'Changes saved. Proceeding to a new route.'\n            });\n          })\n          .catch(action => {\n            this.$message({\n              type: 'info',\n              message: action === 'cancel'\n                ? 'Changes discarded. Proceeding to a new route.'\n                : 'Stay in the current route'\n            })\n          });\n      }\n    }\n  }\n<\/script>\n")],-1),B=Object(n.createVNode)("h3",{id:"contenido-centrado"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#contenido-centrado"},"¶"),Object(n.createTextVNode)(" Contenido centrado")],-1),v=Object(n.createVNode)("p",null,"El contenido del componente MessageBox puede ser centrado.",-1),w=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Establecer "),Object(n.createVNode)("code",null,"center"),Object(n.createTextVNode)(" a "),Object(n.createVNode)("code",null,"true"),Object(n.createTextVNode)(" centrara el contenido")])],-1),k=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning',\n          center: true\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Delete completed'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Delete canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),M=Object(n.createStaticVNode)('<h3 id="metodos-globales"><a class="header-anchor" href="#metodos-globales">¶</a> Métodos Globales</h3><p>Si Element Plus fue importado completamente, agregara los siguientes métodos globales para Vue.prototype: <code>$msgbox</code>, <code>$alert</code>, <code>$confirm</code> y <code>$prompt</code>. Así que en una instancia de Vue puedes llamar el método <code>MessageBox</code> como lo que hicimos en esta pagina. Los parámetros son:</p><ul><li><code>$msgbox(options)</code></li><li><code>$alert(message, title, options)</code> or <code>$alert(message, options)</code></li><li><code>$confirm(message, title, options)</code> or <code>$confirm(message, options)</code></li><li><code>$prompt(message, title, options)</code> or <code>$prompt(message, options)</code></li></ul><h3 id="importacion-local"><a class="header-anchor" href="#importacion-local">¶</a> Importación local</h3><p>Si prefieres importar <code>MessageBox</code> cuando lo necesites (on demand):</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { MessageBox } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>Los métodos correspondientes: <code>MessageBox</code>, <code>MessageBox.alert</code>, <code>MessageBox.confirm</code> y <code>MessageBox.prompt</code>. Los parámetros son los mismos que los anteriores.</p><h3 id="opciones"><a class="header-anchor" href="#opciones">¶</a> Opciones</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores Permitidos</th><th>Por defecto</th></tr></thead><tbody><tr><td>title</td><td>titulo del componente MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>contenido del componente MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>utilizado para que <code>message</code> sea tratado como una cadena HTML</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>tipo de mensaje , utilizado para mostrar el icono</td><td>string</td><td>success / info / warning / error</td><td>—</td></tr><tr><td>iconClass</td><td>clase personalizada para el icono, sobreescribe <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>nombre de la clase personalizada para el componente MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>callback</td><td>MessageBox callback al cerrar si no desea utilizar Promise</td><td>function(action), donde la accion puede ser &#39;confirm&#39;, &#39;cancel&#39; o &#39;close&#39;, e <code>instance</code> es la instancia del componente MessageBox. Puedes acceder a los metodos y atributos de esa instancia</td><td>—</td><td>—</td></tr><tr><td>beforeClose</td><td>callback llamado antes de cerrar el componente MessageBox, y previene que el componente MessageBox se cierre</td><td>function(action, instance, done), donde <code>action</code> pueden ser &#39;confirm&#39;, &#39;cancel&#39; o &#39;close&#39;; <code>instance</code> es la instancia del componente MessageBox, Puedes acceder a los metodos y atributos de esa instancia; <code>done</code> es para cerrar la instancia</td><td>—</td><td>—</td></tr><tr><td>distinguishCancelAndClose</td><td>si se debe distinguir entre cancelar y cerrar</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lockScroll</td><td>utilizado para bloquear el desplazamiento del contenido del MessageBox prompts</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showCancelButton</td><td>utilizado para mostrar un botón cancelar</td><td>boolean</td><td>—</td><td>false (true cuando es llamado con confirm y prompt)</td></tr><tr><td>showConfirmButton</td><td>utilizado para mostrar un botón confirmar</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>cancelButtonText</td><td>contenido de texto del botón cancelar</td><td>string</td><td>—</td><td>Cancel</td></tr><tr><td>confirmButtonText</td><td>contenido de texto del botón confirmar</td><td>string</td><td>—</td><td>OK</td></tr><tr><td>cancelButtonClass</td><td>nombre de la clase personalizada del botón cancelar</td><td>string</td><td>—</td><td>—</td></tr><tr><td>confirmButtonClass</td><td>nombre de la clase personalizada del botón confirmar</td><td>string</td><td>—</td><td>—</td></tr><tr><td>closeOnClickModal</td><td>utilizado para que que el componente MessageBox pueda ser cerrado al dar clic en la mascara</td><td>boolean</td><td>—</td><td>true (false cuando es llamado con alert)</td></tr><tr><td>closeOnPressEscape</td><td>utilizado para que que el componente MessageBox pueda ser cerrado al presionar la tecla ESC</td><td>boolean</td><td>—</td><td>true (false cuando es llamado con alert)</td></tr><tr><td>closeOnHashChange</td><td>utilizado para cerra el componente MessageBox cuando hash cambie</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showInput</td><td>utilizado para mostrar el componente input</td><td>boolean</td><td>—</td><td>false (true cuando es llamado con prompt)</td></tr><tr><td>inputPlaceholder</td><td>placeholder para el componente input</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputType</td><td>tipo del componente input</td><td>string</td><td>—</td><td>text</td></tr><tr><td>inputValue</td><td>valor inicial del componente input</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputPattern</td><td>regexp del componente input</td><td>regexp</td><td>—</td><td>—</td></tr><tr><td>inputValidator</td><td>función de validación del componente input. Debe regresar un valor de tipo boolean o string. Si regresa un valor tipo string, sera asignado a inputErrorMessage</td><td>function</td><td>—</td><td>—</td></tr><tr><td>inputErrorMessage</td><td>mensaje de error cuando la validación falla</td><td>string</td><td>—</td><td>Illegal input</td></tr><tr><td>center</td><td>utilizado para alinear el contenido al centro</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>roundButton</td><td>utilizado para redondear el botón</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',9);var $={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open the Message Box");const s={methods:{open(){this.$alert("This is a message","Title",{confirmButtonText:"OK",callback:e=>{this.$message({type:"info",message:"action: "+e})}})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open the Message Box");const s={methods:{open(){this.$confirm("This will permanently delete the file. Continue?","Warning",{confirmButtonText:"OK",cancelButtonText:"Cancel",type:"warning"}).then(()=>{this.$message({type:"success",message:"Delete completed"})}).catch(()=>{this.$message({type:"info",message:"Delete canceled"})})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open Message Box");const s={methods:{open(){this.$prompt("Please input your e-mail","Tip",{confirmButtonText:"OK",cancelButtonText:"Cancel",inputPattern:/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputErrorMessage:"Invalid Email"}).then(({value:e})=>{this.$message({type:"success",message:"Your email is:"+e})}).catch(()=>{this.$message({type:"info",message:"Input canceled"})})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open Message Box");const{h:s}=n,l={methods:{open(){this.$msgbox({title:"Message",message:s("p",null,[s("span",null,"Message can be "),s("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"OK",cancelButtonText:"Cancel",beforeClose:(e,t,o)=>{"confirm"===e?(t.confirmButtonLoading=!0,t.confirmButtonText="Loading...",setTimeout(()=>{o(),setTimeout(()=>{t.confirmButtonLoading=!1},300)},3e3)):o()}}).then(e=>{this.$message({type:"info",message:"action: "+e})})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open Message Box");const s={methods:{open(){this.$alert("<strong>This is <i>HTML</i> string</strong>","HTML String",{dangerouslyUseHTMLString:!0})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo5":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open Message Box");const s={methods:{open(){this.$confirm("You have unsaved changes, save and proceed?","Confirm",{distinguishCancelAndClose:!0,confirmButtonText:"Save",cancelButtonText:"Discard Changes"}).then(()=>{this.$message({type:"info",message:"Changes saved. Proceeding to a new route."})}).catch(e=>{this.$message({type:"info",message:"cancel"===e?"Changes discarded. Proceeding to a new route.":"Stay in the current route"})})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo6":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:a,openBlock:c,createBlock:d}=n,r=e("Click to open Message Box");const s={methods:{open(){this.$confirm("This will permanently delete the file. Continue?","Warning",{confirmButtonText:"OK",cancelButtonText:"Cancel",type:"warning",center:!0}).then(()=>{this.$message({type:"success",message:"Delete completed"})}).catch(()=>{this.$message({type:"info",message:"Delete canceled"})})}}};return Object.assign({render:function(e,n){const s=t("el-button");return c(),d("div",null,[a(s,{type:"text",onClick:e.open},{default:o(()=>[r]),_:1},8,["onClick"])])}},s)}()},render:function(e,t,o,$,z,P){const S=Object(n.resolveComponent)("element-demo0"),q=Object(n.resolveComponent)("demo-block"),E=Object(n.resolveComponent)("element-demo1"),L=Object(n.resolveComponent)("element-demo2"),_=Object(n.resolveComponent)("element-demo3"),H=Object(n.resolveComponent)("element-demo4"),A=Object(n.resolveComponent)("element-demo5"),D=Object(n.resolveComponent)("element-demo6");return Object(n.openBlock)(),Object(n.createBlock)("section",a,[c,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(S)]),highlight:Object(n.withCtx)(()=>[r]),default:Object(n.withCtx)(()=>[d]),_:1}),s,l,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(E)]),highlight:Object(n.withCtx)(()=>[u]),default:Object(n.withCtx)(()=>[i]),_:1}),p,m,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(L)]),highlight:Object(n.withCtx)(()=>[g]),default:Object(n.withCtx)(()=>[b]),_:1}),h,j,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(_)]),highlight:Object(n.withCtx)(()=>[x]),default:Object(n.withCtx)(()=>[O]),_:1}),V,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(H)]),highlight:Object(n.withCtx)(()=>[f]),default:Object(n.withCtx)(()=>[N]),_:1}),T,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(A)]),highlight:Object(n.withCtx)(()=>[y]),default:Object(n.withCtx)(()=>[C]),_:1}),B,v,Object(n.createVNode)(q,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(D)]),highlight:Object(n.withCtx)(()=>[k]),default:Object(n.withCtx)(()=>[w]),_:1}),M])}};t.default=$}}]);