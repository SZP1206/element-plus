(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{523:function(e,t,o){"use strict";o.r(t);var n=o(0);const c={class:"content element-doc"},i=Object(n.createVNode)("h2",{id:"notification"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#notification"},"¶"),Object(n.createTextVNode)(" Notification")],-1),s=Object(n.createVNode)("p",null,"Displays a global notification message at a corner of the page.",-1),a=Object(n.createVNode)("h3",{id:"basic-usage"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#basic-usage"},"¶"),Object(n.createTextVNode)(" Basic usage")],-1),l=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Element Plus has registered the "),Object(n.createVNode)("code",null,"$notify"),Object(n.createTextVNode)(" method and it receives an object as its parameter. In the simplest case, you can set the "),Object(n.createVNode)("code",null,"title"),Object(n.createTextVNode)(" field and the"),Object(n.createVNode)("code",null," message"),Object(n.createTextVNode)(" field for the title and body of the notification. By default, the notification automatically closes after 4500ms, but by setting "),Object(n.createVNode)("code",null,"duration"),Object(n.createTextVNode)(" you can control its duration. Specifically, if set to "),Object(n.createVNode)("code",null,"0"),Object(n.createTextVNode)(", it will not close automatically. Note that "),Object(n.createVNode)("code",null,"duration"),Object(n.createTextVNode)(" receives a "),Object(n.createVNode)("code",null,"Number"),Object(n.createTextVNode)(" in milliseconds.")])],-1),d=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    Closes automatically\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    Won't close automatically\n    </el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open1() {\n        this.$notify({\n          title: 'Title',\n          message: h('i', { style: 'color: teal' }, 'This is a reminder')\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: 'Prompt',\n          message: 'This is a message that does not automatically close',\n          duration: 0\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),r=Object(n.createVNode)("h3",{id:"with-types"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#with-types"},"¶"),Object(n.createTextVNode)(" With types")],-1),h=Object(n.createVNode)("p",null,"We provide four types: success, warning, info and error.",-1),u=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Element Plus provides four notification types: "),Object(n.createVNode)("code",null,"success"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"warning"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"info"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"error"),Object(n.createTextVNode)(". They are set by the "),Object(n.createVNode)("code",null,"type"),Object(n.createTextVNode)(" field, and other values will be ignored. We also registered methods for these types that can be invoked directly like "),Object(n.createVNode)("code",null,"open3"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"open4"),Object(n.createTextVNode)(" without passing a "),Object(n.createVNode)("code",null,"type"),Object(n.createTextVNode)(" field.")])],-1),p=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    Success\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    Warning\n  </el-button>\n  <el-button\n    plain\n    @click=\"open3\">\n    Info\n  </el-button>\n  <el-button\n    plain\n    @click=\"open4\">\n    Error\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$notify({\n          title: 'Success',\n          message: 'This is a success message',\n          type: 'success'\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: 'Warning',\n          message: 'This is a warning message',\n          type: 'warning'\n        });\n      },\n\n      open3() {\n        this.$notify.info({\n          title: 'Info',\n          message: 'This is an info message'\n        });\n      },\n\n      open4() {\n        this.$notify.error({\n          title: 'Error',\n          message: 'This is an error message'\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),b=Object(n.createVNode)("h3",{id:"custom-position"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#custom-position"},"¶"),Object(n.createTextVNode)(" Custom position")],-1),m=Object(n.createVNode)("p",null,"Notification can emerge from any corner you like.",-1),f=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("The "),Object(n.createVNode)("code",null,"position"),Object(n.createTextVNode)(" attribute defines which corner Notification slides in. It can be "),Object(n.createVNode)("code",null,"top-right"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"top-left"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"bottom-right"),Object(n.createTextVNode)(" or "),Object(n.createVNode)("code",null,"bottom-left"),Object(n.createTextVNode)(". Defaults to "),Object(n.createVNode)("code",null,"top-right"),Object(n.createTextVNode)(".")])],-1),j=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open1\">\n    Top Right\n  </el-button>\n  <el-button\n    plain\n    @click=\"open2\">\n    Bottom Right\n  </el-button>\n  <el-button\n    plain\n    @click=\"open3\">\n    Bottom Left\n  </el-button>\n  <el-button\n    plain\n    @click=\"open4\">\n    Top Left\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$notify({\n          title: 'Custom Position',\n          message: 'I\\'m at the top right corner'\n        });\n      },\n\n      open2() {\n        this.$notify({\n          title: 'Custom Position',\n          message: 'I\\'m at the bottom right corner',\n          position: 'bottom-right'\n        });\n      },\n\n      open3() {\n        this.$notify({\n          title: 'Custom Position',\n          message: 'I\\'m at the bottom left corner',\n          position: 'bottom-left'\n        });\n      },\n\n      open4() {\n        this.$notify({\n          title: 'Custom Position',\n          message: 'I\\'m at the top left corner',\n          position: 'top-left'\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),g=Object(n.createVNode)("h3",{id:"with-offset"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#with-offset"},"¶"),Object(n.createTextVNode)(" With offset")],-1),N=Object(n.createVNode)("p",null,"Customize Notification's offset from the edge of the screen.",-1),O=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Set the "),Object(n.createVNode)("code",null,"offset"),Object(n.createTextVNode)(" attribute to customize Notification's offset from the edge of the screen. Note that every Notification instance of the same moment should have the same offset.")])],-1),V=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open\">\n    Notification with offset\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify.success({\n          title: 'Success',\n          message: 'This is a success message',\n          offset: 100\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),y=Object(n.createVNode)("h3",{id:"use-html-string"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#use-html-string"},"¶"),Object(n.createTextVNode)(" Use HTML string")],-1),T=Object(n.createVNode)("p",null,[Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" supports HTML string.")],-1),C=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Set "),Object(n.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(n.createTextVNode)(" to true and "),Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" will be treated as an HTML string.")])],-1),x=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open\">\n    Use HTML String\n  </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify({\n          title: 'HTML String',\n          dangerouslyUseHTMLString: true,\n          message: '<strong>This is <i>HTML</i> string</strong>'\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),k=Object(n.createStaticVNode)('<div class="warning"><p>Although <code>message</code> property supports HTML strings, dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS attacks</a>. So when <code>dangerouslyUseHTMLString</code> is on, please make sure the content of <code>message</code> is trusted, and <strong>never</strong> assign <code>message</code> to user-provided content.</p></div><h3 id="hide-close-button"><a class="header-anchor" href="#hide-close-button">¶</a> Hide close button</h3><p>It is possible to hide the close button</p>',3),w=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Set the "),Object(n.createVNode)("code",null,"showClose"),Object(n.createTextVNode)(" attribute to "),Object(n.createVNode)("code",null,"false"),Object(n.createTextVNode)(" so the notification cannot be closed by the user.")])],-1),v=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button\n    plain\n    @click=\"open\">\n    Hide close button\n    </el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$notify.success({\n          title: 'Info',\n          message: 'This is a message without close button',\n          showClose: false\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),$=Object(n.createStaticVNode)('<h3 id="global-method"><a class="header-anchor" href="#global-method">¶</a> Global method</h3><p>Element Plus has added a global method <code>$notify</code> for Vue.prototype. So in a vue instance you can call <code>Notification</code> like what we did in this page.</p><h3 id="local-import"><a class="header-anchor" href="#local-import">¶</a> Local import</h3><p>Import <code>Notification</code>:</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { Notification } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>In this case you should call <code>Notification(options)</code>. We have also registered methods for different types, e.g. <code>Notification.success(options)</code>. You can call <code>Notification.closeAll()</code> to manually close all the instances.</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>title</td><td>title</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>description text</td><td>string/Vue.VNode</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>whether <code>message</code> is treated as HTML string</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>notification type</td><td>string</td><td>success/warning/info/error</td><td>—</td></tr><tr><td>iconClass</td><td>custom icon&#39;s class. It will be overridden by <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>custom class name for Notification</td><td>string</td><td>—</td><td>—</td></tr><tr><td>duration</td><td>duration before close. It will not automatically close if set 0</td><td>number</td><td>—</td><td>4500</td></tr><tr><td>position</td><td>custom position</td><td>string</td><td>top-right/top-left/bottom-right/bottom-left</td><td>top-right</td></tr><tr><td>showClose</td><td>whether to show a close button</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>onClose</td><td>callback function when closed</td><td>function</td><td>—</td><td>—</td></tr><tr><td>onClick</td><td>callback function when notification clicked</td><td>function</td><td>—</td><td>—</td></tr><tr><td>offset</td><td>offset from the top edge of the screen. Every Notification instance of the same moment should have the same offset</td><td>number</td><td>—</td><td>0</td></tr></tbody></table><h3 id="methods"><a class="header-anchor" href="#methods">¶</a> Methods</h3><p><code>Notification</code> and <code>this.$notify</code> returns the current Notification instance. To manually close the instance, you can call <code>close</code> on it.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>close</td><td>close the Notification</td></tr></tbody></table>',11);var S={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Closes automatically "),l=e(" Won't close automatically ");const{h:d}=n,r={methods:{open1(){this.$notify({title:"Title",message:d("i",{style:"color: teal"},"This is a reminder")})},open2(){this.$notify({title:"Prompt",message:"This is a message that does not automatically close",duration:0})}}};return Object.assign({render:function(e,n){const d=t("el-button");return i(),s("div",null,[c(d,{plain:"",onClick:e.open1},{default:o(()=>[a]),_:1},8,["onClick"]),c(d,{plain:"",onClick:e.open2},{default:o(()=>[l]),_:1},8,["onClick"])])}},r)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Success "),l=e(" Warning "),d=e(" Info "),r=e(" Error ");const h={methods:{open1(){this.$notify({title:"Success",message:"This is a success message",type:"success"})},open2(){this.$notify({title:"Warning",message:"This is a warning message",type:"warning"})},open3(){this.$notify.info({title:"Info",message:"This is an info message"})},open4(){this.$notify.error({title:"Error",message:"This is an error message"})}}};return Object.assign({render:function(e,n){const h=t("el-button");return i(),s("div",null,[c(h,{plain:"",onClick:e.open1},{default:o(()=>[a]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open2},{default:o(()=>[l]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open3},{default:o(()=>[d]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open4},{default:o(()=>[r]),_:1},8,["onClick"])])}},h)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Top Right "),l=e(" Bottom Right "),d=e(" Bottom Left "),r=e(" Top Left ");const h={methods:{open1(){this.$notify({title:"Custom Position",message:"I'm at the top right corner"})},open2(){this.$notify({title:"Custom Position",message:"I'm at the bottom right corner",position:"bottom-right"})},open3(){this.$notify({title:"Custom Position",message:"I'm at the bottom left corner",position:"bottom-left"})},open4(){this.$notify({title:"Custom Position",message:"I'm at the top left corner",position:"top-left"})}}};return Object.assign({render:function(e,n){const h=t("el-button");return i(),s("div",null,[c(h,{plain:"",onClick:e.open1},{default:o(()=>[a]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open2},{default:o(()=>[l]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open3},{default:o(()=>[d]),_:1},8,["onClick"]),c(h,{plain:"",onClick:e.open4},{default:o(()=>[r]),_:1},8,["onClick"])])}},h)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Notification with offset ");const l={methods:{open(){this.$notify.success({title:"Success",message:"This is a success message",offset:100})}}};return Object.assign({render:function(e,n){const l=t("el-button");return i(),s("div",null,[c(l,{plain:"",onClick:e.open},{default:o(()=>[a]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Use HTML String ");const l={methods:{open(){this.$notify({title:"HTML String",dangerouslyUseHTMLString:!0,message:"<strong>This is <i>HTML</i> string</strong>"})}}};return Object.assign({render:function(e,n){const l=t("el-button");return i(),s("div",null,[c(l,{plain:"",onClick:e.open},{default:o(()=>[a]),_:1},8,["onClick"])])}},l)}(),"element-demo5":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:i,createBlock:s}=n,a=e(" Hide close button ");const l={methods:{open(){this.$notify.success({title:"Info",message:"This is a message without close button",showClose:!1})}}};return Object.assign({render:function(e,n){const l=t("el-button");return i(),s("div",null,[c(l,{plain:"",onClick:e.open},{default:o(()=>[a]),_:1},8,["onClick"])])}},l)}()},render:function(e,t,o,S,L,I){const B=Object(n.resolveComponent)("element-demo0"),H=Object(n.resolveComponent)("demo-block"),_=Object(n.resolveComponent)("element-demo1"),M=Object(n.resolveComponent)("element-demo2"),P=Object(n.resolveComponent)("element-demo3"),W=Object(n.resolveComponent)("element-demo4"),E=Object(n.resolveComponent)("element-demo5");return Object(n.openBlock)(),Object(n.createBlock)("section",c,[i,s,a,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(B)]),highlight:Object(n.withCtx)(()=>[d]),default:Object(n.withCtx)(()=>[l]),_:1}),r,h,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(_)]),highlight:Object(n.withCtx)(()=>[p]),default:Object(n.withCtx)(()=>[u]),_:1}),b,m,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(M)]),highlight:Object(n.withCtx)(()=>[j]),default:Object(n.withCtx)(()=>[f]),_:1}),g,N,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(P)]),highlight:Object(n.withCtx)(()=>[V]),default:Object(n.withCtx)(()=>[O]),_:1}),y,T,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(W)]),highlight:Object(n.withCtx)(()=>[x]),default:Object(n.withCtx)(()=>[C]),_:1}),k,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(E)]),highlight:Object(n.withCtx)(()=>[v]),default:Object(n.withCtx)(()=>[w]),_:1}),$])}};t.default=S}}]);