(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{521:function(e,t,o){"use strict";o.r(t);var n=o(0);const c={class:"content element-doc"},a=Object(n.createStaticVNode)('<h2 id="messagebox"><a class="header-anchor" href="#messagebox">¶</a> MessageBox</h2><p>A set of modal boxes simulating system message box, mainly for alerting information, confirm operations and prompting messages.</p><div class="tip"><p>By design MessageBox provides simulations of system&#39;s <code>alert</code>, <code>confirm</code> and <code>prompt</code>，so it&#39;s content should be simple. For more complicated contents, please use Dialog.</p></div><h3 id="alert"><a class="header-anchor" href="#alert">¶</a> Alert</h3><p>Alert interrupts user operation until the user confirms.</p>',5),d=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Open an alert by calling the "),Object(n.createVNode)("code",null,"$alert"),Object(n.createTextVNode)(" method. It simulates the system's "),Object(n.createVNode)("code",null,"alert"),Object(n.createTextVNode)(", and cannot be closed by pressing ESC or clicking outside the box. In this example, two parameters "),Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"title"),Object(n.createTextVNode)(" are received. It is worth mentioning that when the box is closed, it returns a "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(" object for further processing. If you are not sure if your target browsers support "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(", you should import a third party polyfill or use callbacks instead like this example.")])],-1),s=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open the Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('This is a message', 'Title', {\n          confirmButtonText: 'OK',\n          callback: action => {\n            this.$message({\n              type: 'info',\n              message: `action: ${ action }`\n            });\n          }\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),r=Object(n.createVNode)("h3",{id:"confirm"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#confirm"},"¶"),Object(n.createTextVNode)(" Confirm")],-1),l=Object(n.createVNode)("p",null,"Confirm is used to ask users' confirmation.",-1),i=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Call "),Object(n.createVNode)("code",null,"$confirm"),Object(n.createTextVNode)(" method to open a confirm, and it simulates the system's "),Object(n.createVNode)("code",null,"confirm"),Object(n.createTextVNode)(". We can also highly customize Message Box by passing a third attribute "),Object(n.createVNode)("code",null,"options"),Object(n.createTextVNode)(" which is a literal object. The attribute "),Object(n.createVNode)("code",null,"type"),Object(n.createTextVNode)(" indicates the message type, and it's value can be "),Object(n.createVNode)("code",null,"success"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"error"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"info"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"warning"),Object(n.createTextVNode)(". Note that the second attribute "),Object(n.createVNode)("code",null,"title"),Object(n.createTextVNode)(" must be a "),Object(n.createVNode)("code",null,"string"),Object(n.createTextVNode)(", and if it is an "),Object(n.createVNode)("code",null,"object"),Object(n.createTextVNode)(", it will be handled as the attribute "),Object(n.createVNode)("code",null,"options"),Object(n.createTextVNode)(". Here we use "),Object(n.createVNode)("code",null,"Promise"),Object(n.createTextVNode)(" to handle further processing.")])],-1),u=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open the Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning'\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Delete completed'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Delete canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),h=Object(n.createVNode)("h3",{id:"prompt"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#prompt"},"¶"),Object(n.createTextVNode)(" Prompt")],-1),p=Object(n.createVNode)("p",null,"Prompt is used when user input is required.",-1),m=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Call "),Object(n.createVNode)("code",null,"$prompt"),Object(n.createTextVNode)(" method to open a prompt, and it simulates the system's "),Object(n.createVNode)("code",null,"prompt"),Object(n.createTextVNode)(". You can use "),Object(n.createVNode)("code",null,"inputPattern"),Object(n.createTextVNode)(" parameter to specify your own RegExp pattern. Use "),Object(n.createVNode)("code",null,"inputValidator"),Object(n.createTextVNode)(" to specify validation method, and it should return "),Object(n.createVNode)("code",null,"Boolean"),Object(n.createTextVNode)(" or "),Object(n.createVNode)("code",null,"String"),Object(n.createTextVNode)(". Returning "),Object(n.createVNode)("code",null,"false"),Object(n.createTextVNode)(" or "),Object(n.createVNode)("code",null,"String"),Object(n.createTextVNode)(" means the validation has failed, and the string returned will be used as the "),Object(n.createVNode)("code",null,"inputErrorMessage"),Object(n.createTextVNode)(". In addition, you can customize the placeholder of the input box with "),Object(n.createVNode)("code",null,"inputPlaceholder"),Object(n.createTextVNode)(" parameter.")])],-1),b=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$prompt('Please input your e-mail', 'Tip', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n          inputErrorMessage: 'Invalid Email'\n        }).then(({ value }) => {\n          this.$message({\n            type: 'success',\n            message: 'Your email is:' + value\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Input canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),g=Object(n.createVNode)("h3",{id:"customization"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#customization"},"¶"),Object(n.createTextVNode)(" Customization")],-1),O=Object(n.createVNode)("p",null,"Can be customized to show various content.",-1),f=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("The three methods mentioned above are repackagings of the "),Object(n.createVNode)("code",null,"$msgbox"),Object(n.createTextVNode)(" method. This example calls "),Object(n.createVNode)("code",null,"$msgbox"),Object(n.createTextVNode)(" method directly using the "),Object(n.createVNode)("code",null,"showCancelButton"),Object(n.createTextVNode)(" attribute, which is used to indicate if a cancel button is displayed. Besides we can use "),Object(n.createVNode)("code",null,"cancelButtonClass"),Object(n.createTextVNode)(" to add a custom style and "),Object(n.createVNode)("code",null,"cancelButtonText"),Object(n.createTextVNode)(" to customize the button text (the confirm button also has these fields, and a complete list of fields can be found at the end of this documentation). This example also uses the "),Object(n.createVNode)("code",null,"beforeClose"),Object(n.createTextVNode)(" attribute. It is a method and will be triggered when the MessageBox instance will be closed, and its execution will stop the instance from closing. It has three parameters: "),Object(n.createVNode)("code",null,"action"),Object(n.createTextVNode)(", "),Object(n.createVNode)("code",null,"instance"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(". Using it enables you to manipulate the instance before it closes, e.g. activating "),Object(n.createVNode)("code",null,"loading"),Object(n.createTextVNode)(" for confirm button; you can invoke the "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(" method to close the MessageBox instance (if "),Object(n.createVNode)("code",null,"done"),Object(n.createTextVNode)(" is not called inside "),Object(n.createVNode)("code",null,"beforeClose"),Object(n.createTextVNode)(", the instance will not be closed).")])],-1),j=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open() {\n        this.$msgbox({\n          title: 'Message',\n          message: h('p', null, [\n            h('span', null, 'Message can be '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ]),\n          showCancelButton: true,\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true;\n              instance.confirmButtonText = 'Loading...';\n              setTimeout(() => {\n                done();\n                setTimeout(() => {\n                  instance.confirmButtonLoading = false;\n                }, 300);\n              }, 3000);\n            } else {\n              done();\n            }\n          }\n        }).then(action => {\n          this.$message({\n            type: 'info',\n            message: 'action: ' + action\n          });\n        });\n      },\n    }\n  }\n<\/script>\n")],-1),x=Object(n.createStaticVNode)('<div class="tip"><p>The content of MessageBox can be <code>VNode</code>, allowing us to pass custom components. When opening the MessageBox, Vue compares new <code>VNode</code> with old <code>VNode</code>, then figures out how to efficiently update the UI, so the components may not be completely re-rendered (<a href="https://github.com/ElemeFE/element/issues/8931">#8931</a>). In this case, you can add a unique key to <code>VNode</code> each time MessageBox opens: <a href="https://jsfiddle.net/zhiyang/ezmhq2ef">example</a>.</p></div><h3 id="use-html-string"><a class="header-anchor" href="#use-html-string">¶</a> Use HTML String</h3><p><code>message</code> supports HTML string.</p>',3),V=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Set "),Object(n.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(n.createTextVNode)(" to true and "),Object(n.createVNode)("code",null,"message"),Object(n.createTextVNode)(" will be treated as an HTML string.")])],-1),N=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('<strong>This is <i>HTML</i> string</strong>', 'HTML String', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),w=Object(n.createStaticVNode)('<div class="warning"><p>Although <code>message</code> property supports HTML strings, dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS attacks</a>. So when <code>dangerouslyUseHTMLString</code> is on, please make sure the content of <code>message</code> is trusted, and <strong>never</strong> assign <code>message</code> to user-provided content.</p></div><h3 id="distinguishing-cancel-and-close"><a class="header-anchor" href="#distinguishing-cancel-and-close">¶</a> Distinguishing cancel and close</h3><p>In some cases, clicking the cancel button and close button may have different meanings.</p>',3),T=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("By default, the parameters of Promise's reject callback and "),Object(n.createVNode)("code",null,"callback"),Object(n.createTextVNode)(" are 'cancel' when the user cancels (clicking the cancel button) and closes (clicking the close button or mask layer, pressing the ESC key) the MessageBox. If "),Object(n.createVNode)("code",null,"distinguishCancelAndClose"),Object(n.createTextVNode)(" is set to true, the parameters of the above two operations are 'cancel' and 'close' respectively.")])],-1),C=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('You have unsaved changes, save and proceed?', 'Confirm', {\n          distinguishCancelAndClose: true,\n          confirmButtonText: 'Save',\n          cancelButtonText: 'Discard Changes'\n        })\n          .then(() => {\n            this.$message({\n              type: 'info',\n              message: 'Changes saved. Proceeding to a new route.'\n            });\n          })\n          .catch(action => {\n            this.$message({\n              type: 'info',\n              message: action === 'cancel'\n                ? 'Changes discarded. Proceeding to a new route.'\n                : 'Stay in the current route'\n            })\n          });\n      }\n    }\n  }\n<\/script>\n")],-1),y=Object(n.createVNode)("h3",{id:"centered-content"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#centered-content"},"¶"),Object(n.createTextVNode)(" Centered content")],-1),B=Object(n.createVNode)("p",null,"Content of MessageBox can be centered.",-1),k=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Setting "),Object(n.createVNode)("code",null,"center"),Object(n.createTextVNode)(" to "),Object(n.createVNode)("code",null,"true"),Object(n.createTextVNode)(" will center the content")])],-1),v=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">Click to open Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning',\n          center: true\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: 'Delete completed'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: 'Delete canceled'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),M=Object(n.createStaticVNode)('<h3 id="global-method"><a class="header-anchor" href="#global-method">¶</a> Global method</h3><p>If Element Plus is fully imported, it will add the following global methods for Vue.prototype: <code>$msgbox</code>, <code>$alert</code>, <code>$confirm</code> and <code>$prompt</code>. So in a Vue instance you can call <code>MessageBox</code> like what we did in this page. The parameters are:</p><ul><li><code>$msgbox(options)</code></li><li><code>$alert(message, title, options)</code> or <code>$alert(message, options)</code></li><li><code>$confirm(message, title, options)</code> or <code>$confirm(message, options)</code></li><li><code>$prompt(message, title, options)</code> or <code>$prompt(message, options)</code></li></ul><h3 id="local-import"><a class="header-anchor" href="#local-import">¶</a> Local import</h3><p>If you prefer importing <code>MessageBox</code> on demand:</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { MessageBox } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>The corresponding methods are: <code>MessageBox</code>, <code>MessageBox.alert</code>, <code>MessageBox.confirm</code> and <code>MessageBox.prompt</code>. The parameters are the same as above.</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>title</td><td>title of the MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>content of the MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>whether <code>message</code> is treated as HTML string</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>message type, used for icon display</td><td>string</td><td>success / info / warning / error</td><td>—</td></tr><tr><td>iconClass</td><td>custom icon&#39;s class, overrides <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>custom class name for MessageBox</td><td>string</td><td>—</td><td>—</td></tr><tr><td>callback</td><td>MessageBox closing callback if you don&#39;t prefer Promise</td><td>function(action), where action can be &#39;confirm&#39;, &#39;cancel&#39; or &#39;close&#39;, and <code>instance</code> is the MessageBox instance. You can access to that instance&#39;s attributes and methods</td><td>—</td><td>—</td></tr><tr><td>showClose</td><td>whether to show close icon of MessageBox</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>beforeClose</td><td>callback before MessageBox closes, and it will prevent MessageBox from closing</td><td>function(action, instance, done), where <code>action</code> can be &#39;confirm&#39;, &#39;cancel&#39; or &#39;close&#39;; <code>instance</code> is the MessageBox instance, and you can access to that instance&#39;s attributes and methods; <code>done</code> is for closing the instance</td><td>—</td><td>—</td></tr><tr><td>distinguishCancelAndClose</td><td>whether to distinguish canceling and closing the MessageBox</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lockScroll</td><td>whether to lock body scroll when MessageBox prompts</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showCancelButton</td><td>whether to show a cancel button</td><td>boolean</td><td>—</td><td>false (true when called with confirm and prompt)</td></tr><tr><td>showConfirmButton</td><td>whether to show a confirm button</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>cancelButtonText</td><td>text content of cancel button</td><td>string</td><td>—</td><td>Cancel</td></tr><tr><td>confirmButtonText</td><td>text content of confirm button</td><td>string</td><td>—</td><td>OK</td></tr><tr><td>cancelButtonClass</td><td>custom class name of cancel button</td><td>string</td><td>—</td><td>—</td></tr><tr><td>confirmButtonClass</td><td>custom class name of confirm button</td><td>string</td><td>—</td><td>—</td></tr><tr><td>closeOnClickModal</td><td>whether MessageBox can be closed by clicking the mask</td><td>boolean</td><td>—</td><td>true (false when called with alert)</td></tr><tr><td>closeOnPressEscape</td><td>whether MessageBox can be closed by pressing the ESC</td><td>boolean</td><td>—</td><td>true (false when called with alert)</td></tr><tr><td>closeOnHashChange</td><td>whether to close MessageBox when hash changes</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showInput</td><td>whether to show an input</td><td>boolean</td><td>—</td><td>false (true when called with prompt)</td></tr><tr><td>inputPlaceholder</td><td>placeholder of input</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputType</td><td>type of input</td><td>string</td><td>—</td><td>text</td></tr><tr><td>inputValue</td><td>initial value of input</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputPattern</td><td>regexp for the input</td><td>regexp</td><td>—</td><td>—</td></tr><tr><td>inputValidator</td><td>validation function for the input. Should returns a boolean or string. If a string is returned, it will be assigned to inputErrorMessage</td><td>function</td><td>—</td><td>—</td></tr><tr><td>inputErrorMessage</td><td>error message when validation fails</td><td>string</td><td>—</td><td>Illegal input</td></tr><tr><td>center</td><td>whether to align the content in center</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>roundButton</td><td>whether to use round button</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',9);var $={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open the Message Box");const r={methods:{open(){this.$alert("This is a message","Title",{confirmButtonText:"OK",callback:e=>{this.$message({type:"info",message:"action: "+e})}})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open the Message Box");const r={methods:{open(){this.$confirm("This will permanently delete the file. Continue?","Warning",{confirmButtonText:"OK",cancelButtonText:"Cancel",type:"warning"}).then(()=>{this.$message({type:"success",message:"Delete completed"})}).catch(()=>{this.$message({type:"info",message:"Delete canceled"})})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open Message Box");const r={methods:{open(){this.$prompt("Please input your e-mail","Tip",{confirmButtonText:"OK",cancelButtonText:"Cancel",inputPattern:/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputErrorMessage:"Invalid Email"}).then(({value:e})=>{this.$message({type:"success",message:"Your email is:"+e})}).catch(()=>{this.$message({type:"info",message:"Input canceled"})})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open Message Box");const{h:r}=n,l={methods:{open(){this.$msgbox({title:"Message",message:r("p",null,[r("span",null,"Message can be "),r("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"OK",cancelButtonText:"Cancel",beforeClose:(e,t,o)=>{"confirm"===e?(t.confirmButtonLoading=!0,t.confirmButtonText="Loading...",setTimeout(()=>{o(),setTimeout(()=>{t.confirmButtonLoading=!1},300)},3e3)):o()}}).then(e=>{this.$message({type:"info",message:"action: "+e})})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open Message Box");const r={methods:{open(){this.$alert("<strong>This is <i>HTML</i> string</strong>","HTML String",{dangerouslyUseHTMLString:!0})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}(),"element-demo5":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open Message Box");const r={methods:{open(){this.$confirm("You have unsaved changes, save and proceed?","Confirm",{distinguishCancelAndClose:!0,confirmButtonText:"Save",cancelButtonText:"Discard Changes"}).then(()=>{this.$message({type:"info",message:"Changes saved. Proceeding to a new route."})}).catch(e=>{this.$message({type:"info",message:"cancel"===e?"Changes discarded. Proceeding to a new route.":"Stay in the current route"})})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}(),"element-demo6":function(){const{createTextVNode:e,resolveComponent:t,withCtx:o,createVNode:c,openBlock:a,createBlock:d}=n,s=e("Click to open Message Box");const r={methods:{open(){this.$confirm("This will permanently delete the file. Continue?","Warning",{confirmButtonText:"OK",cancelButtonText:"Cancel",type:"warning",center:!0}).then(()=>{this.$message({type:"success",message:"Delete completed"})}).catch(()=>{this.$message({type:"info",message:"Delete canceled"})})}}};return Object.assign({render:function(e,n){const r=t("el-button");return a(),d("div",null,[c(r,{type:"text",onClick:e.open},{default:o(()=>[s]),_:1},8,["onClick"])])}},r)}()},render:function(e,t,o,$,S,L){const P=Object(n.resolveComponent)("element-demo0"),I=Object(n.resolveComponent)("demo-block"),_=Object(n.resolveComponent)("element-demo1"),H=Object(n.resolveComponent)("element-demo2"),E=Object(n.resolveComponent)("element-demo3"),D=Object(n.resolveComponent)("element-demo4"),K=Object(n.resolveComponent)("element-demo5"),A=Object(n.resolveComponent)("element-demo6");return Object(n.openBlock)(),Object(n.createBlock)("section",c,[a,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(P)]),highlight:Object(n.withCtx)(()=>[s]),default:Object(n.withCtx)(()=>[d]),_:1}),r,l,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(_)]),highlight:Object(n.withCtx)(()=>[u]),default:Object(n.withCtx)(()=>[i]),_:1}),h,p,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(H)]),highlight:Object(n.withCtx)(()=>[b]),default:Object(n.withCtx)(()=>[m]),_:1}),g,O,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(E)]),highlight:Object(n.withCtx)(()=>[j]),default:Object(n.withCtx)(()=>[f]),_:1}),x,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(D)]),highlight:Object(n.withCtx)(()=>[N]),default:Object(n.withCtx)(()=>[V]),_:1}),w,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(K)]),highlight:Object(n.withCtx)(()=>[C]),default:Object(n.withCtx)(()=>[T]),_:1}),y,B,Object(n.createVNode)(I,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(A)]),highlight:Object(n.withCtx)(()=>[v]),default:Object(n.withCtx)(()=>[k]),_:1}),M])}};t.default=$}}]);