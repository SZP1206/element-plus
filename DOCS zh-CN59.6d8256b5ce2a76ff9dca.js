(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{486:function(e,t,d){"use strict";d.r(t);var n=d(0);const l={class:"content element-doc"},a=Object(n.createVNode)("h2",{id:"tree-shu-xing-kong-jian"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#tree-shu-xing-kong-jian"},"¶"),Object(n.createTextVNode)(" Tree 树形控件")],-1),o=Object(n.createVNode)("p",null,"用清晰的层级结构展示信息，可展开或折叠。",-1),r=Object(n.createVNode)("h3",{id:"ji-chu-yong-fa"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#ji-chu-yong-fa"},"¶"),Object(n.createTextVNode)(" 基础用法")],-1),c=Object(n.createVNode)("p",null,"基础的树形结构展示。",-1),i=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree :data=\"data\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: '一级 1',\n          children: [{\n            label: '二级 1-1',\n            children: [{\n              label: '三级 1-1-1'\n            }]\n          }]\n        }, {\n          label: '一级 2',\n          children: [{\n            label: '二级 2-1',\n            children: [{\n              label: '三级 2-1-1'\n            }]\n          }, {\n            label: '二级 2-2',\n            children: [{\n              label: '三级 2-2-1'\n            }]\n          }]\n        }, {\n          label: '一级 3',\n          children: [{\n            label: '二级 3-1',\n            children: [{\n              label: '三级 3-1-1'\n            }]\n          }, {\n            label: '二级 3-2',\n            children: [{\n              label: '三级 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),s=Object(n.createVNode)("h3",{id:"ke-xuan-ze"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#ke-xuan-ze"},"¶"),Object(n.createTextVNode)(" 可选择")],-1),h=Object(n.createVNode)("p",null,"适用于需要选择层级时使用。",-1),b=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"本例还展示了动态加载节点数据的方法。")],-1),u=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox\n  @check-change=\"handleCheckChange\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones'\n        },\n        count: 1\n      };\n    },\n    methods: {\n      handleCheckChange(data, checked, indeterminate) {\n        console.log(data, checked, indeterminate);\n      },\n      handleNodeClick(data) {\n        console.log(data);\n      },\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region1' }, { name: 'region2' }]);\n        }\n        if (node.level > 3) return resolve([]);\n\n        var hasChild;\n        if (node.data.name === 'region1') {\n          hasChild = true;\n        } else if (node.data.name === 'region2') {\n          hasChild = false;\n        } else {\n          hasChild = Math.random() > 0.5;\n        }\n\n        setTimeout(() => {\n          var data;\n          if (hasChild) {\n            data = [{\n              name: 'zone' + this.count++\n            }, {\n              name: 'zone' + this.count++\n            }];\n          } else {\n            data = [];\n          }\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),p=Object(n.createVNode)("h3",{id:"lan-jia-zai-zi-ding-yi-xie-zi-jie-dian"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#lan-jia-zai-zi-ding-yi-xie-zi-jie-dian"},"¶"),Object(n.createTextVNode)(" 懒加载自定义叶子节点")],-1),N=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"由于在点击节点时才进行该层数据的获取，默认情况下 Tree 无法预知某个节点是否为叶子节点，所以会为每个节点添加一个下拉按钮，如果节点没有下层数据，则点击后下拉按钮会消失。同时，你也可以提前告知 Tree 某个节点是否为叶子节点，从而避免在叶子节点前渲染下拉按钮。")],-1),f=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox>\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones',\n          isLeaf: 'leaf'\n        },\n      };\n    },\n    methods: {\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region' }]);\n        }\n        if (node.level > 1) return resolve([]);\n\n        setTimeout(() => {\n          const data = [{\n            name: 'leaf',\n            leaf: true\n          }, {\n            name: 'zone'\n          }];\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),k=Object(n.createVNode)("h3",{id:"mo-ren-zhan-kai-he-mo-ren-xuan-zhong"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#mo-ren-zhan-kai-he-mo-ren-xuan-zhong"},"¶"),Object(n.createTextVNode)(" 默认展开和默认选中")],-1),g=Object(n.createVNode)("p",null,"可将 Tree 的某些节点设置为默认展开或默认选中",-1),j=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("分别通过"),Object(n.createVNode)("code",null,"default-expanded-keys"),Object(n.createTextVNode)("和"),Object(n.createVNode)("code",null,"default-checked-keys"),Object(n.createTextVNode)("设置默认展开和默认选中的节点。需要注意的是，此时必须设置"),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)("，其值为节点数据中的一个字段名，该字段在整棵树中是唯一的。")])],-1),O=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  node-key=\"id\"\n  :default-expanded-keys=\"[2, 3]\"\n  :default-checked-keys=\"[5]\"\n  :props=\"defaultProps\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),m=Object(n.createVNode)("h3",{id:"jin-yong-zhuang-tai"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#jin-yong-zhuang-tai"},"¶"),Object(n.createTextVNode)(" 禁用状态")],-1),x=Object(n.createVNode)("p",null,"可将 Tree 的某些节点设置为禁用状态",-1),C=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("通过"),Object(n.createVNode)("code",null,"disabled"),Object(n.createTextVNode)("设置禁用状态。")])],-1),V=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  node-key=\"id\"\n  :default-expanded-keys=\"[2, 3]\"\n  :default-checked-keys=\"[5]\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 2',\n          children: [{\n            id: 3,\n            label: '二级 2-1',\n            children: [{\n              id: 4,\n              label: '三级 3-1-1'\n            }, {\n              id: 5,\n              label: '三级 3-1-2',\n              disabled: true\n            }]\n          }, {\n            id: 2,\n            label: '二级 2-2',\n            disabled: true,\n            children: [{\n              id: 6,\n              label: '三级 3-2-1'\n            }, {\n              id: 7,\n              label: '三级 3-2-2',\n              disabled: true\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),y=Object(n.createVNode)("h3",{id:"shu-jie-dian-de-xuan-ze"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#shu-jie-dian-de-xuan-ze"},"¶"),Object(n.createTextVNode)(" 树节点的选择")],-1),v=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("本例展示如何获取和设置选中节点。获取和设置各有两种方式：通过 node 或通过 key。如果需要通过 key 来获取或设置，则必须设置"),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)("。")])],-1),w=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  default-expand-all\n  node-key=\"id\"\n  ref=\"tree\"\n  highlight-current\n  :props=\"defaultProps\">\n</el-tree>\n\n<div class=\"buttons\">\n  <el-button @click=\"getCheckedNodes\">通过 node 获取</el-button>\n  <el-button @click=\"getCheckedKeys\">通过 key 获取</el-button>\n  <el-button @click=\"setCheckedNodes\">通过 node 设置</el-button>\n  <el-button @click=\"setCheckedKeys\">通过 key 设置</el-button>\n  <el-button @click=\"resetChecked\">清空</el-button>\n</div>\n\n<script>\n  export default {\n    methods: {\n      getCheckedNodes() {\n        console.log(this.$refs.tree.getCheckedNodes());\n      },\n      getCheckedKeys() {\n        console.log(this.$refs.tree.getCheckedKeys());\n      },\n      setCheckedNodes() {\n        this.$refs.tree.setCheckedNodes([{\n          id: 5,\n          label: '二级 2-1'\n        }, {\n          id: 9,\n          label: '三级 1-1-1'\n        }]);\n      },\n      setCheckedKeys() {\n        this.$refs.tree.setCheckedKeys([3]);\n      },\n      resetChecked() {\n        this.$refs.tree.setCheckedKeys([]);\n      }\n    },\n\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),T=Object(n.createVNode)("h3",{id:"zi-ding-yi-jie-dian-nei-rong"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#zi-ding-yi-jie-dian-nei-rong"},"¶"),Object(n.createTextVNode)(" 自定义节点内容")],-1),z=Object(n.createVNode)("p",null,"节点的内容支持自定义，可以在节点区添加按钮或图标等内容",-1),D=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("可以通过两种方法进行树节点内容的自定义："),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)("和 scoped slot。使用"),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)("指定渲染函数，该函数返回需要的节点区内容即可。渲染函数的用法请参考 Vue 文档。使用 scoped slot 会传入两个参数"),Object(n.createVNode)("code",null,"node"),Object(n.createTextVNode)("和"),Object(n.createVNode)("code",null,"data"),Object(n.createTextVNode)("，分别表示当前节点的 Node 对象和当前节点的数据。注意：由于 jsfiddle 不支持 JSX 语法，所以"),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)("示例在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。")])],-1),P=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},'<div class="custom-tree-container">\n  <div class="block">\n    <p>使用 render-content</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false"\n      :render-content="renderContent">\n    </el-tree>\n  </div>\n  <div class="block">\n    <p>使用 scoped slot</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false">\n      <template #default="{ node, data }">\n        <span class="custom-tree-node">\n          <span>{{ node.label }}</span>\n          <span>\n            <a\n              @click="append(data)">\n              Append\n            </a>\n            <a\n              @click="remove(node, data)">\n              Delete\n            </a>\n          </span>\n        </span>\n      </template>\n    </el-tree>\n  </div>\n</div>\n\n<script>\n  let id = 1000;\n\n  export default {\n    data() {\n      const data = [{\n        id: 1,\n        label: \'一级 1\',\n        children: [{\n          id: 4,\n          label: \'二级 1-1\',\n          children: [{\n            id: 9,\n            label: \'三级 1-1-1\'\n          }, {\n            id: 10,\n            label: \'三级 1-1-2\'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: \'一级 2\',\n        children: [{\n          id: 5,\n          label: \'二级 2-1\'\n        }, {\n          id: 6,\n          label: \'二级 2-2\'\n        }]\n      }, {\n        id: 3,\n        label: \'一级 3\',\n        children: [{\n          id: 7,\n          label: \'二级 3-1\'\n        }, {\n          id: 8,\n          label: \'二级 3-2\'\n        }]\n      }];\n      return {\n        data: JSON.parse(JSON.stringify(data)),\n        data: JSON.parse(JSON.stringify(data))\n      }\n    },\n\n    methods: {\n      append(data) {\n        const newChild = { id: id++, label: \'testtest\', children: [] };\n        if (!data.children) {\n          data.children = []\n        }\n        data.children.push(newChild);\n        this.data = [...this.data]\n      },\n\n      remove(node, data) {\n        const parent = node.parent;\n        const children = parent.data.children || parent.data;\n        const index = children.findIndex(d => d.id === data.id);\n        children.splice(index, 1);\n        this.data = [...this.data]\n      },\n\n      renderContent(h, { node, data, store }) {\n        return h("span", {\n          class: "custom-tree-node"\n        }, h("span", null, node.label), h("span", null, h("a", {\n          onClick: () => this.append(data)\n        }, "Append "), h("a", {\n          onClick: () => this.remove(node, data)\n        }, "Delete")));\n      }\n    }\n  };\n<\/script>\n\n<style>\n  .custom-tree-node {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n</style>\n')],-1),B=Object(n.createVNode)("h3",{id:"jie-dian-guo-lu"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#jie-dian-guo-lu"},"¶"),Object(n.createTextVNode)(" 节点过滤")],-1),K=Object(n.createVNode)("p",null,"通过关键字过滤树节点",-1),S=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("在需要对节点进行过滤时，调用 Tree 实例的"),Object(n.createVNode)("code",null,"filter"),Object(n.createTextVNode)("方法，参数为关键字。需要注意的是，此时需要设置"),Object(n.createVNode)("code",null,"filter-node-method"),Object(n.createTextVNode)("，值为过滤函数。")])],-1),_=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-input\n  placeholder=\"输入关键字进行过滤\"\n  v-model=\"filterText\">\n</el-input>\n\n<el-tree\n  class=\"filter-tree\"\n  :data=\"data\"\n  :props=\"defaultProps\"\n  default-expand-all\n  :filter-node-method=\"filterNode\"\n  ref=\"tree\">\n</el-tree>\n\n<script>\n  export default {\n    watch: {\n      filterText(val) {\n        this.$refs.tree.filter(val);\n      }\n    },\n\n    methods: {\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      }\n    },\n\n    data() {\n      return {\n        filterText: '',\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),$=Object(n.createVNode)("h3",{id:"shou-feng-qin-mo-shi"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#shou-feng-qin-mo-shi"},"¶"),Object(n.createTextVNode)(" 手风琴模式")],-1),J=Object(n.createVNode)("p",null,"对于同一级的节点，每次只能展开一个",-1),E=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  :props=\"defaultProps\"\n  accordion\n  @node-click=\"handleNodeClick\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: '一级 1',\n          children: [{\n            label: '二级 1-1',\n            children: [{\n              label: '三级 1-1-1'\n            }]\n          }]\n        }, {\n          label: '一级 2',\n          children: [{\n            label: '二级 2-1',\n            children: [{\n              label: '三级 2-1-1'\n            }]\n          }, {\n            label: '二级 2-2',\n            children: [{\n              label: '三级 2-2-1'\n            }]\n          }]\n        }, {\n          label: '一级 3',\n          children: [{\n            label: '二级 3-1',\n            children: [{\n              label: '三级 3-1-1'\n            }]\n          }, {\n            label: '二级 3-2',\n            children: [{\n              label: '三级 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),L=Object(n.createVNode)("h3",{id:"ke-tuo-zhuai-jie-dian"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#ke-tuo-zhuai-jie-dian"},"¶"),Object(n.createTextVNode)(" 可拖拽节点")],-1),A=Object(n.createVNode)("p",null,"通过 draggable 属性可让节点变为可拖拽。",-1),F=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  node-key=\"id\"\n  default-expand-all\n  @node-drag-start=\"handleDragStart\"\n  @node-drag-enter=\"handleDragEnter\"\n  @node-drag-leave=\"handleDragLeave\"\n  @node-drag-over=\"handleDragOver\"\n  @node-drag-end=\"handleDragEnd\"\n  @node-drop=\"handleDrop\"\n  draggable\n  :allow-drop=\"allowDrop\"\n  :allow-drag=\"allowDrag\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: '一级 1',\n          children: [{\n            id: 4,\n            label: '二级 1-1',\n            children: [{\n              id: 9,\n              label: '三级 1-1-1'\n            }, {\n              id: 10,\n              label: '三级 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: '一级 2',\n          children: [{\n            id: 5,\n            label: '二级 2-1'\n          }, {\n            id: 6,\n            label: '二级 2-2'\n          }]\n        }, {\n          id: 3,\n          label: '一级 3',\n          children: [{\n            id: 7,\n            label: '二级 3-1'\n          }, {\n            id: 8,\n            label: '二级 3-2',\n            children: [{\n             id: 11,\n              label: '三级 3-2-1'\n            }, {\n              id: 12,\n              label: '三级 3-2-2'\n            }, {\n              id: 13,\n              label: '三级 3-2-3'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === '二级 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n      }\n    }\n  };\n<\/script>\n")],-1),H=Object(n.createStaticVNode)('<h3 id="attributes"><a class="header-anchor" href="#attributes">¶</a> Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>展示数据</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>内容为空的时候展示的文本</td><td>String</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td><td>String</td><td>—</td><td>—</td></tr><tr><td>props</td><td>配置选项，具体看下表</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>是否在第一次展开某个树节点后才渲染其子节点</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>加载子树数据的方法，仅当 lazy 属性为true 时生效</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>树节点的内容区的渲染 Function</td><td>Function(h, { node, data, store }</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>是否高亮当前选中节点，默认值是 false。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>是否默认展开所有节点</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>是否在点击节点的时候选中节点，默认值为 false，即只有在点击复选框时才会选中节点。</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>展开子节点的时候是否自动展开父节点</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>默认展开的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>节点是否可被选择</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>默认勾选的节点的 key 的数组</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>当前选中的节点</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>是否每次只打开一个同级树节点展开</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>相邻级节点间的水平缩进，单位为像素</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>自定义树节点的图标</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>是否懒加载子节点，需与 load 方法结合使用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>是否开启拖拽节点功能</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>判断节点能否被拖拽</td><td>Function(node)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>拖拽时判定目标节点能否被放置。<code>type</code> 参数有三种情况：&#39;prev&#39;、&#39;inner&#39; 和 &#39;next&#39;，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</td><td>Function(draggingNode, dropNode, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="props"><a class="header-anchor" href="#props">¶</a> props</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>label</td><td>指定节点标签为节点对象的某个属性值</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>指定子树为节点对象的某个属性值</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>指定节点选择框是否禁用为节点对象的某个属性值</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="fang-fa"><a class="header-anchor" href="#fang-fa">¶</a> 方法</h3><p><code>Tree</code> 内部使用了 Node 类型的对象来包装用户传入的数据，用来保存目前节点的状态。 <code>Tree</code> 拥有如下方法：</p><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>filter</td><td>对树节点进行筛选操作</td><td>接收一个任意类型的参数，该参数会在 filter-node-method 中作为第一个参数</td></tr><tr><td>updateKeyChildren</td><td>通过 keys 设置节点子元素，使用此方法必须设置 node-key 属性</td><td>(key, data) 接收两个参数，1. 节点 key 2. 节点数据的数组</td></tr><tr><td>getCheckedNodes</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组</td><td>(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td></tr><tr><td>setCheckedNodes</td><td>设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td>(nodes) 接收勾选节点数据的数组</td></tr><tr><td>getCheckedKeys</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组</td><td>(leafOnly) 接收一个 boolean 类型的参数，若为 <code>true</code> 则仅返回被选中的叶子节点的 keys，默认值为 <code>false</code></td></tr><tr><td>setCheckedKeys</td><td>通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性</td><td>(keys, leafOnly) 接收两个参数，1. 勾选节点的 key 的数组 2. boolean 类型的参数，若为 <code>true</code> 则仅设置叶子节点的选中状态，默认值为 <code>false</code></td></tr><tr><td>setChecked</td><td>通过 key / data 设置某个节点的勾选状态，使用此方法必须设置 node-key 属性</td><td>(key/data, checked, deep) 接收三个参数，1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false</td></tr><tr><td>getHalfCheckedNodes</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点所组成的数组</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前半选中的节点的 key 所组成的数组</td><td>-</td></tr><tr><td>getCurrentKey</td><td>获取当前被选中节点的 key，使用此方法必须设置 node-key 属性，若没有节点被选中则返回 null</td><td>—</td></tr><tr><td>getCurrentNode</td><td>获取当前被选中节点的 data，若没有节点被选中则返回 null</td><td>—</td></tr><tr><td>setCurrentKey</td><td>通过 key 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td>(key) 待被选节点的 key，若为 null 则取消当前高亮的节点</td></tr><tr><td>setCurrentNode</td><td>通过 node 设置某个节点的当前选中状态，使用此方法必须设置 node-key 属性</td><td>(node) 待被选节点的 node</td></tr><tr><td>getNode</td><td>根据 data 或者 key 拿到 Tree 组件中的 node</td><td>(data) 要获得 node 的 key 或者 data</td></tr><tr><td>remove</td><td>删除 Tree 中的一个节点，使用此方法必须设置 node-key 属性</td><td>(data) 要删除的节点的 data 或者 node</td></tr><tr><td>append</td><td>为 Tree 中的一个节点追加一个子节点</td><td>(data, parentNode) 接收两个参数，1. 要追加的子节点的 data 2. 子节点的 parent 的 data、key 或者 node</td></tr><tr><td>insertBefore</td><td>为 Tree 的一个节点的前面增加一个节点</td><td>(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的后一个节点的 data、key 或者 node</td></tr><tr><td>insertAfter</td><td>为 Tree 的一个节点的后面增加一个节点</td><td>(data, refNode) 接收两个参数，1. 要增加的节点的 data 2. 要增加的节点的前一个节点的 data、key 或者 node</td></tr></tbody></table><h3 id="events"><a class="header-anchor" href="#events">¶</a> Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>node-click</td><td>节点被点击时的回调</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td>node-contextmenu</td><td>当某一节点被鼠标右键点击时会触发该事件</td><td>共四个参数，依次为：event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr><tr><td>check-change</td><td>节点选中状态发生变化时的回调</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点</td></tr><tr><td>check</td><td>当复选框被点击的时候触发</td><td>共两个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性</td></tr><tr><td>current-change</td><td>当前选中节点变化时触发的事件</td><td>共两个参数，依次为：当前节点的数据，当前节点的 Node 对象</td></tr><tr><td>node-expand</td><td>节点被展开时触发的事件</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td>node-collapse</td><td>节点被关闭时触发的事件</td><td>共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td>node-drag-start</td><td>节点开始拖拽时触发的事件</td><td>共两个参数，依次为：被拖拽节点对应的 Node、event</td></tr><tr><td>node-drag-enter</td><td>拖拽进入其他节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所进入节点对应的 Node、event</td></tr><tr><td>node-drag-leave</td><td>拖拽离开某个节点时触发的事件</td><td>共三个参数，依次为：被拖拽节点对应的 Node、所离开节点对应的 Node、event</td></tr><tr><td>node-drag-over</td><td>在拖拽节点时触发的事件（类似浏览器的 mouseover 事件）</td><td>共三个参数，依次为：被拖拽节点对应的 Node、当前进入节点对应的 Node、event</td></tr><tr><td>node-drag-end</td><td>拖拽结束时（可能未成功）触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点（可能为空）、被拖拽节点的放置位置（before、after、inner）、event</td></tr><tr><td>node-drop</td><td>拖拽成功完成时触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</td></tr></tbody></table><h3 id="scoped-slot"><a class="header-anchor" href="#scoped-slot">¶</a> Scoped Slot</h3><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>—</td><td>自定义树节点的内容，参数为 { node, data }</td></tr></tbody></table>',11);var q={name:"component-doc",components:{"element-demo0":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{data:n.data,props:n.defaultProps,"onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},a)}(),"element-demo1":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({props:{label:"name",children:"zones"},count:1}),methods:{handleCheckChange(e,t,d){console.log(e,t,d)},handleNodeClick(e){console.log(e)},loadNode(e,t){return 0===e.level?t([{name:"region1"},{name:"region2"}]):e.level>3?t([]):(d="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,void setTimeout(()=>{var e;e=d?[{name:"zone"+this.count++},{name:"zone"+this.count++}]:[],t(e)},500));var d}}};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":"","onCheck-change":n.handleCheckChange},null,8,["props","load","onCheck-change"])])}},a)}(),"element-demo2":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({props:{label:"name",children:"zones",isLeaf:"leaf"}}),methods:{loadNode:(e,t)=>0===e.level?t([{name:"region"}]):e.level>1?t([]):void setTimeout(()=>{t([{name:"leaf",leaf:!0},{name:"zone"}])},500)}};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":""},null,8,["props","load"])])}},a)}(),"element-demo3":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{data:n.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],props:n.defaultProps},null,8,["data","props"])])}},a)}(),"element-demo4":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({data:[{id:1,label:"一级 2",children:[{id:3,label:"二级 2-1",children:[{id:4,label:"三级 3-1-1"},{id:5,label:"三级 3-1-2",disabled:!0}]},{id:2,label:"二级 2-2",disabled:!0,children:[{id:6,label:"三级 3-2-1"},{id:7,label:"三级 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{data:n.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5]},null,8,["data"])])}},a)}(),"element-demo5":function(){const{resolveComponent:e,createVNode:t,createTextVNode:d,withCtx:l,openBlock:a,createBlock:o}=n,r={class:"buttons"},c=d("通过 node 获取"),i=d("通过 key 获取"),s=d("通过 node 设置"),h=d("通过 key 设置"),b=d("清空");const u={methods:{getCheckedNodes(){console.log(this.$refs.tree.getCheckedNodes())},getCheckedKeys(){console.log(this.$refs.tree.getCheckedKeys())},setCheckedNodes(){this.$refs.tree.setCheckedNodes([{id:5,label:"二级 2-1"},{id:9,label:"三级 1-1-1"}])},setCheckedKeys(){this.$refs.tree.setCheckedKeys([3])},resetChecked(){this.$refs.tree.setCheckedKeys([])}},data:()=>({data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(d,n){const u=e("el-tree"),p=e("el-button");return a(),o("div",null,[t(u,{data:d.data,"show-checkbox":"","default-expand-all":"","node-key":"id",ref:"tree","highlight-current":"",props:d.defaultProps},null,8,["data","props"]),t("div",r,[t(p,{onClick:d.getCheckedNodes},{default:l(()=>[c]),_:1},8,["onClick"]),t(p,{onClick:d.getCheckedKeys},{default:l(()=>[i]),_:1},8,["onClick"]),t(p,{onClick:d.setCheckedNodes},{default:l(()=>[s]),_:1},8,["onClick"]),t(p,{onClick:d.setCheckedKeys},{default:l(()=>[h]),_:1},8,["onClick"]),t(p,{onClick:d.resetChecked},{default:l(()=>[b]),_:1},8,["onClick"])])])}},u)}(),"element-demo6":function(){const{createVNode:e,resolveComponent:t,toDisplayString:d,withCtx:l,openBlock:a,createBlock:o}=n,r={class:"custom-tree-container"},c={class:"block"},i=e("p",null,"使用 render-content",-1),s={class:"block"},h=e("p",null,"使用 scoped slot",-1),b={class:"custom-tree-node"};let u=1e3;const p={data(){const e=[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}];return{data:JSON.parse(JSON.stringify(e)),data:JSON.parse(JSON.stringify(e))}},methods:{append(e){const t={id:u++,label:"testtest",children:[]};e.children||(e.children=[]),e.children.push(t),this.data=[...this.data]},remove(e,t){const d=e.parent,n=d.data.children||d.data,l=n.findIndex(e=>e.id===t.id);n.splice(l,1),this.data=[...this.data]},renderContent(e,{node:t,data:d,store:n}){return e("span",{class:"custom-tree-node"},e("span",null,t.label),e("span",null,e("a",{onClick:()=>this.append(d)},"Append "),e("a",{onClick:()=>this.remove(t,d)},"Delete")))}}};return Object.assign({render:function(n,u){const p=t("el-tree");return a(),o("div",null,[e("div",r,[e("div",c,[i,e(p,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1,"render-content":n.renderContent},null,8,["data","render-content"])]),e("div",s,[h,e(p,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1},{default:l(({node:t,data:l})=>[e("span",b,[e("span",null,d(t.label),1),e("span",null,[e("a",{onClick:e=>n.append(l)}," Append ",8,["onClick"]),e("a",{onClick:e=>n.remove(t,l)}," Delete ",8,["onClick"])])])]),_:1},8,["data"])])])])}},p)}(),"element-demo7":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={watch:{filterText(e){this.$refs.tree.filter(e)}},methods:{filterNode:(e,t)=>!e||-1!==t.label.indexOf(e)},data:()=>({filterText:"",data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,a){const o=e("el-input"),r=e("el-tree");return d(),l("div",null,[t(o,{placeholder:"输入关键字进行过滤",modelValue:n.filterText,"onUpdate:modelValue":a[1]||(a[1]=e=>n.filterText=e)},null,8,["modelValue"]),t(r,{class:"filter-tree",data:n.data,props:n.defaultProps,"default-expand-all":"","filter-node-method":n.filterNode,ref:"tree"},null,8,["data","props","filter-node-method"])])}},a)}(),"element-demo8":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({data:[{label:"一级 1",children:[{label:"二级 1-1",children:[{label:"三级 1-1-1"}]}]},{label:"一级 2",children:[{label:"二级 2-1",children:[{label:"三级 2-1-1"}]},{label:"二级 2-2",children:[{label:"三级 2-2-1"}]}]},{label:"一级 3",children:[{label:"二级 3-1",children:[{label:"三级 3-1-1"}]},{label:"二级 3-2",children:[{label:"三级 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{data:n.data,props:n.defaultProps,accordion:"","onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},a)}(),"element-demo9":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:l}=n;const a={data:()=>({data:[{id:1,label:"一级 1",children:[{id:4,label:"二级 1-1",children:[{id:9,label:"三级 1-1-1"},{id:10,label:"三级 1-1-2"}]}]},{id:2,label:"一级 2",children:[{id:5,label:"二级 2-1"},{id:6,label:"二级 2-2"}]},{id:3,label:"一级 3",children:[{id:7,label:"二级 3-1"},{id:8,label:"二级 3-2",children:[{id:11,label:"三级 3-2-1"},{id:12,label:"三级 3-2-2"},{id:13,label:"三级 3-2-3"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleDragStart(e,t){console.log("drag start",e)},handleDragEnter(e,t,d){console.log("tree drag enter: ",t.label)},handleDragLeave(e,t,d){console.log("tree drag leave: ",t.label)},handleDragOver(e,t,d){console.log("tree drag over: ",t.label)},handleDragEnd(e,t,d,n){console.log("tree drag end: ",t&&t.label,d)},handleDrop(e,t,d,n){console.log("tree drop: ",t.label,d)},allowDrop:(e,t,d)=>"二级 3-1"!==t.data.label||"inner"!==d,allowDrag:e=>-1===e.data.label.indexOf("三级 3-2-2")}};return Object.assign({render:function(n,a){const o=e("el-tree");return d(),l("div",null,[t(o,{data:n.data,"node-key":"id","default-expand-all":"","onNode-drag-start":n.handleDragStart,"onNode-drag-enter":n.handleDragEnter,"onNode-drag-leave":n.handleDragLeave,"onNode-drag-over":n.handleDragOver,"onNode-drag-end":n.handleDragEnd,"onNode-drop":n.handleDrop,draggable:"","allow-drop":n.allowDrop,"allow-drag":n.allowDrag},null,8,["data","onNode-drag-start","onNode-drag-enter","onNode-drag-leave","onNode-drag-over","onNode-drag-end","onNode-drop","allow-drop","allow-drag"])])}},a)}()},render:function(e,t,d,q,I,M){const U=Object(n.resolveComponent)("element-demo0"),X=Object(n.resolveComponent)("demo-block"),G=Object(n.resolveComponent)("element-demo1"),Q=Object(n.resolveComponent)("element-demo2"),R=Object(n.resolveComponent)("element-demo3"),W=Object(n.resolveComponent)("element-demo4"),Y=Object(n.resolveComponent)("element-demo5"),Z=Object(n.resolveComponent)("element-demo6"),ee=Object(n.resolveComponent)("element-demo7"),te=Object(n.resolveComponent)("element-demo8"),de=Object(n.resolveComponent)("element-demo9");return Object(n.openBlock)(),Object(n.createBlock)("section",l,[a,o,r,c,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(U)]),highlight:Object(n.withCtx)(()=>[i]),_:1}),s,h,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(G)]),highlight:Object(n.withCtx)(()=>[u]),default:Object(n.withCtx)(()=>[b]),_:1}),p,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Q)]),highlight:Object(n.withCtx)(()=>[f]),default:Object(n.withCtx)(()=>[N]),_:1}),k,g,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(R)]),highlight:Object(n.withCtx)(()=>[O]),default:Object(n.withCtx)(()=>[j]),_:1}),m,x,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(W)]),highlight:Object(n.withCtx)(()=>[V]),default:Object(n.withCtx)(()=>[C]),_:1}),y,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Y)]),highlight:Object(n.withCtx)(()=>[w]),default:Object(n.withCtx)(()=>[v]),_:1}),T,z,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Z)]),highlight:Object(n.withCtx)(()=>[P]),default:Object(n.withCtx)(()=>[D]),_:1}),B,K,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(ee)]),highlight:Object(n.withCtx)(()=>[_]),default:Object(n.withCtx)(()=>[S]),_:1}),$,J,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(te)]),highlight:Object(n.withCtx)(()=>[E]),_:1}),L,A,Object(n.createVNode)(X,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(de)]),highlight:Object(n.withCtx)(()=>[F]),_:1}),H])}};t.default=q}}]);