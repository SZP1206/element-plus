(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{544:function(e,t,d){"use strict";d.r(t);var n=d(0);const o={class:"content element-doc"},l=Object(n.createVNode)("h2",{id:"tree"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#tree"},"¶"),Object(n.createTextVNode)(" Tree")],-1),a=Object(n.createVNode)("p",null,"Display a set of data with hierarchies.",-1),r=Object(n.createVNode)("h3",{id:"basic-usage"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#basic-usage"},"¶"),Object(n.createTextVNode)(" Basic usage")],-1),c=Object(n.createVNode)("p",null,"Basic tree structure.",-1),i=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree :data=\"data\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),s=Object(n.createVNode)("h3",{id:"selectable"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#selectable"},"¶"),Object(n.createTextVNode)(" Selectable")],-1),h=Object(n.createVNode)("p",null,"Used for node selection.",-1),b=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"This example also shows how to load node data asynchronously.")],-1),p=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox\n  @check-change=\"handleCheckChange\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones'\n        },\n        count: 1\n      };\n    },\n    methods: {\n      handleCheckChange(data, checked, indeterminate) {\n        console.log(data, checked, indeterminate);\n      },\n      handleNodeClick(data) {\n        console.log(data);\n      },\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'Root1' }, { name: 'Root2' }]);\n        }\n        if (node.level > 3) return resolve([]);\n\n        var hasChild;\n        if (node.data.name === 'region1') {\n          hasChild = true;\n        } else if (node.data.name === 'region2') {\n          hasChild = false;\n        } else {\n          hasChild = Math.random() > 0.5;\n        }\n\n        setTimeout(() => {\n          var data;\n          if (hasChild) {\n            data = [{\n              name: 'zone' + this.count++\n            }, {\n              name: 'zone' + this.count++\n            }];\n          } else {\n            data = [];\n          }\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),u=Object(n.createVNode)("h3",{id:"custom-leaf-node-in-lazy-mode"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#custom-leaf-node-in-lazy-mode"},"¶"),Object(n.createTextVNode)(" Custom leaf node in lazy mode")],-1),g=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"A node's data is not fetched until it is clicked, so the Tree cannot predict whether a node is a leaf node. That's why a drop-down button is added to each node, and if it is a leaf node, the drop-down button will disappear when clicked. That being said, you can also tell the Tree in advance whether the node is a leaf node, avoiding the render of the drop-down button before a leaf node.")],-1),f=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox>\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones',\n          isLeaf: 'leaf'\n        },\n      };\n    },\n    methods: {\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region' }]);\n        }\n        if (node.level > 1) return resolve([]);\n\n        setTimeout(() => {\n          const data = [{\n            name: 'leaf',\n            leaf: true\n          }, {\n            name: 'zone'\n          }];\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),v=Object(n.createVNode)("h3",{id:"disabled-checkbox"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#disabled-checkbox"},"¶"),Object(n.createTextVNode)(" Disabled checkbox")],-1),k=Object(n.createVNode)("p",null,"The checkbox of a node can be set as disabled.",-1),w=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"In the example, 'disabled' property is declared in defaultProps, and some nodes are set as 'disabled:true'. The corresponding checkboxes are disabled and can't be clicked.")],-1),N=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  :props=\"defaultProps\"\n  show-checkbox>\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 3,\n            label: 'Level two 2-1',\n            children: [{\n              id: 4,\n              label: 'Level three 3-1-1'\n            }, {\n              id: 5,\n              label: 'Level three 3-1-2',\n              disabled: true\n            }]\n          }, {\n            id: 2,\n            label: 'Level two 2-2',\n            disabled: true,\n            children: [{\n              id: 6,\n              label: 'Level three 3-2-1'\n            }, {\n              id: 7,\n              label: 'Level three 3-2-2',\n              disabled: true\n            }]\n          }]\n        }],\n        defaultProps: {\n            children: 'children',\n            label: 'label',\n            disabled: 'disabled',\n        },\n      };\n    }\n  };\n<\/script>\n")],-1),y=Object(n.createVNode)("h3",{id:"default-expanded-and-default-checked"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#default-expanded-and-default-checked"},"¶"),Object(n.createTextVNode)(" Default expanded and default checked")],-1),m=Object(n.createVNode)("p",null,"Tree nodes can be initially expanded or checked",-1),j=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Use "),Object(n.createVNode)("code",null,"default-expanded-keys"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"default-checked-keys"),Object(n.createTextVNode)(" to set initially expanded and initially checked nodes respectively. Note that for them to work, "),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)(" is required. Its value is the name of a key in the data object, and the value of that key should be unique across the whole tree.")])],-1),O=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  node-key=\"id\"\n  :default-expanded-keys=\"[2, 3]\"\n  :default-checked-keys=\"[5]\"\n  :props=\"defaultProps\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),L=Object(n.createVNode)("h3",{id:"checking-tree-nodes"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#checking-tree-nodes"},"¶"),Object(n.createTextVNode)(" Checking tree nodes")],-1),x=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("This example shows how to get and set checked nodes. They both can be done in two approaches: node and key. If you are taking the key approach, "),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)(" is required.")])],-1),C=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  default-expand-all\n  node-key=\"id\"\n  ref=\"tree\"\n  highlight-current\n  :props=\"defaultProps\">\n</el-tree>\n\n<div class=\"buttons\">\n  <el-button @click=\"getCheckedNodes\">get by node</el-button>\n  <el-button @click=\"getCheckedKeys\">get by key</el-button>\n  <el-button @click=\"setCheckedNodes\">set by node</el-button>\n  <el-button @click=\"setCheckedKeys\">set by key</el-button>\n  <el-button @click=\"resetChecked\">reset</el-button>\n</div>\n\n<script>\n  export default {\n    methods: {\n      getCheckedNodes() {\n        console.log(this.$refs.tree.getCheckedNodes());\n      },\n      getCheckedKeys() {\n        console.log(this.$refs.tree.getCheckedKeys());\n      },\n      setCheckedNodes() {\n        this.$refs.tree.setCheckedNodes([{\n          id: 5,\n          label: 'Level two 2-1'\n        }, {\n          id: 9,\n          label: 'Level three 1-1-1'\n        }]);\n      },\n      setCheckedKeys() {\n        this.$refs.tree.setCheckedKeys([3]);\n      },\n      resetChecked() {\n        this.$refs.tree.setCheckedKeys([]);\n      }\n    },\n\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),V=Object(n.createVNode)("h3",{id:"custom-node-content"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#custom-node-content"},"¶"),Object(n.createTextVNode)(" Custom node content")],-1),T=Object(n.createVNode)("p",null,"The content of tree nodes can be customized, so you can add icons or buttons as you will",-1),D=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("There are two ways to customize template for tree nodes: "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" and scoped slot. Use "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" to assign a render function that returns the content of tree nodes. See Vue's documentation for a detailed introduction of render functions. If you prefer scoped slot, you'll have access to "),Object(n.createVNode)("code",null,"node"),Object(n.createTextVNode)(" and "),Object(n.createVNode)("code",null,"data"),Object(n.createTextVNode)(" in the scope, standing for the TreeNode object and node data of the current node respectively. Note that the "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" demo can't run in jsfiddle because it doesn't support JSX syntax. In a real project, "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" will work if relevant dependencies are correctly configured.")])],-1),P=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},'<div class="custom-tree-container">\n  <div class="block">\n    <p>Using render-content</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false"\n      :render-content="renderContent">\n    </el-tree>\n  </div>\n  <div class="block">\n    <p>Using scoped slot</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false">\n      <template #default="{ node, data }">\n        <span class="custom-tree-node">\n          <span>{{ node.label }}</span>\n          <span>\n            <a\n              @click="append(data)">\n              Append\n            </a>\n            <a\n              @click="remove(node, data)">\n              Delete\n            </a>\n          </span>\n        </span>\n      </template>\n    </el-tree>\n  </div>\n</div>\n\n<script>\n  let id = 1000;\n\n  export default {\n    data() {\n      const data = [{\n        id: 1,\n        label: \'Level one 1\',\n        children: [{\n          id: 4,\n          label: \'Level two 1-1\',\n          children: [{\n            id: 9,\n            label: \'Level three 1-1-1\'\n          }, {\n            id: 10,\n            label: \'Level three 1-1-2\'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: \'Level one 2\',\n        children: [{\n          id: 5,\n          label: \'Level two 2-1\'\n        }, {\n          id: 6,\n          label: \'Level two 2-2\'\n        }]\n      }, {\n        id: 3,\n        label: \'Level one 3\',\n        children: [{\n          id: 7,\n          label: \'Level two 3-1\'\n        }, {\n          id: 8,\n          label: \'Level two 3-2\'\n        }]\n      }];\n      return {\n        data: JSON.parse(JSON.stringify(data)),\n        data: JSON.parse(JSON.stringify(data))\n      }\n    },\n\n    methods: {\n      append(data) {\n        const newChild = { id: id++, label: \'testtest\', children: [] };\n        if (!data.children) {\n          data.children = [];\n        }\n        data.children.push(newChild);\n        this.data = [...this.data]\n      },\n\n      remove(node, data) {\n        const parent = node.parent;\n        const children = parent.data.children || parent.data;\n        const index = children.findIndex(d => d.id === data.id);\n        children.splice(index, 1);\n        this.data = [...this.data]\n      },\n\n      renderContent(h, { node, data, store }) {\n        return h("span", {\n          class: "custom-tree-node"\n        }, h("span", null, node.label), h("span", null, h("a", {\n          onClick: () => this.append(data)\n        }, "Append "), h("a", {\n          onClick: () => this.remove(node, data)\n        }, "Delete")));\n      }\n    }\n  };\n<\/script>\n\n<style>\n  .custom-tree-node {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n</style>\n')],-1),z=Object(n.createVNode)("h3",{id:"tree-node-filtering"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#tree-node-filtering"},"¶"),Object(n.createTextVNode)(" Tree node filtering")],-1),B=Object(n.createVNode)("p",null,"Tree nodes can be filtered",-1),K=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Invoke the "),Object(n.createVNode)("code",null,"filter"),Object(n.createTextVNode)(" method of the Tree instance to filter tree nodes. Its parameter is the filtering keyword. Note that for it to work, "),Object(n.createVNode)("code",null,"filter-node-method"),Object(n.createTextVNode)(" is required, and its value is the filtering method.")])],-1),I=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-input\n  placeholder=\"Filter keyword\"\n  v-model=\"filterText\">\n</el-input>\n\n<el-tree\n  class=\"filter-tree\"\n  :data=\"data\"\n  :props=\"defaultProps\"\n  default-expand-all\n  :filter-node-method=\"filterNode\"\n  ref=\"tree\">\n</el-tree>\n\n<script>\n  export default {\n    watch: {\n      filterText(val) {\n        this.$refs.tree.filter(val);\n      }\n    },\n\n    methods: {\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      }\n    },\n\n    data() {\n      return {\n        filterText: '',\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),S=Object(n.createVNode)("h3",{id:"accordion"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#accordion"},"¶"),Object(n.createTextVNode)(" Accordion")],-1),A=Object(n.createVNode)("p",null,"Only one node among the same level can be expanded at one time.",-1),_=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  :props=\"defaultProps\"\n  accordion\n  @node-click=\"handleNodeClick\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),$=Object(n.createVNode)("h3",{id:"draggable"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#draggable"},"¶"),Object(n.createTextVNode)(" Draggable")],-1),J=Object(n.createVNode)("p",null,[Object(n.createTextVNode)("You can drag and drop Tree nodes by adding a "),Object(n.createVNode)("code",null,"draggable"),Object(n.createTextVNode)(" attribute.")],-1),E=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  node-key=\"id\"\n  default-expand-all\n  @node-drag-start=\"handleDragStart\"\n  @node-drag-enter=\"handleDragEnter\"\n  @node-drag-leave=\"handleDragLeave\"\n  @node-drag-over=\"handleDragOver\"\n  @node-drag-end=\"handleDragEnd\"\n  @node-drop=\"handleDrop\"\n  draggable\n  :allow-drop=\"allowDrop\"\n  :allow-drag=\"allowDrag\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === 'Level two 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('Level three 3-1-1') === -1;\n      }\n    }\n  };\n<\/script>\n")],-1),U=Object(n.createStaticVNode)('<h3 id="attributes"><a class="header-anchor" href="#attributes">¶</a> Attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>data</td><td>tree data</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>text displayed when data is void</td><td>string</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>unique identity key name for nodes, its value should be unique across the whole tree</td><td>string</td><td>—</td><td>—</td></tr><tr><td>props</td><td>configuration options, see the following table</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>whether to render child nodes only after a parent node is expanded for the first time</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>method for loading subtree data, only works when <code>lazy</code> is true</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>render function for tree node</td><td>Function(h, { node, data, store }</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>whether current node is highlighted</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>whether to expand all nodes by default</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>whether to expand or collapse node when clicking on the node, if false, then expand or collapse node only when clicking on the arrow icon.</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>whether to check or uncheck node when clicking on the node, if false, the node can only be checked or unchecked by clicking on the checkbox.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>whether to expand father node when a child node is expanded</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>array of keys of initially expanded nodes</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>whether node is selectable</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>whether checked state of a node not affects its father and child nodes when <code>show-checkbox</code> is <code>true</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>array of keys of initially checked nodes</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>key of initially selected node</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>this function will be executed on each node when use filter method. if return <code>false</code>, tree node will be hidden.</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>whether only one node among the same level can be expanded at one time</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>horizontal indentation of nodes in adjacent levels in pixels</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>custome tree node icon</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>whether to lazy load leaf node, used with <code>load</code> attribute</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>whether enable tree nodes drag and drop</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>this function will be executed before dragging a node. If <code>false</code> is returned, the node can not be dragged</td><td>Function(node)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>this function will be executed before the dragging node is dropped. If <code>false</code> is returned, the dragging node can not be dropped at the target node. <code>type</code> has three possible values: &#39;prev&#39; (inserting the dragging node before the target node), &#39;inner&#39; (inserting the dragging node to the target node) and &#39;next&#39; (inserting the dragging node after the target node)</td><td>Function(draggingNode, dropNode, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="props"><a class="header-anchor" href="#props">¶</a> props</h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>label</td><td>specify which key of node object is used as the node&#39;s label</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>specify which node object is used as the node&#39;s subtree</td><td>string</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>specify which key of node object represents if node&#39;s checkbox is disabled</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>specify whether the node is a leaf node, only works when lazy load is enabled</td><td>boolean, function(data, node)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="method"><a class="header-anchor" href="#method">¶</a> Method</h3><p><code>Tree</code> has the following method, which returns the currently selected array of nodes.</p><table><thead><tr><th>Method</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>filter</td><td>filter all tree nodes, filtered nodes will be hidden</td><td>Accept a parameter which will be used as first parameter for filter-node-method</td></tr><tr><td>updateKeyChildren</td><td>set new data to node, only works when <code>node-key</code> is assigned</td><td>(key, data) Accept two parameters: 1. key of node 2. new data</td></tr><tr><td>getCheckedNodes</td><td>If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of nodes</td><td>(leafOnly, includeHalfChecked) Accept two boolean type parameters: 1. default value is <code>false</code>. If the parameter is <code>true</code>, it only returns the currently selected array of sub-nodes. 2. default value is <code>false</code>. If the parameter is <code>true</code>, the return value contains halfchecked nodes</td></tr><tr><td>setCheckedNodes</td><td>set certain nodes to be checked, only works when <code>node-key</code> is assigned</td><td>an array of nodes to be checked</td></tr><tr><td>getCheckedKeys</td><td>If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently selected array of node&#39;s keys</td><td>(leafOnly) Accept a boolean type parameter whose default value is <code>false</code>. If the parameter is <code>true</code>, it only returns the currently selected array of sub-nodes.</td></tr><tr><td>setCheckedKeys</td><td>set certain nodes to be checked, only works when <code>node-key</code> is assigned</td><td>(keys, leafOnly) Accept two parameters: 1. an array of node&#39;s keys to be checked 2. a boolean type parameter whose default value is <code>false</code>. If the parameter is <code>true</code>, it only returns the currently selected array of sub-nodes.</td></tr><tr><td>setChecked</td><td>set node to be checked or not, only works when <code>node-key</code> is assigned</td><td>(key/data, checked, deep) Accept three parameters: 1. node&#39;s key or data to be checked 2. a boolean typed parameter indicating checked or not. 3. a boolean typed parameter indicating deep or not.</td></tr><tr><td>getHalfCheckedNodes</td><td>If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of nodes</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>If the node can be selected (<code>show-checkbox</code> is <code>true</code>), it returns the currently half selected array of node&#39;s keys</td><td>-</td></tr><tr><td>getCurrentKey</td><td>return the highlight node&#39;s key (null if no node is highlighted)</td><td>—</td></tr><tr><td>getCurrentNode</td><td>return the highlight node&#39;s data (null if no node is highlighted)</td><td>—</td></tr><tr><td>setCurrentKey</td><td>set highlighted node by key, only works when <code>node-key</code> is assigned</td><td>(key) the node&#39;s key to be highlighted. If <code>null</code>, cancel the currently highlighted node</td></tr><tr><td>setCurrentNode</td><td>set highlighted node, only works when <code>node-key</code> is assigned</td><td>(node) the node to be highlighted</td></tr><tr><td>getNode</td><td>get node by data or key</td><td>(data) the node&#39;s data or key</td></tr><tr><td>remove</td><td>remove a node, only works when node-key is assigned</td><td>(data) the node&#39;s data or node to be deleted</td></tr><tr><td>append</td><td>append a child node to a given node in the tree</td><td>(data, parentNode) 1. child node&#39;s data to be appended 2. parent node&#39;s data, key or node</td></tr><tr><td>insertBefore</td><td>insert a node before a given node in the tree</td><td>(data, refNode) 1. node&#39;s data to be inserted 2. reference node&#39;s data, key or node</td></tr><tr><td>insertAfter</td><td>insert a node after a given node in the tree</td><td>(data, refNode) 1. node&#39;s data to be inserted 2. reference node&#39;s data, key or node</td></tr></tbody></table><h3 id="events"><a class="header-anchor" href="#events">¶</a> Events</h3><table><thead><tr><th>Event Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>node-click</td><td>triggers when a node is clicked</td><td>three parameters: node object corresponding to the node clicked, <code>node</code> property of TreeNode, TreeNode itself</td></tr><tr><td>node-contextmenu</td><td>triggers when a node is clicked by right button</td><td>four parameters: event, node object corresponding to the node clicked, <code>node</code> property of TreeNode, TreeNode itself</td></tr><tr><td>check-change</td><td>triggers when the selected state of the node changes</td><td>three parameters: node object corresponding to the node whose selected state is changed, whether the node is selected, whether node&#39;s subtree has selected nodes</td></tr><tr><td>check</td><td>triggers after clicking the checkbox of a node</td><td>two parameters: node object corresponding to the node that is checked / unchecked, tree checked status object which has four props: checkedNodes, checkedKeys, halfCheckedNodes, halfCheckedKeys</td></tr><tr><td>current-change</td><td>triggers when current node changes</td><td>two parameters: node object corresponding to the current node, <code>node</code> property of TreeNode</td></tr><tr><td>node-expand</td><td>triggers when current node open</td><td>three parameters: node object corresponding to the node opened, <code>node</code> property of TreeNode, TreeNode itself</td></tr><tr><td>node-collapse</td><td>triggers when current node close</td><td>three parameters: node object corresponding to the node closed, <code>node</code> property of TreeNode, TreeNode itself</td></tr><tr><td>node-drag-start</td><td>triggers when dragging starts</td><td>two parameters: node object corresponding to the dragging node, event.</td></tr><tr><td>node-drag-enter</td><td>triggers when the dragging node enters another node</td><td>three parameters: node object corresponding to the dragging node, node object corresponding to the entering node, event.</td></tr><tr><td>node-drag-leave</td><td>triggers when the dragging node leaves a node</td><td>three parameters: node object corresponding to the dragging node, node object corresponding to the leaving node, event.</td></tr><tr><td>node-drag-over</td><td>triggers when dragging over a node (like mouseover event)</td><td>three parameters: node object corresponding to the dragging node, node object corresponding to the dragging over node, event.</td></tr><tr><td>node-drag-end</td><td>triggers when dragging ends</td><td>four parameters: node object corresponding to the dragging node, node object corresponding to the dragging end node (may be <code>undefined</code>), node drop type (before / after / inner), event.</td></tr><tr><td>node-drop</td><td>triggers after the dragging node is dropped</td><td>four parameters: node object corresponding to the dragging node, node object corresponding to the dropped node, node drop type (before / after / inner), event.</td></tr></tbody></table><h3 id="scoped-slot"><a class="header-anchor" href="#scoped-slot">¶</a> Scoped Slot</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>Custom content for tree nodes. The scope parameter is { node, data }</td></tr></tbody></table>',11);var q={name:"component-doc",components:{"element-demo0":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,"onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},l)}(),"element-demo1":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({props:{label:"name",children:"zones"},count:1}),methods:{handleCheckChange(e,t,d){console.log(e,t,d)},handleNodeClick(e){console.log(e)},loadNode(e,t){return 0===e.level?t([{name:"Root1"},{name:"Root2"}]):e.level>3?t([]):(d="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,void setTimeout(()=>{var e;e=d?[{name:"zone"+this.count++},{name:"zone"+this.count++}]:[],t(e)},500));var d}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":"","onCheck-change":n.handleCheckChange},null,8,["props","load","onCheck-change"])])}},l)}(),"element-demo2":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({props:{label:"name",children:"zones",isLeaf:"leaf"}}),methods:{loadNode:(e,t)=>0===e.level?t([{name:"region"}]):e.level>1?t([]):void setTimeout(()=>{t([{name:"leaf",leaf:!0},{name:"zone"}])},500)}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":""},null,8,["props","load"])])}},l)}(),"element-demo3":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{id:1,label:"Level one 1",children:[{id:3,label:"Level two 2-1",children:[{id:4,label:"Level three 3-1-1"},{id:5,label:"Level three 3-1-2",disabled:!0}]},{id:2,label:"Level two 2-2",disabled:!0,children:[{id:6,label:"Level three 3-2-1"},{id:7,label:"Level three 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label",disabled:"disabled"}})};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,"show-checkbox":""},null,8,["data","props"])])}},l)}(),"element-demo4":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],props:n.defaultProps},null,8,["data","props"])])}},l)}(),"element-demo5":function(){const{resolveComponent:e,createVNode:t,createTextVNode:d,withCtx:o,openBlock:l,createBlock:a}=n,r={class:"buttons"},c=d("get by node"),i=d("get by key"),s=d("set by node"),h=d("set by key"),b=d("reset");const p={methods:{getCheckedNodes(){console.log(this.$refs.tree.getCheckedNodes())},getCheckedKeys(){console.log(this.$refs.tree.getCheckedKeys())},setCheckedNodes(){this.$refs.tree.setCheckedNodes([{id:5,label:"Level two 2-1"},{id:9,label:"Level three 1-1-1"}])},setCheckedKeys(){this.$refs.tree.setCheckedKeys([3])},resetChecked(){this.$refs.tree.setCheckedKeys([])}},data:()=>({data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(d,n){const p=e("el-tree"),u=e("el-button");return l(),a("div",null,[t(p,{data:d.data,"show-checkbox":"","default-expand-all":"","node-key":"id",ref:"tree","highlight-current":"",props:d.defaultProps},null,8,["data","props"]),t("div",r,[t(u,{onClick:d.getCheckedNodes},{default:o(()=>[c]),_:1},8,["onClick"]),t(u,{onClick:d.getCheckedKeys},{default:o(()=>[i]),_:1},8,["onClick"]),t(u,{onClick:d.setCheckedNodes},{default:o(()=>[s]),_:1},8,["onClick"]),t(u,{onClick:d.setCheckedKeys},{default:o(()=>[h]),_:1},8,["onClick"]),t(u,{onClick:d.resetChecked},{default:o(()=>[b]),_:1},8,["onClick"])])])}},p)}(),"element-demo6":function(){const{createVNode:e,resolveComponent:t,toDisplayString:d,withCtx:o,openBlock:l,createBlock:a}=n,r={class:"custom-tree-container"},c={class:"block"},i=e("p",null,"Using render-content",-1),s={class:"block"},h=e("p",null,"Using scoped slot",-1),b={class:"custom-tree-node"};let p=1e3;const u={data(){const e=[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}];return{data:JSON.parse(JSON.stringify(e)),data:JSON.parse(JSON.stringify(e))}},methods:{append(e){const t={id:p++,label:"testtest",children:[]};e.children||(e.children=[]),e.children.push(t),this.data=[...this.data]},remove(e,t){const d=e.parent,n=d.data.children||d.data,o=n.findIndex(e=>e.id===t.id);n.splice(o,1),this.data=[...this.data]},renderContent(e,{node:t,data:d,store:n}){return e("span",{class:"custom-tree-node"},e("span",null,t.label),e("span",null,e("a",{onClick:()=>this.append(d)},"Append "),e("a",{onClick:()=>this.remove(t,d)},"Delete")))}}};return Object.assign({render:function(n,p){const u=t("el-tree");return l(),a("div",null,[e("div",r,[e("div",c,[i,e(u,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1,"render-content":n.renderContent},null,8,["data","render-content"])]),e("div",s,[h,e(u,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1},{default:o(({node:t,data:o})=>[e("span",b,[e("span",null,d(t.label),1),e("span",null,[e("a",{onClick:e=>n.append(o)}," Append ",8,["onClick"]),e("a",{onClick:e=>n.remove(t,o)}," Delete ",8,["onClick"])])])]),_:1},8,["data"])])])])}},u)}(),"element-demo7":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={watch:{filterText(e){this.$refs.tree.filter(e)}},methods:{filterNode:(e,t)=>!e||-1!==t.label.indexOf(e)},data:()=>({filterText:"",data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,l){const a=e("el-input"),r=e("el-tree");return d(),o("div",null,[t(a,{placeholder:"Filter keyword",modelValue:n.filterText,"onUpdate:modelValue":l[1]||(l[1]=e=>n.filterText=e)},null,8,["modelValue"]),t(r,{class:"filter-tree",data:n.data,props:n.defaultProps,"default-expand-all":"","filter-node-method":n.filterNode,ref:"tree"},null,8,["data","props","filter-node-method"])])}},l)}(),"element-demo8":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,accordion:"","onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},l)}(),"element-demo9":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleDragStart(e,t){console.log("drag start",e)},handleDragEnter(e,t,d){console.log("tree drag enter: ",t.label)},handleDragLeave(e,t,d){console.log("tree drag leave: ",t.label)},handleDragOver(e,t,d){console.log("tree drag over: ",t.label)},handleDragEnd(e,t,d,n){console.log("tree drag end: ",t&&t.label,d)},handleDrop(e,t,d,n){console.log("tree drop: ",t.label,d)},allowDrop:(e,t,d)=>"Level two 3-1"!==t.data.label||"inner"!==d,allowDrag:e=>-1===e.data.label.indexOf("Level three 3-1-1")}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,"node-key":"id","default-expand-all":"","onNode-drag-start":n.handleDragStart,"onNode-drag-enter":n.handleDragEnter,"onNode-drag-leave":n.handleDragLeave,"onNode-drag-over":n.handleDragOver,"onNode-drag-end":n.handleDragEnd,"onNode-drop":n.handleDrop,draggable:"","allow-drop":n.allowDrop,"allow-drag":n.allowDrag},null,8,["data","onNode-drag-start","onNode-drag-enter","onNode-drag-leave","onNode-drag-over","onNode-drag-end","onNode-drop","allow-drop","allow-drag"])])}},l)}()},render:function(e,t,d,q,F,M){const R=Object(n.resolveComponent)("element-demo0"),H=Object(n.resolveComponent)("demo-block"),X=Object(n.resolveComponent)("element-demo1"),Y=Object(n.resolveComponent)("element-demo2"),G=Object(n.resolveComponent)("element-demo3"),Q=Object(n.resolveComponent)("element-demo4"),W=Object(n.resolveComponent)("element-demo5"),Z=Object(n.resolveComponent)("element-demo6"),ee=Object(n.resolveComponent)("element-demo7"),te=Object(n.resolveComponent)("element-demo8"),de=Object(n.resolveComponent)("element-demo9");return Object(n.openBlock)(),Object(n.createBlock)("section",o,[l,a,r,c,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(R)]),highlight:Object(n.withCtx)(()=>[i]),_:1}),s,h,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(X)]),highlight:Object(n.withCtx)(()=>[p]),default:Object(n.withCtx)(()=>[b]),_:1}),u,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Y)]),highlight:Object(n.withCtx)(()=>[f]),default:Object(n.withCtx)(()=>[g]),_:1}),v,k,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(G)]),highlight:Object(n.withCtx)(()=>[N]),default:Object(n.withCtx)(()=>[w]),_:1}),y,m,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Q)]),highlight:Object(n.withCtx)(()=>[O]),default:Object(n.withCtx)(()=>[j]),_:1}),L,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(W)]),highlight:Object(n.withCtx)(()=>[C]),default:Object(n.withCtx)(()=>[x]),_:1}),V,T,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Z)]),highlight:Object(n.withCtx)(()=>[P]),default:Object(n.withCtx)(()=>[D]),_:1}),z,B,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(ee)]),highlight:Object(n.withCtx)(()=>[I]),default:Object(n.withCtx)(()=>[K]),_:1}),S,A,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(te)]),highlight:Object(n.withCtx)(()=>[_]),_:1}),$,J,Object(n.createVNode)(H,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(de)]),highlight:Object(n.withCtx)(()=>[E]),_:1}),U])}};t.default=q}}]);