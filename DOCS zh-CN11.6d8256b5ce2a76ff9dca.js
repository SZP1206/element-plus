(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{442:function(e,t,c){"use strict";c.r(t);var d=c(0);const o={class:"content element-doc"},l=Object(d.createVNode)("h2",{id:"checkbox-duo-xuan-kuang"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#checkbox-duo-xuan-kuang"},"¶"),Object(d.createTextVNode)(" Checkbox 多选框")],-1),n=Object(d.createVNode)("p",null,"一组备选项中进行多选",-1),a=Object(d.createVNode)("h3",{id:"ji-chu-yong-fa"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#ji-chu-yong-fa"},"¶"),Object(d.createTextVNode)(" 基础用法")],-1),r=Object(d.createVNode)("p",null,"单独使用可以表示两种状态之间的切换，写在标签中的内容为 checkbox 按钮后的介绍。",-1),b=Object(d.createVNode)("div",null,[Object(d.createVNode)("p",null,[Object(d.createTextVNode)("在"),Object(d.createVNode)("code",null,"el-checkbox"),Object(d.createTextVNode)("元素中定义"),Object(d.createVNode)("code",null,"v-model"),Object(d.createTextVNode)("绑定变量，单一的"),Object(d.createVNode)("code",null,"checkbox"),Object(d.createTextVNode)("中，默认绑定变量的值会是"),Object(d.createVNode)("code",null,"Boolean"),Object(d.createTextVNode)("，选中为"),Object(d.createVNode)("code",null,"true"),Object(d.createTextVNode)("。")])],-1),h=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  \x3c!-- `checked` 为 true 或 false --\x3e\n  <el-checkbox v-model="checked">备选项</el-checkbox>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        checked: true\n      };\n    }\n  };\n<\/script>\n')],-1),i=Object(d.createVNode)("h3",{id:"jin-yong-zhuang-tai"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#jin-yong-zhuang-tai"},"¶"),Object(d.createTextVNode)(" 禁用状态")],-1),u=Object(d.createVNode)("p",null,"多选框不可用状态。",-1),s=Object(d.createVNode)("div",null,[Object(d.createVNode)("p",null,[Object(d.createTextVNode)("设置"),Object(d.createVNode)("code",null,"disabled"),Object(d.createTextVNode)("属性即可。")])],-1),k=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  <el-checkbox v-model="checked1" disabled>备选项1</el-checkbox>\n  <el-checkbox v-model="checked2" disabled>备选项</el-checkbox>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        checked1: false,\n        checked2: true\n      };\n    }\n  };\n<\/script>\n')],-1),x=Object(d.createVNode)("h3",{id:"duo-xuan-kuang-zu"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#duo-xuan-kuang-zu"},"¶"),Object(d.createTextVNode)(" 多选框组")],-1),m=Object(d.createVNode)("p",null,"适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。",-1),p=Object(d.createVNode)("div",null,[Object(d.createVNode)("p",null,[Object(d.createVNode)("code",null,"checkbox-group"),Object(d.createTextVNode)("元素能把多个 checkbox 管理为一组，只需要在 Group 中使用"),Object(d.createVNode)("code",null,"v-model"),Object(d.createTextVNode)("绑定"),Object(d.createVNode)("code",null,"Array"),Object(d.createTextVNode)("类型的变量即可。 "),Object(d.createVNode)("code",null,"el-checkbox"),Object(d.createTextVNode)(" 的 "),Object(d.createVNode)("code",null,"label"),Object(d.createTextVNode)("属性是该 checkbox 对应的值，若该标签中无内容，则该属性也充当 checkbox 按钮后的介绍。"),Object(d.createVNode)("code",null,"label"),Object(d.createTextVNode)("与数组中的元素值相对应，如果存在指定的值则为选中状态，否则为不选中。")])],-1),V=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  <el-checkbox-group v-model="checkList">\n    <el-checkbox label="复选框 A"></el-checkbox>\n    <el-checkbox label="复选框 B"></el-checkbox>\n    <el-checkbox label="复选框 C"></el-checkbox>\n    <el-checkbox label="禁用" disabled></el-checkbox>\n    <el-checkbox label="选中且禁用" disabled></el-checkbox>\n  </el-checkbox-group>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        checkList: [\'选中且禁用\',\'复选框 A\']\n      };\n    }\n  };\n<\/script>\n')],-1),O=Object(d.createVNode)("h3",{id:"indeterminate-zhuang-tai"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#indeterminate-zhuang-tai"},"¶"),Object(d.createTextVNode)(" indeterminate 状态")],-1),j=Object(d.createVNode)("p",null,[Object(d.createVNode)("code",null,"indeterminate"),Object(d.createTextVNode)(" 属性用以表示 checkbox 的不确定状态，一般用于实现全选的效果")],-1),g=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">全选</el-checkbox>\n  <div style="margin: 15px 0;"></div>\n  <el-checkbox-group v-model="checkedCities" @change="handleCheckedCitiesChange">\n    <el-checkbox v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox>\n  </el-checkbox-group>\n</template>\n<script>\n  const cityOptions = [\'上海\', \'北京\', \'广州\', \'深圳\'];\n  export default {\n    data() {\n      return {\n        checkAll: false,\n        checkedCities: [\'上海\', \'北京\'],\n        cities: cityOptions,\n        isIndeterminate: true\n      };\n    },\n    methods: {\n      handleCheckAllChange(val) {\n        this.checkedCities = val ? cityOptions : [];\n        this.isIndeterminate = false;\n      },\n      handleCheckedCitiesChange(value) {\n        let checkedCount = value.length;\n        this.checkAll = checkedCount === this.cities.length;\n        this.isIndeterminate = checkedCount > 0 && checkedCount < this.cities.length;\n      }\n    }\n  };\n<\/script>\n')],-1),N=Object(d.createVNode)("h3",{id:"ke-xuan-xiang-mu-shu-liang-de-xian-zhi"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#ke-xuan-xiang-mu-shu-liang-de-xian-zhi"},"¶"),Object(d.createTextVNode)(" 可选项目数量的限制")],-1),v=Object(d.createVNode)("p",null,[Object(d.createTextVNode)("使用 "),Object(d.createVNode)("code",null,"min"),Object(d.createTextVNode)(" 和 "),Object(d.createVNode)("code",null,"max"),Object(d.createTextVNode)(" 属性能够限制可以被勾选的项目的数量。")],-1),C=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},"<template>\n  <el-checkbox-group\n    v-model=\"checkedCities\"\n    :min=\"1\"\n    :max=\"2\">\n    <el-checkbox v-for=\"city in cities\" :label=\"city\" :key=\"city\">{{city}}</el-checkbox>\n  </el-checkbox-group>\n</template>\n<script>\n  const cityOptions = ['上海', '北京', '广州', '深圳'];\n  export default {\n    data() {\n      return {\n        checkedCities: ['上海', '北京'],\n        cities: cityOptions\n      };\n    }\n  };\n<\/script>\n")],-1),f=Object(d.createVNode)("h3",{id:"an-niu-yang-shi"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#an-niu-yang-shi"},"¶"),Object(d.createTextVNode)(" 按钮样式")],-1),y=Object(d.createVNode)("p",null,"按钮样式的多选组合。",-1),T=Object(d.createVNode)("div",null,[Object(d.createVNode)("p",null,[Object(d.createTextVNode)("只需要把"),Object(d.createVNode)("code",null,"el-checkbox"),Object(d.createTextVNode)("元素替换为"),Object(d.createVNode)("code",null,"el-checkbox-button"),Object(d.createTextVNode)("元素即可。此外，Element Plus 还提供了"),Object(d.createVNode)("code",null,"size"),Object(d.createTextVNode)("属性。")])],-1),w=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  <div>\n    <el-checkbox-group v-model="checkboxGroup1">\n      <el-checkbox-button v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox-button>\n    </el-checkbox-group>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group v-model="checkboxGroup2" size="medium">\n      <el-checkbox-button v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox-button>\n    </el-checkbox-group>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group v-model="checkboxGroup3" size="small">\n      <el-checkbox-button v-for="city in cities" :label="city" :disabled="city === \'北京\'" :key="city">{{city}}</el-checkbox-button>\n    </el-checkbox-group>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group v-model="checkboxGroup4" size="mini" disabled>\n      <el-checkbox-button v-for="city in cities" :label="city" :key="city">{{city}}</el-checkbox-button>\n    </el-checkbox-group>\n  </div>\n</template>\n<script>\n  const cityOptions = [\'上海\', \'北京\', \'广州\', \'深圳\'];\n  export default {\n    data () {\n      return {\n        checkboxGroup1: [\'上海\'],\n        checkboxGroup2: [\'上海\'],\n        checkboxGroup3: [\'上海\'],\n        checkboxGroup4: [\'上海\'],\n        cities: cityOptions\n      };\n    }\n  }\n<\/script>\n')],-1),G=Object(d.createVNode)("h3",{id:"dai-you-bian-kuang"},[Object(d.createVNode)("a",{class:"header-anchor",href:"#dai-you-bian-kuang"},"¶"),Object(d.createTextVNode)(" 带有边框")],-1),_=Object(d.createVNode)("div",null,[Object(d.createVNode)("p",null,[Object(d.createTextVNode)("设置"),Object(d.createVNode)("code",null,"border"),Object(d.createTextVNode)("属性可以渲染为带有边框的多选框。")])],-1),z=Object(d.createVNode)("pre",null,[Object(d.createVNode)("code",{class:"html"},'<template>\n  <div>\n    <el-checkbox v-model="checked1" label="备选项1" border></el-checkbox>\n    <el-checkbox v-model="checked2" label="备选项2" border></el-checkbox>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox v-model="checked3" label="备选项1" border size="medium"></el-checkbox>\n    <el-checkbox v-model="checked4" label="备选项2" border size="medium"></el-checkbox>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group v-model="checkboxGroup1" size="small">\n      <el-checkbox label="备选项1" border></el-checkbox>\n      <el-checkbox label="备选项2" border disabled></el-checkbox>\n    </el-checkbox-group>\n  </div>\n  <div style="margin-top: 20px">\n    <el-checkbox-group v-model="checkboxGroup2" size="mini" disabled>\n      <el-checkbox label="备选项1" border></el-checkbox>\n      <el-checkbox label="备选项2" border></el-checkbox>\n    </el-checkbox-group>\n  </div>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        checked1: true,\n        checked2: false,\n        checked3: false,\n        checked4: true,\n        checkboxGroup1: [],\n        checkboxGroup2: []\n      };\n    }\n  }\n<\/script>\n')],-1),A=Object(d.createStaticVNode)('<h3 id="checkbox-attributes"><a class="header-anchor" href="#checkbox-attributes">¶</a> Checkbox Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value / v-model</td><td>绑定值</td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>label</td><td>选中状态的值（只有在<code>checkbox-group</code>或者绑定对象类型为<code>array</code>时有效）</td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>true-label</td><td>选中时的值</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>false-label</td><td>没有选中时的值</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>border</td><td>是否显示边框</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>size</td><td>Checkbox 的尺寸，仅在 border 为真时有效</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>name</td><td>原生 name 属性</td><td>string</td><td>—</td><td>—</td></tr><tr><td>checked</td><td>当前是否勾选</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indeterminate</td><td>设置 indeterminate 状态，只负责样式控制</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id="checkbox-events"><a class="header-anchor" href="#checkbox-events">¶</a> Checkbox Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>change</td><td>当绑定值变化时触发的事件</td><td>更新后的值</td></tr></tbody></table><h3 id="checkbox-group-attributes"><a class="header-anchor" href="#checkbox-group-attributes">¶</a> Checkbox-group Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value / v-model</td><td>绑定值</td><td>array</td><td>—</td><td>—</td></tr><tr><td>size</td><td>多选框组尺寸，仅对按钮形式的 Checkbox 或带有边框的 Checkbox 有效</td><td>string</td><td>medium / small / mini</td><td>—</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>min</td><td>可被勾选的 checkbox 的最小数量</td><td>number</td><td>—</td><td>—</td></tr><tr><td>max</td><td>可被勾选的 checkbox 的最大数量</td><td>number</td><td>—</td><td>—</td></tr><tr><td>text-color</td><td>按钮形式的 Checkbox 激活时的文本颜色</td><td>string</td><td>—</td><td>#ffffff</td></tr><tr><td>fill</td><td>按钮形式的 Checkbox 激活时的填充色和边框色</td><td>string</td><td>—</td><td>#409EFF</td></tr></tbody></table><h3 id="checkbox-group-events"><a class="header-anchor" href="#checkbox-group-events">¶</a> Checkbox-group Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>change</td><td>当绑定值变化时触发的事件</td><td>更新后的值</td></tr></tbody></table><h3 id="checkbox-button-attributes"><a class="header-anchor" href="#checkbox-button-attributes">¶</a> Checkbox-button Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>label</td><td>选中状态的值（只有在<code>checkbox-group</code>或者绑定对象类型为<code>array</code>时有效）</td><td>string / number / boolean</td><td>—</td><td>—</td></tr><tr><td>true-label</td><td>选中时的值</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>false-label</td><td>没有选中时的值</td><td>string / number</td><td>—</td><td>—</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>name</td><td>原生 name 属性</td><td>string</td><td>—</td><td>—</td></tr><tr><td>checked</td><td>当前是否勾选</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',10);var B={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:c,createVNode:o,openBlock:l,createBlock:n}=d,a=e("备选项");const r={data:()=>({checked:!0})};return Object.assign({render:function(e,d){const r=t("el-checkbox");return l(),n("div",null,[o(r,{modelValue:e.checked,"onUpdate:modelValue":d[1]||(d[1]=t=>e.checked=t)},{default:c(()=>[a]),_:1},8,["modelValue"])])}},r)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:c,createVNode:o,openBlock:l,createBlock:n}=d,a=e("备选项1"),r=e("备选项");const b={data:()=>({checked1:!1,checked2:!0})};return Object.assign({render:function(e,d){const b=t("el-checkbox");return l(),n("div",null,[o(b,{modelValue:e.checked1,"onUpdate:modelValue":d[1]||(d[1]=t=>e.checked1=t),disabled:""},{default:c(()=>[a]),_:1},8,["modelValue"]),o(b,{modelValue:e.checked2,"onUpdate:modelValue":d[2]||(d[2]=t=>e.checked2=t),disabled:""},{default:c(()=>[r]),_:1},8,["modelValue"])])}},b)}(),"element-demo2":function(){const{resolveComponent:e,createVNode:t,withCtx:c,openBlock:o,createBlock:l}=d;const n={data:()=>({checkList:["选中且禁用","复选框 A"]})};return Object.assign({render:function(d,n){const a=e("el-checkbox"),r=e("el-checkbox-group");return o(),l("div",null,[t(r,{modelValue:d.checkList,"onUpdate:modelValue":n[1]||(n[1]=e=>d.checkList=e)},{default:c(()=>[t(a,{label:"复选框 A"}),t(a,{label:"复选框 B"}),t(a,{label:"复选框 C"}),t(a,{label:"禁用",disabled:""}),t(a,{label:"选中且禁用",disabled:""})]),_:1},8,["modelValue"])])}},n)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:c,createVNode:o,renderList:l,Fragment:n,openBlock:a,createBlock:r,toDisplayString:b}=d,h=e("全选"),i=o("div",{style:{margin:"15px 0"}},null,-1);const u=["上海","北京","广州","深圳"],s={data:()=>({checkAll:!1,checkedCities:["上海","北京"],cities:u,isIndeterminate:!0}),methods:{handleCheckAllChange(e){this.checkedCities=e?u:[],this.isIndeterminate=!1},handleCheckedCitiesChange(e){let t=e.length;this.checkAll=t===this.cities.length,this.isIndeterminate=t>0&&t<this.cities.length}}};return Object.assign({render:function(d,u){const s=t("el-checkbox"),k=t("el-checkbox-group");return a(),r("div",null,[o(s,{indeterminate:d.isIndeterminate,modelValue:d.checkAll,"onUpdate:modelValue":u[1]||(u[1]=e=>d.checkAll=e),onChange:d.handleCheckAllChange},{default:c(()=>[h]),_:1},8,["indeterminate","modelValue","onChange"]),i,o(k,{modelValue:d.checkedCities,"onUpdate:modelValue":u[2]||(u[2]=e=>d.checkedCities=e),onChange:d.handleCheckedCitiesChange},{default:c(()=>[(a(!0),r(n,null,l(d.cities,t=>(a(),r(s,{label:t,key:t},{default:c(()=>[e(b(t),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue","onChange"])])}},s)}(),"element-demo4":function(){const{renderList:e,Fragment:t,openBlock:c,createBlock:o,toDisplayString:l,createTextVNode:n,resolveComponent:a,withCtx:r,createVNode:b}=d;const h=["上海","北京","广州","深圳"],i={data:()=>({checkedCities:["上海","北京"],cities:h})};return Object.assign({render:function(d,h){const i=a("el-checkbox"),u=a("el-checkbox-group");return c(),o("div",null,[b(u,{modelValue:d.checkedCities,"onUpdate:modelValue":h[1]||(h[1]=e=>d.checkedCities=e),min:1,max:2},{default:r(()=>[(c(!0),o(t,null,e(d.cities,e=>(c(),o(i,{label:e,key:e},{default:r(()=>[n(l(e),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue"])])}},i)}(),"element-demo5":function(){const{renderList:e,Fragment:t,openBlock:c,createBlock:o,toDisplayString:l,createTextVNode:n,resolveComponent:a,withCtx:r,createVNode:b}=d,h={style:{"margin-top":"20px"}},i={style:{"margin-top":"20px"}},u={style:{"margin-top":"20px"}};const s=["上海","北京","广州","深圳"],k={data:()=>({checkboxGroup1:["上海"],checkboxGroup2:["上海"],checkboxGroup3:["上海"],checkboxGroup4:["上海"],cities:s})};return Object.assign({render:function(d,s){const k=a("el-checkbox-button"),x=a("el-checkbox-group");return c(),o("div",null,[b("div",null,[b(x,{modelValue:d.checkboxGroup1,"onUpdate:modelValue":s[1]||(s[1]=e=>d.checkboxGroup1=e)},{default:r(()=>[(c(!0),o(t,null,e(d.cities,e=>(c(),o(k,{label:e,key:e},{default:r(()=>[n(l(e),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue"])]),b("div",h,[b(x,{modelValue:d.checkboxGroup2,"onUpdate:modelValue":s[2]||(s[2]=e=>d.checkboxGroup2=e),size:"medium"},{default:r(()=>[(c(!0),o(t,null,e(d.cities,e=>(c(),o(k,{label:e,key:e},{default:r(()=>[n(l(e),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue"])]),b("div",i,[b(x,{modelValue:d.checkboxGroup3,"onUpdate:modelValue":s[3]||(s[3]=e=>d.checkboxGroup3=e),size:"small"},{default:r(()=>[(c(!0),o(t,null,e(d.cities,e=>(c(),o(k,{label:e,disabled:"北京"===e,key:e},{default:r(()=>[n(l(e),1)]),_:2},1032,["label","disabled"]))),128))]),_:1},8,["modelValue"])]),b("div",u,[b(x,{modelValue:d.checkboxGroup4,"onUpdate:modelValue":s[4]||(s[4]=e=>d.checkboxGroup4=e),size:"mini",disabled:""},{default:r(()=>[(c(!0),o(t,null,e(d.cities,e=>(c(),o(k,{label:e,key:e},{default:r(()=>[n(l(e),1)]),_:2},1032,["label"]))),128))]),_:1},8,["modelValue"])])])}},k)}(),"element-demo6":function(){const{resolveComponent:e,createVNode:t,withCtx:c,openBlock:o,createBlock:l}=d,n={style:{"margin-top":"20px"}},a={style:{"margin-top":"20px"}},r={style:{"margin-top":"20px"}};const b={data:()=>({checked1:!0,checked2:!1,checked3:!1,checked4:!0,checkboxGroup1:[],checkboxGroup2:[]})};return Object.assign({render:function(d,b){const h=e("el-checkbox"),i=e("el-checkbox-group");return o(),l("div",null,[t("div",null,[t(h,{modelValue:d.checked1,"onUpdate:modelValue":b[1]||(b[1]=e=>d.checked1=e),label:"备选项1",border:""},null,8,["modelValue"]),t(h,{modelValue:d.checked2,"onUpdate:modelValue":b[2]||(b[2]=e=>d.checked2=e),label:"备选项2",border:""},null,8,["modelValue"])]),t("div",n,[t(h,{modelValue:d.checked3,"onUpdate:modelValue":b[3]||(b[3]=e=>d.checked3=e),label:"备选项1",border:"",size:"medium"},null,8,["modelValue"]),t(h,{modelValue:d.checked4,"onUpdate:modelValue":b[4]||(b[4]=e=>d.checked4=e),label:"备选项2",border:"",size:"medium"},null,8,["modelValue"])]),t("div",a,[t(i,{modelValue:d.checkboxGroup1,"onUpdate:modelValue":b[5]||(b[5]=e=>d.checkboxGroup1=e),size:"small"},{default:c(()=>[t(h,{label:"备选项1",border:""}),t(h,{label:"备选项2",border:"",disabled:""})]),_:1},8,["modelValue"])]),t("div",r,[t(i,{modelValue:d.checkboxGroup2,"onUpdate:modelValue":b[6]||(b[6]=e=>d.checkboxGroup2=e),size:"mini",disabled:""},{default:c(()=>[t(h,{label:"备选项1",border:""}),t(h,{label:"备选项2",border:""})]),_:1},8,["modelValue"])])])}},b)}()},render:function(e,t,c,B,U,I){const L=Object(d.resolveComponent)("element-demo0"),F=Object(d.resolveComponent)("demo-block"),E=Object(d.resolveComponent)("element-demo1"),S=Object(d.resolveComponent)("element-demo2"),D=Object(d.resolveComponent)("element-demo3"),J=Object(d.resolveComponent)("element-demo4"),P=Object(d.resolveComponent)("element-demo5"),q=Object(d.resolveComponent)("element-demo6");return Object(d.openBlock)(),Object(d.createBlock)("section",o,[l,n,a,r,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(L)]),highlight:Object(d.withCtx)(()=>[h]),default:Object(d.withCtx)(()=>[b]),_:1}),i,u,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(E)]),highlight:Object(d.withCtx)(()=>[k]),default:Object(d.withCtx)(()=>[s]),_:1}),x,m,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(S)]),highlight:Object(d.withCtx)(()=>[V]),default:Object(d.withCtx)(()=>[p]),_:1}),O,j,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(D)]),highlight:Object(d.withCtx)(()=>[g]),_:1}),N,v,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(J)]),highlight:Object(d.withCtx)(()=>[C]),_:1}),f,y,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(P)]),highlight:Object(d.withCtx)(()=>[w]),default:Object(d.withCtx)(()=>[T]),_:1}),G,Object(d.createVNode)(F,null,{source:Object(d.withCtx)(()=>[Object(d.createVNode)(q)]),highlight:Object(d.withCtx)(()=>[z]),default:Object(d.withCtx)(()=>[_]),_:1}),A])}};t.default=B}}]);