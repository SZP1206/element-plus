(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{484:function(e,t,d){"use strict";d.r(t);var a=d(0);const n={class:"content element-doc"},l=Object(a.createVNode)("h2",{id:"transfer-chuan-suo-kuang"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#transfer-chuan-suo-kuang"},"¶"),Object(a.createTextVNode)(" Transfer 穿梭框")],-1),c=Object(a.createVNode)("h3",{id:"ji-chu-yong-fa"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#ji-chu-yong-fa"},"¶"),Object(a.createTextVNode)(" 基础用法")],-1),o=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("Transfer 的数据通过 "),Object(a.createVNode)("code",null,"data"),Object(a.createTextVNode)(" 属性传入。数据需要是一个对象数组，每个对象有以下属性："),Object(a.createVNode)("code",null,"key"),Object(a.createTextVNode)(" 为数据的唯一性标识，"),Object(a.createVNode)("code",null,"label"),Object(a.createTextVNode)(" 为显示文本，"),Object(a.createVNode)("code",null,"disabled"),Object(a.createTextVNode)(" 表示该项数据是否禁止转移。目标列表中的数据项会同步到绑定至 "),Object(a.createVNode)("code",null,"v-model"),Object(a.createTextVNode)(" 的变量，值为数据项的 "),Object(a.createVNode)("code",null,"key"),Object(a.createTextVNode)(" 所组成的数组。当然，如果希望在初始状态时目标列表不为空，可以像本例一样为 "),Object(a.createVNode)("code",null,"v-model"),Object(a.createTextVNode)(" 绑定的变量赋予一个初始值。")])],-1),r=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <el-transfer v-model="value" :data="data"></el-transfer>\n</template>\n\n<script>\n  export default {\n    data() {\n      const generateData = _ => {\n        const data = [];\n        for (let i = 1; i <= 15; i++) {\n          data.push({\n            key: i,\n            label: `备选项 ${ i }`,\n            disabled: i % 4 === 0\n          });\n        }\n        return data;\n      };\n      return {\n        data: generateData(),\n        value: [1, 4]\n      };\n    }\n  };\n<\/script>\n')],-1),s=Object(a.createVNode)("h3",{id:"ke-sou-suo"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#ke-sou-suo"},"¶"),Object(a.createTextVNode)(" 可搜索")],-1),i=Object(a.createVNode)("p",null,"在数据很多的情况下，可以对数据进行搜索和过滤。",-1),u=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("设置 "),Object(a.createVNode)("code",null,"filterable"),Object(a.createTextVNode)(" 为 "),Object(a.createVNode)("code",null,"true"),Object(a.createTextVNode)(" 即可开启搜索模式。默认情况下，若数据项的 "),Object(a.createVNode)("code",null,"label"),Object(a.createTextVNode)(" 属性包含搜索关键字，则会在搜索结果中显示。你也可以使用 "),Object(a.createVNode)("code",null,"filter-method"),Object(a.createTextVNode)(" 定义自己的搜索逻辑。"),Object(a.createVNode)("code",null,"filter-method"),Object(a.createTextVNode)(" 接收一个方法，当搜索关键字变化时，会将当前的关键字和每个数据项传给该方法。若方法返回 "),Object(a.createVNode)("code",null,"true"),Object(a.createTextVNode)("，则会在搜索结果中显示对应的数据项。")])],-1),h=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},"<template>\n  <el-transfer\n    filterable\n    :filter-method=\"filterMethod\"\n    filter-placeholder=\"请输入城市拼音\"\n    v-model=\"value\"\n    :data=\"data\">\n  </el-transfer>\n</template>\n\n<script>\n  export default {\n    data() {\n      const generateData = _ => {\n        const data = [];\n        const cities = ['上海', '北京', '广州', '深圳', '南京', '西安', '成都'];\n        const pinyin = ['shanghai', 'beijing', 'guangzhou', 'shenzhen', 'nanjing', 'xian', 'chengdu'];\n        cities.forEach((city, index) => {\n          data.push({\n            label: city,\n            key: index,\n            pinyin: pinyin[index]\n          });\n        });\n        return data;\n      };\n      return {\n        data: generateData(),\n        value: [],\n        filterMethod(query, item) {\n          return item.pinyin.indexOf(query) > -1;\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),b=Object(a.createVNode)("h3",{id:"ke-zi-ding-yi"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#ke-zi-ding-yi"},"¶"),Object(a.createTextVNode)(" 可自定义")],-1),f=Object(a.createVNode)("p",null,"可以对列表标题文案、按钮文案、数据项的渲染函数、列表底部的勾选状态文案、列表底部的内容区等进行自定义。",-1),j=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("可以使用 "),Object(a.createVNode)("code",null,"titles"),Object(a.createTextVNode)("、"),Object(a.createVNode)("code",null,"button-texts"),Object(a.createTextVNode)("、"),Object(a.createVNode)("code",null,"render-content"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"format"),Object(a.createTextVNode)(" 属性分别对列表标题文案、按钮文案、数据项的渲染函数和列表顶部的勾选状态文案进行自定义。数据项的渲染还可以使用 "),Object(a.createVNode)("code",null,"scoped-slot"),Object(a.createTextVNode)(" 进行自定义。对于列表底部的内容区，提供了两个具名 slot："),Object(a.createVNode)("code",null,"left-footer"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"right-footer"),Object(a.createTextVNode)("。此外，如果希望某些数据项在初始化时就被勾选，可以使用 "),Object(a.createVNode)("code",null,"left-default-checked"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"right-default-checked"),Object(a.createTextVNode)(" 属性。最后，本例还展示了 "),Object(a.createVNode)("code",null,"change"),Object(a.createTextVNode)(" 事件的用法。注意：由于 jsfiddle 不支持 JSX 语法，所以使用 "),Object(a.createVNode)("code",null,"render-content"),Object(a.createTextVNode)(" 自定义数据项的例子在 jsfiddle 中无法运行。但是在实际的项目中，只要正确地配置了相关依赖，就可以正常运行。")])],-1),O=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <p style="text-align: center; margin: 0 0 20px">使用 render-content 自定义数据项</p>\n  <div style="text-align: center">\n    <el-transfer\n      style="text-align: left; display: inline-block"\n      v-model="value"\n      filterable\n      :left-default-checked="[2, 3]"\n      :right-default-checked="[1]"\n      :render-content="renderFunc"\n      :titles="[\'Source\', \'Target\']"\n      :button-texts="[\'到左边\', \'到右边\']"\n      :format="{\n        noChecked: \'${total}\',\n        hasChecked: \'${checked}/${total}\'\n      }"\n      @change="handleChange"\n      :data="data">\n      <el-button class="transfer-footer" slot="left-footer" size="small">操作</el-button>\n      <el-button class="transfer-footer" slot="right-footer" size="small">操作</el-button>\n    </el-transfer>\n  </div>\n  <p style="text-align: center; margin: 50px 0 20px">使用 scoped-slot 自定义数据项</p>\n  <div style="text-align: center">\n    <el-transfer\n      style="text-align: left; display: inline-block"\n      v-model="value4"\n      filterable\n      :left-default-checked="[2, 3]"\n      :right-default-checked="[1]"\n      :titles="[\'Source\', \'Target\']"\n      :button-texts="[\'到左边\', \'到右边\']"\n      :format="{\n        noChecked: \'${total}\',\n        hasChecked: \'${checked}/${total}\'\n      }"\n      @change="handleChange"\n      :data="data">\n      <span slot-scope="{ option }">{{ option.key }} - {{ option.label }}</span>\n      <el-button class="transfer-footer" slot="left-footer" size="small">操作</el-button>\n      <el-button class="transfer-footer" slot="right-footer" size="small">操作</el-button>\n    </el-transfer>\n  </div>\n</template>\n\n<style>\n  .transfer-footer {\n    margin-left: 20px;\n    padding: 6px 5px;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      const generateData = _ => {\n        const data = [];\n        for (let i = 1; i <= 15; i++) {\n          data.push({\n            key: i,\n            label: `备选项 ${ i }`,\n            disabled: i % 4 === 0\n          });\n        }\n        return data;\n      };\n      return {\n        data: generateData(),\n        value: [1],\n        value4: [1],\n        renderFunc(h, option) {\n          return h("span", null, option.key, " - ", option.label);\n        }\n      };\n    },\n\n    methods: {\n      handleChange(value, direction, movedKeys) {\n        console.log(value, direction, movedKeys);\n      }\n    }\n  };\n<\/script>\n')],-1),V=Object(a.createVNode)("h3",{id:"shu-ju-xiang-shu-xing-bie-ming"},[Object(a.createVNode)("a",{class:"header-anchor",href:"#shu-ju-xiang-shu-xing-bie-ming"},"¶"),Object(a.createTextVNode)(" 数据项属性别名")],-1),p=Object(a.createVNode)("p",null,[Object(a.createTextVNode)("默认情况下，Transfer 仅能识别数据项中的 "),Object(a.createVNode)("code",null,"key"),Object(a.createTextVNode)("、"),Object(a.createVNode)("code",null,"label"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"disabled"),Object(a.createTextVNode)(" 字段。如果你的数据的字段名不同，可以使用 "),Object(a.createVNode)("code",null,"props"),Object(a.createTextVNode)(" 属性为它们设置别名。")],-1),N=Object(a.createVNode)("div",null,[Object(a.createVNode)("p",null,[Object(a.createTextVNode)("本例中的数据源没有 "),Object(a.createVNode)("code",null,"key"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"label"),Object(a.createTextVNode)(" 字段，在功能上与它们相同的字段名为 "),Object(a.createVNode)("code",null,"value"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"desc"),Object(a.createTextVNode)("。因此可以使用"),Object(a.createVNode)("code",null,"props"),Object(a.createTextVNode)(" 属性为 "),Object(a.createVNode)("code",null,"key"),Object(a.createTextVNode)(" 和 "),Object(a.createVNode)("code",null,"label"),Object(a.createTextVNode)(" 设置别名。")])],-1),g=Object(a.createVNode)("pre",null,[Object(a.createVNode)("code",{class:"html"},'<template>\n  <el-transfer\n    v-model="value"\n    :props="{\n      key: \'value\',\n      label: \'desc\'\n    }"\n    :data="data">\n  </el-transfer>\n</template>\n\n<script>\n  export default {\n    data() {\n      const generateData = _ => {\n        const data = [];\n        for (let i = 1; i <= 15; i++) {\n          data.push({\n            value: i,\n            desc: `备选项 ${ i }`,\n            disabled: i % 4 === 0\n          });\n        }\n        return data;\n      };\n      return {\n        data: generateData(),\n        value: []\n      };\n    }\n  };\n<\/script>\n')],-1),m=Object(a.createStaticVNode)('<h3 id="attributes"><a class="header-anchor" href="#attributes">¶</a> Attributes</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value / v-model</td><td>绑定值</td><td>array</td><td>—</td><td>—</td></tr><tr><td>data</td><td>Transfer 的数据源</td><td>array[{ key, label, disabled }]</td><td>—</td><td>[ ]</td></tr><tr><td>filterable</td><td>是否可搜索</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>filter-placeholder</td><td>搜索框占位符</td><td>string</td><td>—</td><td>请输入搜索内容</td></tr><tr><td>filter-method</td><td>自定义搜索方法</td><td>function</td><td>—</td><td>—</td></tr><tr><td>target-order</td><td>右侧列表元素的排序策略：若为 <code>original</code>，则保持与数据源相同的顺序；若为 <code>push</code>，则新加入的元素排在最后；若为 <code>unshift</code>，则新加入的元素排在最前</td><td>string</td><td>original / push / unshift</td><td>original</td></tr><tr><td>titles</td><td>自定义列表标题</td><td>array</td><td>—</td><td>[&#39;列表 1&#39;, &#39;列表 2&#39;]</td></tr><tr><td>button-texts</td><td>自定义按钮文案</td><td>array</td><td>—</td><td>[ ]</td></tr><tr><td>render-content</td><td>自定义数据项渲染函数</td><td>function(h, option)</td><td>—</td><td>—</td></tr><tr><td>format</td><td>列表顶部勾选状态文案</td><td>object{noChecked, hasChecked}</td><td>—</td><td>{ noChecked: &#39;${checked}/${total}&#39;, hasChecked: &#39;${checked}/${total}&#39; }</td></tr><tr><td>props</td><td>数据源的字段别名</td><td>object{key, label, disabled}</td><td>—</td><td>—</td></tr><tr><td>left-default-checked</td><td>初始状态下左侧列表的已勾选项的 key 数组</td><td>array</td><td>—</td><td>[ ]</td></tr><tr><td>right-default-checked</td><td>初始状态下右侧列表的已勾选项的 key 数组</td><td>array</td><td>—</td><td>[ ]</td></tr></tbody></table><h3 id="slot"><a class="header-anchor" href="#slot">¶</a> Slot</h3><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>left-footer</td><td>左侧列表底部的内容</td></tr><tr><td>right-footer</td><td>右侧列表底部的内容</td></tr></tbody></table><h3 id="scoped-slot"><a class="header-anchor" href="#scoped-slot">¶</a> Scoped Slot</h3><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>—</td><td>自定义数据项的内容，参数为 { option }</td></tr></tbody></table><h3 id="methods"><a class="header-anchor" href="#methods">¶</a> Methods</h3><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>clearQuery</td><td>清空某个面板的搜索关键词</td><td>&#39;left&#39; / &#39;right&#39;，指定需要清空的面板</td></tr></tbody></table><h3 id="events"><a class="header-anchor" href="#events">¶</a> Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>change</td><td>右侧列表元素变化时触发</td><td>当前值、数据移动的方向（&#39;left&#39; / &#39;right&#39;）、发生移动的数据 key 数组</td></tr><tr><td>left-check-change</td><td>左侧列表元素被用户选中 / 取消选中时触发</td><td>当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组</td></tr><tr><td>right-check-change</td><td>右侧列表元素被用户选中 / 取消选中时触发</td><td>当前被选中的元素的 key 数组、选中状态发生变化的元素的 key 数组</td></tr></tbody></table>',10);var x={name:"component-doc",components:{"element-demo0":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:n}=a;const l={data:()=>({data:(e=>{const t=[];for(let e=1;e<=15;e++)t.push({key:e,label:"备选项 "+e,disabled:e%4==0});return t})(),value:[1,4]})};return Object.assign({render:function(a,l){const c=e("el-transfer");return d(),n("div",null,[t(c,{modelValue:a.value,"onUpdate:modelValue":l[1]||(l[1]=e=>a.value=e),data:a.data},null,8,["modelValue","data"])])}},l)}(),"element-demo1":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:n}=a;const l={data:()=>({data:(e=>{const t=[],d=["shanghai","beijing","guangzhou","shenzhen","nanjing","xian","chengdu"];return["上海","北京","广州","深圳","南京","西安","成都"].forEach((e,a)=>{t.push({label:e,key:a,pinyin:d[a]})}),t})(),value:[],filterMethod:(e,t)=>t.pinyin.indexOf(e)>-1})};return Object.assign({render:function(a,l){const c=e("el-transfer");return d(),n("div",null,[t(c,{filterable:"","filter-method":a.filterMethod,"filter-placeholder":"请输入城市拼音",modelValue:a.value,"onUpdate:modelValue":l[1]||(l[1]=e=>a.value=e),data:a.data},null,8,["filter-method","modelValue","data"])])}},l)}(),"element-demo2":function(){const{createVNode:e,createTextVNode:t,resolveComponent:d,withCtx:n,toDisplayString:l,openBlock:c,createBlock:o}=a,r=e("p",{style:{"text-align":"center",margin:"0 0 20px"}},"使用 render-content 自定义数据项",-1),s={style:{"text-align":"center"}},i=t("操作"),u=t("操作"),h=e("p",{style:{"text-align":"center",margin:"50px 0 20px"}},"使用 scoped-slot 自定义数据项",-1),b={style:{"text-align":"center"}},f={"slot-scope":"{ option }"},j=t("操作"),O=t("操作");const V={data:()=>({data:(e=>{const t=[];for(let e=1;e<=15;e++)t.push({key:e,label:"备选项 "+e,disabled:e%4==0});return t})(),value:[1],value4:[1],renderFunc:(e,t)=>e("span",null,t.key," - ",t.label)}),methods:{handleChange(e,t,d){console.log(e,t,d)}}};return Object.assign({render:function(t,a){const V=d("el-button"),p=d("el-transfer");return c(),o("div",null,[r,e("div",s,[e(p,{style:{"text-align":"left",display:"inline-block"},modelValue:t.value,"onUpdate:modelValue":a[1]||(a[1]=e=>t.value=e),filterable:"","left-default-checked":[2,3],"right-default-checked":[1],"render-content":t.renderFunc,titles:["Source","Target"],"button-texts":["到左边","到右边"],format:{noChecked:"${total}",hasChecked:"${checked}/${total}"},onChange:t.handleChange,data:t.data},{default:n(()=>[e(V,{class:"transfer-footer",slot:"left-footer",size:"small"},{default:n(()=>[i]),_:1}),e(V,{class:"transfer-footer",slot:"right-footer",size:"small"},{default:n(()=>[u]),_:1})]),_:1},8,["modelValue","render-content","onChange","data"])]),h,e("div",b,[e(p,{style:{"text-align":"left",display:"inline-block"},modelValue:t.value4,"onUpdate:modelValue":a[2]||(a[2]=e=>t.value4=e),filterable:"","left-default-checked":[2,3],"right-default-checked":[1],titles:["Source","Target"],"button-texts":["到左边","到右边"],format:{noChecked:"${total}",hasChecked:"${checked}/${total}"},onChange:t.handleChange,data:t.data},{default:n(()=>[e("span",f,l(t.option.key)+" - "+l(t.option.label),1),e(V,{class:"transfer-footer",slot:"left-footer",size:"small"},{default:n(()=>[j]),_:1}),e(V,{class:"transfer-footer",slot:"right-footer",size:"small"},{default:n(()=>[O]),_:1})]),_:1},8,["modelValue","onChange","data"])])])}},V)}(),"element-demo3":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:n}=a;const l={data:()=>({data:(e=>{const t=[];for(let e=1;e<=15;e++)t.push({value:e,desc:"备选项 "+e,disabled:e%4==0});return t})(),value:[]})};return Object.assign({render:function(a,l){const c=e("el-transfer");return d(),n("div",null,[t(c,{modelValue:a.value,"onUpdate:modelValue":l[1]||(l[1]=e=>a.value=e),props:{key:"value",label:"desc"},data:a.data},null,8,["modelValue","data"])])}},l)}()},render:function(e,t,d,x,k,y){const v=Object(a.resolveComponent)("element-demo0"),T=Object(a.resolveComponent)("demo-block"),C=Object(a.resolveComponent)("element-demo1"),w=Object(a.resolveComponent)("element-demo2"),$=Object(a.resolveComponent)("element-demo3");return Object(a.openBlock)(),Object(a.createBlock)("section",n,[l,c,Object(a.createVNode)(T,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(v)]),highlight:Object(a.withCtx)(()=>[r]),default:Object(a.withCtx)(()=>[o]),_:1}),s,i,Object(a.createVNode)(T,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(C)]),highlight:Object(a.withCtx)(()=>[h]),default:Object(a.withCtx)(()=>[u]),_:1}),b,f,Object(a.createVNode)(T,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)(w)]),highlight:Object(a.withCtx)(()=>[O]),default:Object(a.withCtx)(()=>[j]),_:1}),V,p,Object(a.createVNode)(T,null,{source:Object(a.withCtx)(()=>[Object(a.createVNode)($)]),highlight:Object(a.withCtx)(()=>[g]),default:Object(a.withCtx)(()=>[N]),_:1}),m])}};t.default=x}}]);