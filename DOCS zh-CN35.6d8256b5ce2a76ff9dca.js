(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{463:function(e,t,n){"use strict";n.r(t);var o=n(0);const c={class:"content element-doc"},d=Object(o.createStaticVNode)('<h2 id="messagebox-dan-kuang"><a class="header-anchor" href="#messagebox-dan-kuang">¶</a> MessageBox 弹框</h2><p>模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容。</p><div class="tip"><p>从场景上说，MessageBox 的作用是美化系统自带的 <code>alert</code>、<code>confirm</code> 和 <code>prompt</code>，因此适合展示较为简单的内容。如果需要弹出较为复杂的内容，请使用 Dialog。</p></div><h3 id="xiao-xi-ti-shi"><a class="header-anchor" href="#xiao-xi-ti-shi">¶</a> 消息提示</h3><p>当用户进行操作时会被触发，该对话框中断用户操作，直到用户确认知晓后才可关闭。</p>',5),a=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("调用"),Object(o.createVNode)("code",null,"$alert"),Object(o.createTextVNode)("方法即可打开消息提示，它模拟了系统的 "),Object(o.createVNode)("code",null,"alert"),Object(o.createTextVNode)("，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，"),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)("和"),Object(o.createVNode)("code",null,"title"),Object(o.createTextVNode)("。值得一提的是，窗口被关闭后，它默认会返回一个"),Object(o.createVNode)("code",null,"Promise"),Object(o.createTextVNode)("对象便于进行后续操作的处理。若不确定浏览器是否支持"),Object(o.createVNode)("code",null,"Promise"),Object(o.createTextVNode)("，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。")])],-1),r=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('这是一段内容', '标题名称', {\n          confirmButtonText: '确定',\n          callback: action => {\n            this.$message({\n              type: 'info',\n              message: `action: ${ action }`\n            });\n          }\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),s=Object(o.createVNode)("h3",{id:"que-ren-xiao-xi"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#que-ren-xiao-xi"},"¶"),Object(o.createTextVNode)(" 确认消息")],-1),l=Object(o.createVNode)("p",null,"提示用户确认其已经触发的动作，并询问是否进行此操作时会用到此对话框。",-1),i=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("调用"),Object(o.createVNode)("code",null,"$confirm"),Object(o.createTextVNode)("方法即可打开消息提示，它模拟了系统的 "),Object(o.createVNode)("code",null,"confirm"),Object(o.createTextVNode)("。Message Box 组件也拥有极高的定制性，我们可以传入"),Object(o.createVNode)("code",null,"options"),Object(o.createTextVNode)("作为第三个参数，它是一个字面量对象。"),Object(o.createVNode)("code",null,"type"),Object(o.createTextVNode)("字段表明消息类型，可以为"),Object(o.createVNode)("code",null,"success"),Object(o.createTextVNode)("，"),Object(o.createVNode)("code",null,"error"),Object(o.createTextVNode)("，"),Object(o.createVNode)("code",null,"info"),Object(o.createTextVNode)("和"),Object(o.createVNode)("code",null,"warning"),Object(o.createTextVNode)("，无效的设置将会被忽略。注意，第二个参数"),Object(o.createVNode)("code",null,"title"),Object(o.createTextVNode)("必须定义为"),Object(o.createVNode)("code",null,"String"),Object(o.createTextVNode)("类型，如果是"),Object(o.createVNode)("code",null,"Object"),Object(o.createTextVNode)("，会被理解为"),Object(o.createVNode)("code",null,"options"),Object(o.createTextVNode)("。在这里我们用了 Promise 来处理后续响应。")])],-1),u=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),b=Object(o.createVNode)("h3",{id:"ti-jiao-nei-rong"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#ti-jiao-nei-rong"},"¶"),Object(o.createTextVNode)(" 提交内容")],-1),p=Object(o.createVNode)("p",null,"当用户进行操作时会被触发，中断用户操作，提示用户进行输入的对话框。",-1),h=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("调用"),Object(o.createVNode)("code",null,"$prompt"),Object(o.createTextVNode)("方法即可打开消息提示，它模拟了系统的 "),Object(o.createVNode)("code",null,"prompt"),Object(o.createTextVNode)("。可以用"),Object(o.createVNode)("code",null,"inputPattern"),Object(o.createTextVNode)("字段自己规定匹配模式，或者用"),Object(o.createVNode)("code",null,"inputValidator"),Object(o.createTextVNode)("规定校验函数，可以返回"),Object(o.createVNode)("code",null,"Boolean"),Object(o.createTextVNode)("或"),Object(o.createVNode)("code",null,"String"),Object(o.createTextVNode)("，返回"),Object(o.createVNode)("code",null,"false"),Object(o.createTextVNode)("或字符串时均表示校验未通过，同时返回的字符串相当于定义了"),Object(o.createVNode)("code",null,"inputErrorMessage"),Object(o.createTextVNode)("字段。此外，可以用"),Object(o.createVNode)("code",null,"inputPlaceholder"),Object(o.createTextVNode)("字段来定义输入框的占位符。")])],-1),m=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$prompt('请输入邮箱', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          inputPattern: /[\\w!#$%&'*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/,\n          inputErrorMessage: '邮箱格式不正确'\n        }).then(({ value }) => {\n          this.$message({\n            type: 'success',\n            message: '你的邮箱是: ' + value\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '取消输入'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),j=Object(o.createVNode)("h3",{id:"zi-ding-yi"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#zi-ding-yi"},"¶"),Object(o.createTextVNode)(" 自定义")],-1),g=Object(o.createVNode)("p",null,"可自定义配置不同内容。",-1),O=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("以上三个方法都是对"),Object(o.createVNode)("code",null,"$msgbox"),Object(o.createTextVNode)("方法的再包装。本例直接调用"),Object(o.createVNode)("code",null,"$msgbox"),Object(o.createTextVNode)("方法，使用了"),Object(o.createVNode)("code",null,"showCancelButton"),Object(o.createTextVNode)("字段，用于显示取消按钮。另外可使用"),Object(o.createVNode)("code",null,"cancelButtonClass"),Object(o.createTextVNode)("为其添加自定义样式，使用"),Object(o.createVNode)("code",null,"cancelButtonText"),Object(o.createTextVNode)("来自定义按钮文本（Confirm 按钮也具有相同的字段，在文末的字段说明中有完整的字段列表）。此例还使用了"),Object(o.createVNode)("code",null,"beforeClose"),Object(o.createTextVNode)("属性，它的值是一个方法，会在 MessageBox 的实例关闭前被调用，同时暂停实例的关闭。它有三个参数："),Object(o.createVNode)("code",null,"action"),Object(o.createTextVNode)("、实例本身和"),Object(o.createVNode)("code",null,"done"),Object(o.createTextVNode)("方法。使用它能够在关闭前对实例进行一些操作，比如为确定按钮添加"),Object(o.createVNode)("code",null,"loading"),Object(o.createTextVNode)("状态等；此时若需要关闭实例，可以调用"),Object(o.createVNode)("code",null,"done"),Object(o.createTextVNode)("方法（若在"),Object(o.createVNode)("code",null,"beforeClose"),Object(o.createTextVNode)("中没有调用"),Object(o.createVNode)("code",null,"done"),Object(o.createTextVNode)("，则实例不会关闭）。")])],-1),x=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open() {\n        this.$msgbox({\n          title: '消息',\n          message: h('p', null, [\n            h('span', null, '内容可以是 '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ]),\n          showCancelButton: true,\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true;\n              instance.confirmButtonText = '执行中...';\n              setTimeout(() => {\n                done();\n                setTimeout(() => {\n                  instance.confirmButtonLoading = false;\n                }, 300);\n              }, 3000);\n            } else {\n              done();\n            }\n          }\n        }).then(action => {\n          this.$message({\n            type: 'info',\n            message: 'action: ' + action\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),V=Object(o.createStaticVNode)('<div class="tip"><p>弹出层的内容可以是 <code>VNode</code>，所以我们能把一些自定义组件传入其中。每次弹出层打开后，Vue 会对新老 <code>VNode</code> 节点进行比对，然后将根据比较结果进行最小单位地修改视图。这也许会造成弹出层内容区域的组件没有重新渲染，例如 <a href="https://github.com/ElemeFE/element/issues/8931">#8931</a>。当这类问题出现时，解决方案是给 <code>VNode</code> 加上一个不相同的 key，参考<a href="https://jsfiddle.net/zhiyang/ezmhq2ef/">这里</a>。</p></div><h3 id="shi-yong-html-pian-duan"><a class="header-anchor" href="#shi-yong-html-pian-duan">¶</a> 使用 HTML 片段</h3><p><code>message</code> 属性支持传入 HTML 片段。</p>',3),N=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("将"),Object(o.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(o.createTextVNode)("属性设置为 true，"),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)(" 就会被当作 HTML 片段处理。")])],-1),f=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$alert('<strong>这是 <i>HTML</i> 片段</strong>', 'HTML 片段', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),T=Object(o.createStaticVNode)('<div class="warning"><p><code>message</code> 属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。因此在 <code>dangerouslyUseHTMLString</code> 打开的情况下，请确保 <code>message</code> 的内容是可信的，<strong>永远不要</strong>将用户提交的内容赋值给 <code>message</code> 属性。</p></div><h3 id="qu-fen-qu-xiao-yu-guan-bi"><a class="header-anchor" href="#qu-fen-qu-xiao-yu-guan-bi">¶</a> 区分取消与关闭</h3><p>有些场景下，点击取消按钮与点击关闭按钮有着不同的含义。</p>',3),B=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("默认情况下，当用户触发取消（点击取消按钮）和触发关闭（点击关闭按钮或遮罩层、按下 ESC 键）时，Promise 的 reject 回调和"),Object(o.createVNode)("code",null,"callback"),Object(o.createTextVNode)("回调的参数均为 'cancel'。如果将"),Object(o.createVNode)("code",null,"distinguishCancelAndClose"),Object(o.createTextVNode)("属性设置为 true，则上述两种行为的参数分别为 'cancel' 和 'close'。")])],-1),C=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('检测到未保存的内容，是否在离开页面前保存修改？', '确认信息', {\n          distinguishCancelAndClose: true,\n          confirmButtonText: '保存',\n          cancelButtonText: '放弃修改'\n        })\n          .then(() => {\n            this.$message({\n              type: 'info',\n              message: '保存修改'\n            });\n          })\n          .catch(action => {\n            this.$message({\n              type: 'info',\n              message: action === 'cancel'\n                ? '放弃保存并离开页面'\n                : '停留在当前页面'\n            })\n          });\n      }\n    }\n  }\n<\/script>\n")],-1),w=Object(o.createVNode)("h3",{id:"ju-zhong-bu-ju"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#ju-zhong-bu-ju"},"¶"),Object(o.createTextVNode)(" 居中布局")],-1),y=Object(o.createVNode)("p",null,"内容支持居中布局",-1),M=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("将 "),Object(o.createVNode)("code",null,"center"),Object(o.createTextVNode)(" 设置为 "),Object(o.createVNode)("code",null,"true"),Object(o.createTextVNode)(" 即可开启居中布局")])],-1),$=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button type=\"text\" @click=\"open\">点击打开 Message Box</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open() {\n        this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning',\n          center: true\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '删除成功!'\n          });\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          });\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),k=Object(o.createStaticVNode)('<h3 id="quan-ju-fang-fa"><a class="header-anchor" href="#quan-ju-fang-fa">¶</a> 全局方法</h3><p>如果你完整引入了 Element，它会为 Vue.prototype 添加如下全局方法：$msgbox, $alert, $confirm 和 $prompt。因此在 Vue instance 中可以采用本页面中的方式调用 <code>MessageBox</code>。调用参数为：</p><ul><li><code>$msgbox(options)</code></li><li><code>$alert(message, title, options)</code> 或 <code>$alert(message, options)</code></li><li><code>$confirm(message, title, options)</code> 或 <code>$confirm(message, options)</code></li><li><code>$prompt(message, title, options)</code> 或 <code>$prompt(message, options)</code></li></ul><h3 id="dan-du-yin-yong"><a class="header-anchor" href="#dan-du-yin-yong">¶</a> 单独引用</h3><p>如果单独引入 <code>MessageBox</code>：</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { MessageBox } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>那么对应于上述四个全局方法的调用方法依次为：MessageBox, MessageBox.alert, MessageBox.confirm 和 MessageBox.prompt，调用参数与全局方法相同。</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>title</td><td>MessageBox 标题</td><td>string</td><td>—</td><td>—</td></tr><tr><td>message</td><td>MessageBox 消息正文内容</td><td>string / VNode</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>是否将 message 属性作为 HTML 片段处理</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>type</td><td>消息类型，用于显示图标</td><td>string</td><td>success / info / warning / error</td><td>—</td></tr><tr><td>iconClass</td><td>自定义图标的类名，会覆盖 <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>customClass</td><td>MessageBox 的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>callback</td><td>若不使用 Promise，可以使用此参数指定 MessageBox 关闭后的回调</td><td>function(action, instance)，action 的值为&#39;confirm&#39;, &#39;cancel&#39;或&#39;close&#39;, instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法</td><td>—</td><td>—</td></tr><tr><td>showClose</td><td>MessageBox 是否显示右上角关闭按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>beforeClose</td><td>MessageBox 关闭前的回调，会暂停实例的关闭</td><td>function(action, instance, done)，action 的值为&#39;confirm&#39;, &#39;cancel&#39;或&#39;close&#39;；instance 为 MessageBox 实例，可以通过它访问实例上的属性和方法；done 用于关闭 MessageBox 实例</td><td>—</td><td>—</td></tr><tr><td>distinguishCancelAndClose</td><td>是否将取消（点击取消按钮）与关闭（点击关闭按钮或遮罩层、按下 ESC 键）进行区分</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lockScroll</td><td>是否在 MessageBox 出现时将 body 滚动锁定</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showCancelButton</td><td>是否显示取消按钮</td><td>boolean</td><td>—</td><td>false（以 confirm 和 prompt 方式调用时为 true）</td></tr><tr><td>showConfirmButton</td><td>是否显示确定按钮</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>cancelButtonText</td><td>取消按钮的文本内容</td><td>string</td><td>—</td><td>取消</td></tr><tr><td>confirmButtonText</td><td>确定按钮的文本内容</td><td>string</td><td>—</td><td>确定</td></tr><tr><td>cancelButtonClass</td><td>取消按钮的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>confirmButtonClass</td><td>确定按钮的自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>closeOnClickModal</td><td>是否可通过点击遮罩关闭 MessageBox</td><td>boolean</td><td>—</td><td>true（以 alert 方式调用时为 false）</td></tr><tr><td>closeOnPressEscape</td><td>是否可通过按下 ESC 键关闭 MessageBox</td><td>boolean</td><td>—</td><td>true（以 alert 方式调用时为 false）</td></tr><tr><td>closeOnHashChange</td><td>是否在 hashchange 时关闭 MessageBox</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>showInput</td><td>是否显示输入框</td><td>boolean</td><td>—</td><td>false（以 prompt 方式调用时为 true）</td></tr><tr><td>inputPlaceholder</td><td>输入框的占位符</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputType</td><td>输入框的类型</td><td>string</td><td>—</td><td>text</td></tr><tr><td>inputValue</td><td>输入框的初始文本</td><td>string</td><td>—</td><td>—</td></tr><tr><td>inputPattern</td><td>输入框的校验表达式</td><td>regexp</td><td>—</td><td>—</td></tr><tr><td>inputValidator</td><td>输入框的校验函数。可以返回布尔值或字符串，若返回一个字符串, 则返回结果会被赋值给 inputErrorMessage</td><td>function</td><td>—</td><td>—</td></tr><tr><td>inputErrorMessage</td><td>校验未通过时的提示文本</td><td>string</td><td>—</td><td>输入的数据不合法!</td></tr><tr><td>center</td><td>是否居中布局</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>roundButton</td><td>是否使用圆角按钮</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table>',9);var v={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$alert("这是一段内容","标题名称",{confirmButtonText:"确定",callback:e=>{this.$message({type:"info",message:"action: "+e})}})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$confirm("此操作将永久删除该文件, 是否继续?","提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning"}).then(()=>{this.$message({type:"success",message:"删除成功!"})}).catch(()=>{this.$message({type:"info",message:"已取消删除"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$prompt("请输入邮箱","提示",{confirmButtonText:"确定",cancelButtonText:"取消",inputPattern:/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/,inputErrorMessage:"邮箱格式不正确"}).then(({value:e})=>{this.$message({type:"success",message:"你的邮箱是: "+e})}).catch(()=>{this.$message({type:"info",message:"取消输入"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const{h:s}=o,l={methods:{open(){this.$msgbox({title:"消息",message:s("p",null,[s("span",null,"内容可以是 "),s("i",{style:"color: teal"},"VNode")]),showCancelButton:!0,confirmButtonText:"确定",cancelButtonText:"取消",beforeClose:(e,t,n)=>{"confirm"===e?(t.confirmButtonLoading=!0,t.confirmButtonText="执行中...",setTimeout(()=>{n(),setTimeout(()=>{t.confirmButtonLoading=!1},300)},3e3)):n()}}).then(e=>{this.$message({type:"info",message:"action: "+e})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$alert("<strong>这是 <i>HTML</i> 片段</strong>","HTML 片段",{dangerouslyUseHTMLString:!0})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo5":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$confirm("检测到未保存的内容，是否在离开页面前保存修改？","确认信息",{distinguishCancelAndClose:!0,confirmButtonText:"保存",cancelButtonText:"放弃修改"}).then(()=>{this.$message({type:"info",message:"保存修改"})}).catch(e=>{this.$message({type:"info",message:"cancel"===e?"放弃保存并离开页面":"停留在当前页面"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}(),"element-demo6":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:d,createBlock:a}=o,r=e("点击打开 Message Box");const s={methods:{open(){this.$confirm("此操作将永久删除该文件, 是否继续?","提示",{confirmButtonText:"确定",cancelButtonText:"取消",type:"warning",center:!0}).then(()=>{this.$message({type:"success",message:"删除成功!"})}).catch(()=>{this.$message({type:"info",message:"已取消删除"})})}}};return Object.assign({render:function(e,o){const s=t("el-button");return d(),a("div",null,[c(s,{type:"text",onClick:e.open},{default:n(()=>[r]),_:1},8,["onClick"])])}},s)}()},render:function(e,t,n,v,L,_){const S=Object(o.resolveComponent)("element-demo0"),H=Object(o.resolveComponent)("demo-block"),E=Object(o.resolveComponent)("element-demo1"),P=Object(o.resolveComponent)("element-demo2"),q=Object(o.resolveComponent)("element-demo3"),z=Object(o.resolveComponent)("element-demo4"),U=Object(o.resolveComponent)("element-demo5"),A=Object(o.resolveComponent)("element-demo6");return Object(o.openBlock)(),Object(o.createBlock)("section",c,[d,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(S)]),highlight:Object(o.withCtx)(()=>[r]),default:Object(o.withCtx)(()=>[a]),_:1}),s,l,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(E)]),highlight:Object(o.withCtx)(()=>[u]),default:Object(o.withCtx)(()=>[i]),_:1}),b,p,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(P)]),highlight:Object(o.withCtx)(()=>[m]),default:Object(o.withCtx)(()=>[h]),_:1}),j,g,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(q)]),highlight:Object(o.withCtx)(()=>[x]),default:Object(o.withCtx)(()=>[O]),_:1}),V,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(z)]),highlight:Object(o.withCtx)(()=>[f]),default:Object(o.withCtx)(()=>[N]),_:1}),T,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(U)]),highlight:Object(o.withCtx)(()=>[C]),default:Object(o.withCtx)(()=>[B]),_:1}),w,y,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(A)]),highlight:Object(o.withCtx)(()=>[$]),default:Object(o.withCtx)(()=>[M]),_:1}),k])}};t.default=v}}]);