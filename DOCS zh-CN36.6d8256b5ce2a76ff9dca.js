(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{464:function(e,t,n){"use strict";n.r(t);var o=n(0);const c={class:"content element-doc"},s=Object(o.createVNode)("h2",{id:"message-xiao-xi-ti-shi"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#message-xiao-xi-ti-shi"},"¶"),Object(o.createTextVNode)(" Message 消息提示")],-1),a=Object(o.createVNode)("p",null,"常用于主动操作后的反馈提示。与 Notification 的区别是后者更多用于系统级通知的被动提醒。",-1),d=Object(o.createVNode)("h3",{id:"ji-chu-yong-fa"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#ji-chu-yong-fa"},"¶"),Object(o.createTextVNode)(" 基础用法")],-1),l=Object(o.createVNode)("p",null,"从顶部出现，3 秒后自动消失。",-1),r=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("Message 在配置上与 Notification 非常类似，所以部分 options 在此不做详尽解释，文末有 options 列表，可以结合 Notification 的文档理解它们。Element Plus 注册了一个"),Object(o.createVNode)("code",null,"$message"),Object(o.createTextVNode)("方法用于调用，Message 可以接收一个字符串或一个 VNode 作为参数，它会被显示为正文内容。")])],-1),i=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},"<template>\n  <el-button :plain=\"true\" @click=\"open\">打开消息提示</el-button>\n  <el-button :plain=\"true\" @click=\"openVn\">VNode</el-button>\n</template>\n\n<script>\n  import { h } from 'vue';\n\n  export default {\n    methods: {\n      open() {\n        this.$message('这是一条消息提示');\n      },\n\n      openVn() {\n        this.$message({\n          message: h('p', null, [\n            h('span', null, '内容可以是 '),\n            h('i', { style: 'color: teal' }, 'VNode')\n          ])\n        });\n      }\n    }\n  }\n<\/script>\n")],-1),p=Object(o.createVNode)("h3",{id:"bu-tong-zhuang-tai"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#bu-tong-zhuang-tai"},"¶"),Object(o.createTextVNode)(" 不同状态")],-1),u=Object(o.createVNode)("p",null,"用来显示「成功、警告、消息、错误」类的操作反馈。",-1),h=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("当需要自定义更多属性时，Message 也可以接收一个对象为参数。比如，设置"),Object(o.createVNode)("code",null,"type"),Object(o.createTextVNode)("字段可以定义不同的状态，默认为"),Object(o.createVNode)("code",null,"info"),Object(o.createTextVNode)("。此时正文内容以"),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)("的值传入。同时，我们也为 Message 的各种 type 注册了方法，可以在不传入"),Object(o.createVNode)("code",null,"type"),Object(o.createTextVNode)("字段的情况下像"),Object(o.createVNode)("code",null,"open4"),Object(o.createTextVNode)("那样直接调用。")])],-1),b=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},'<template>\n  <el-button :plain="true" @click="open2">成功</el-button>\n  <el-button :plain="true" @click="open3">警告</el-button>\n  <el-button :plain="true" @click="open1">消息</el-button>\n  <el-button :plain="true" @click="open4">错误</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$message(\'这是一条消息提示\');\n      },\n      open2() {\n        this.$message({\n          message: \'恭喜你，这是一条成功消息\',\n          type: \'success\'\n        });\n      },\n\n      open3() {\n        this.$message({\n          message: \'警告哦，这是一条警告消息\',\n          type: \'warning\'\n        });\n      },\n\n      open4() {\n        this.$message.error(\'错了哦，这是一条错误消息\');\n      }\n    }\n  }\n<\/script>\n')],-1),g=Object(o.createVNode)("h3",{id:"ke-guan-bi"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#ke-guan-bi"},"¶"),Object(o.createTextVNode)(" 可关闭")],-1),m=Object(o.createVNode)("p",null,"可以添加关闭按钮。",-1),j=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("默认的 Message 是不可以被人工关闭的，如果需要可手动关闭的 Message，可以使用"),Object(o.createVNode)("code",null,"showClose"),Object(o.createTextVNode)("字段。此外，和 Notification 一样，Message 拥有可控的"),Object(o.createVNode)("code",null,"duration"),Object(o.createTextVNode)("，设置"),Object(o.createVNode)("code",null,"0"),Object(o.createTextVNode)("为不会被自动关闭，默认为 3000 毫秒。")])],-1),O=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},'<template>\n  <el-button :plain="true" @click="open1">消息</el-button>\n  <el-button :plain="true" @click="open2">成功</el-button>\n  <el-button :plain="true" @click="open3">警告</el-button>\n  <el-button :plain="true" @click="open4">错误</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      open1() {\n        this.$message({\n          showClose: true,\n          message: \'这是一条消息提示\'\n        });\n      },\n\n      open2() {\n        this.$message({\n          showClose: true,\n          message: \'恭喜你，这是一条成功消息\',\n          type: \'success\'\n        });\n      },\n\n      open3() {\n        this.$message({\n          showClose: true,\n          message: \'警告哦，这是一条警告消息\',\n          type: \'warning\'\n        });\n      },\n\n      open4() {\n        this.$message({\n          showClose: true,\n          message: \'错了哦，这是一条错误消息\',\n          type: \'error\'\n        });\n      }\n    }\n  }\n<\/script>\n')],-1),V=Object(o.createVNode)("h3",{id:"wen-zi-ju-zhong"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#wen-zi-ju-zhong"},"¶"),Object(o.createTextVNode)(" 文字居中")],-1),N=Object(o.createVNode)("p",null,[Object(o.createTextVNode)("使用 "),Object(o.createVNode)("code",null,"center"),Object(o.createTextVNode)(" 属性让文字水平居中。")],-1),C=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},'<template>\n  <el-button :plain="true" @click="openCenter">文字居中</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      openCenter() {\n        this.$message({\n          message: \'居中的文字\',\n          center: true\n        });\n      }\n    }\n  }\n<\/script>\n')],-1),f=Object(o.createVNode)("h3",{id:"shi-yong-html-pian-duan"},[Object(o.createVNode)("a",{class:"header-anchor",href:"#shi-yong-html-pian-duan"},"¶"),Object(o.createTextVNode)(" 使用 HTML 片段")],-1),k=Object(o.createVNode)("p",null,[Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)(" 属性支持传入 HTML 片段")],-1),x=Object(o.createVNode)("div",null,[Object(o.createVNode)("p",null,[Object(o.createTextVNode)("将"),Object(o.createVNode)("code",null,"dangerouslyUseHTMLString"),Object(o.createTextVNode)("属性设置为 true，"),Object(o.createVNode)("code",null,"message"),Object(o.createTextVNode)(" 就会被当作 HTML 片段处理。")])],-1),T=Object(o.createVNode)("pre",null,[Object(o.createVNode)("code",{class:"html"},'<template>\n  <el-button :plain="true" @click="openHTML">使用 HTML 片段</el-button>\n</template>\n\n<script>\n  export default {\n    methods: {\n      openHTML() {\n        this.$message({\n          dangerouslyUseHTMLString: true,\n          message: \'<strong>这是 <i>HTML</i> 片段</strong>\'\n        });\n      }\n    }\n  }\n<\/script>\n')],-1),w=Object(o.createStaticVNode)('<div class="warning"><p><code>message</code> 属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。因此在 <code>dangerouslyUseHTMLString</code> 打开的情况下，请确保 <code>message</code> 的内容是可信的，<strong>永远不要</strong>将用户提交的内容赋值给 <code>message</code> 属性。</p></div><h3 id="quan-ju-fang-fa"><a class="header-anchor" href="#quan-ju-fang-fa">¶</a> 全局方法</h3><p>Element Plus 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 <code>Message</code>。</p><h3 id="dan-du-yin-yong"><a class="header-anchor" href="#dan-du-yin-yong">¶</a> 单独引用</h3><p>单独引入 <code>Message</code>：</p><pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { Message } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;element-plus&#39;</span>;\n</code></pre><p>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p><h3 id="options"><a class="header-anchor" href="#options">¶</a> Options</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>message</td><td>消息文字</td><td>string / VNode</td><td>—</td><td>—</td></tr><tr><td>type</td><td>主题</td><td>string</td><td>success/warning/info/error</td><td>info</td></tr><tr><td>iconClass</td><td>自定义图标的类名，会覆盖 <code>type</code></td><td>string</td><td>—</td><td>—</td></tr><tr><td>dangerouslyUseHTMLString</td><td>是否将 message 属性作为 HTML 片段处理</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>customClass</td><td>自定义类名</td><td>string</td><td>—</td><td>—</td></tr><tr><td>duration</td><td>显示时间, 毫秒。设为 0 则不会自动关闭</td><td>number</td><td>—</td><td>3000</td></tr><tr><td>showClose</td><td>是否显示关闭按钮</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>center</td><td>文字是否居中</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>onClose</td><td>关闭时的回调函数, 参数为被关闭的 message 实例</td><td>function</td><td>—</td><td>—</td></tr><tr><td>offset</td><td>Message 距离窗口顶部的偏移量</td><td>number</td><td>—</td><td>20</td></tr></tbody></table><h3 id="fang-fa"><a class="header-anchor" href="#fang-fa">¶</a> 方法</h3><p>调用 <code>Message</code> 或 <code>this.$message</code> 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 <code>close</code> 方法。</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>close</td><td>关闭当前的 Message</td></tr></tbody></table>',12);var y={name:"component-doc",components:{"element-demo0":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:s,createBlock:a}=o,d=e("打开消息提示"),l=e("VNode");const{h:r}=o,i={methods:{open(){this.$message("这是一条消息提示")},openVn(){this.$message({message:r("p",null,[r("span",null,"内容可以是 "),r("i",{style:"color: teal"},"VNode")])})}}};return Object.assign({render:function(e,o){const r=t("el-button");return s(),a("div",null,[c(r,{plain:!0,onClick:e.open},{default:n(()=>[d]),_:1},8,["onClick"]),c(r,{plain:!0,onClick:e.openVn},{default:n(()=>[l]),_:1},8,["onClick"])])}},i)}(),"element-demo1":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:s,createBlock:a}=o,d=e("成功"),l=e("警告"),r=e("消息"),i=e("错误");const p={methods:{open1(){this.$message("这是一条消息提示")},open2(){this.$message({message:"恭喜你，这是一条成功消息",type:"success"})},open3(){this.$message({message:"警告哦，这是一条警告消息",type:"warning"})},open4(){this.$message.error("错了哦，这是一条错误消息")}}};return Object.assign({render:function(e,o){const p=t("el-button");return s(),a("div",null,[c(p,{plain:!0,onClick:e.open2},{default:n(()=>[d]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open3},{default:n(()=>[l]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open1},{default:n(()=>[r]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open4},{default:n(()=>[i]),_:1},8,["onClick"])])}},p)}(),"element-demo2":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:s,createBlock:a}=o,d=e("消息"),l=e("成功"),r=e("警告"),i=e("错误");const p={methods:{open1(){this.$message({showClose:!0,message:"这是一条消息提示"})},open2(){this.$message({showClose:!0,message:"恭喜你，这是一条成功消息",type:"success"})},open3(){this.$message({showClose:!0,message:"警告哦，这是一条警告消息",type:"warning"})},open4(){this.$message({showClose:!0,message:"错了哦，这是一条错误消息",type:"error"})}}};return Object.assign({render:function(e,o){const p=t("el-button");return s(),a("div",null,[c(p,{plain:!0,onClick:e.open1},{default:n(()=>[d]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open2},{default:n(()=>[l]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open3},{default:n(()=>[r]),_:1},8,["onClick"]),c(p,{plain:!0,onClick:e.open4},{default:n(()=>[i]),_:1},8,["onClick"])])}},p)}(),"element-demo3":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:s,createBlock:a}=o,d=e("文字居中");const l={methods:{openCenter(){this.$message({message:"居中的文字",center:!0})}}};return Object.assign({render:function(e,o){const l=t("el-button");return s(),a("div",null,[c(l,{plain:!0,onClick:e.openCenter},{default:n(()=>[d]),_:1},8,["onClick"])])}},l)}(),"element-demo4":function(){const{createTextVNode:e,resolveComponent:t,withCtx:n,createVNode:c,openBlock:s,createBlock:a}=o,d=e("使用 HTML 片段");const l={methods:{openHTML(){this.$message({dangerouslyUseHTMLString:!0,message:"<strong>这是 <i>HTML</i> 片段</strong>"})}}};return Object.assign({render:function(e,o){const l=t("el-button");return s(),a("div",null,[c(l,{plain:!0,onClick:e.openHTML},{default:n(()=>[d]),_:1},8,["onClick"])])}},l)}()},render:function(e,t,n,y,M,v){const $=Object(o.resolveComponent)("element-demo0"),H=Object(o.resolveComponent)("demo-block"),L=Object(o.resolveComponent)("element-demo1"),_=Object(o.resolveComponent)("element-demo2"),B=Object(o.resolveComponent)("element-demo3"),S=Object(o.resolveComponent)("element-demo4");return Object(o.openBlock)(),Object(o.createBlock)("section",c,[s,a,d,l,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)($)]),highlight:Object(o.withCtx)(()=>[i]),default:Object(o.withCtx)(()=>[r]),_:1}),p,u,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(L)]),highlight:Object(o.withCtx)(()=>[b]),default:Object(o.withCtx)(()=>[h]),_:1}),g,m,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(_)]),highlight:Object(o.withCtx)(()=>[O]),default:Object(o.withCtx)(()=>[j]),_:1}),V,N,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(B)]),highlight:Object(o.withCtx)(()=>[C]),_:1}),f,k,Object(o.createVNode)(H,null,{source:Object(o.withCtx)(()=>[Object(o.createVNode)(S)]),highlight:Object(o.withCtx)(()=>[T]),default:Object(o.withCtx)(()=>[x]),_:1}),w])}};t.default=y}}]);