(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{602:function(e,t,d){"use strict";d.r(t);var n=d(0);const o={class:"content element-doc"},l=Object(n.createVNode)("h2",{id:"tree"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#tree"},"¶"),Object(n.createTextVNode)(" Tree")],-1),a=Object(n.createVNode)("p",null,"Muestra un conjunto de datos jerárquicos.",-1),r=Object(n.createVNode)("h3",{id:"uso-basico"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#uso-basico"},"¶"),Object(n.createTextVNode)(" Uso básico")],-1),c=Object(n.createVNode)("p",null,"Estructura básica de árbol.",-1),s=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree :data=\"data\" :props=\"defaultProps\" @node-click=\"handleNodeClick\"></el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),i=Object(n.createVNode)("h3",{id:"seleccionable"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#seleccionable"},"¶"),Object(n.createTextVNode)(" Seleccionable")],-1),h=Object(n.createVNode)("p",null,"Usado para la selección de nodos.",-1),b=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"Este ejemplo también muestra como cargar los datos de forma asíncrona.")],-1),u=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox\n  @check-change=\"handleCheckChange\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones'\n        },\n        count: 1\n      };\n    },\n    methods: {\n      handleCheckChange(data, checked, indeterminate) {\n        console.log(data, checked, indeterminate);\n      },\n      handleNodeClick(data) {\n        console.log(data);\n      },\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'Root1' }, { name: 'Root2' }]);\n        }\n        if (node.level > 3) return resolve([]);\n\n        var hasChild;\n        if (node.data.name === 'region1') {\n          hasChild = true;\n        } else if (node.data.name === 'region2') {\n          hasChild = false;\n        } else {\n          hasChild = Math.random() > 0.5;\n        }\n\n        setTimeout(() => {\n          var data;\n          if (hasChild) {\n            data = [{\n              name: 'zone' + this.count++\n            }, {\n              name: 'zone' + this.count++\n            }];\n          } else {\n            data = [];\n          }\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),p=Object(n.createVNode)("h3",{id:"nodos-hoja-en-modo-perezoso-lazy-load"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#nodos-hoja-en-modo-perezoso-lazy-load"},"¶"),Object(n.createTextVNode)(" Nodos hoja en modo perezoso (lazy load)")],-1),v=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,"Los datos de un nodo no son cargados hasta que no es pinchado, así que el árbol no puede predecir si es una hoja. Por eso a cada nodo se le añade el botón de desplegar, y si el nodo es una hoja el botón desaparecerá al pinchar en él. También puede decirle al árbol que el nodo es una hoja de antemano, y así evita que muestre el botón de desplegar.")],-1),f=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :props=\"props\"\n  :load=\"loadNode\"\n  lazy\n  show-checkbox>\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        props: {\n          label: 'name',\n          children: 'zones',\n          isLeaf: 'leaf'\n        },\n      };\n    },\n    methods: {\n      loadNode(node, resolve) {\n        if (node.level === 0) {\n          return resolve([{ name: 'region' }]);\n        }\n        if (node.level > 1) return resolve([]);\n\n        setTimeout(() => {\n          const data = [{\n            name: 'leaf',\n            leaf: true\n          }, {\n            name: 'zone'\n          }];\n\n          resolve(data);\n        }, 500);\n      }\n    }\n  };\n<\/script>\n")],-1),m=Object(n.createVNode)("h3",{id:"checkbox-desactivados"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#checkbox-desactivados"},"¶"),Object(n.createTextVNode)(" Checkbox desactivados")],-1),N=Object(n.createVNode)("p",null,"El checkbox de un nodo se puede poner como desactivado.",-1),g=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("En el ejemplo, la propiedad "),Object(n.createVNode)("code",null,"disabled"),Object(n.createTextVNode)(" se declara en "),Object(n.createVNode)("code",null,"defaultProps"),Object(n.createTextVNode)(", y algunos nodos se ponen como "),Object(n.createVNode)("code",null,"disabled:true"),Object(n.createTextVNode)(". Los checkboxes correspondientes son desactivados y no se pueden pinchar.")])],-1),j=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  :props=\"defaultProps\"\n  show-checkbox>\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 3,\n            label: 'Level two 2-1',\n            children: [{\n              id: 4,\n              label: 'Level three 3-1-1'\n            }, {\n              id: 5,\n              label: 'Level three 3-1-2',\n              disabled: true\n            }]\n          }, {\n            id: 2,\n            label: 'Level two 2-2',\n            disabled: true,\n            children: [{\n              id: 6,\n              label: 'Level three 3-2-1'\n            }, {\n              id: 7,\n              label: 'Level three 3-2-2',\n              disabled: true\n            }]\n          }]\n        }],\n        defaultProps: {\n            children: 'children',\n            label: 'label',\n            disabled: 'disabled',\n        },\n      };\n    }\n  };\n<\/script>\n")],-1),O=Object(n.createVNode)("h3",{id:"desplegado-o-seleccionado-por-defecto"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#desplegado-o-seleccionado-por-defecto"},"¶"),Object(n.createTextVNode)(" Desplegado o seleccionado por defecto")],-1),k=Object(n.createVNode)("p",null,"Los nodos pueden estar desplegados o seleccionados por defecto.",-1),L=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Utilice "),Object(n.createVNode)("code",null,"default-expanded-keys"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"default-checked-keys"),Object(n.createTextVNode)(" para establecer los nodos desplegados y seleccionados respectivamente. Tenga en cuenta que para que funcione es necesario que tengan "),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)(". Su valor es el nombre de una clave en el objeto data, y el valor de la clave debe ser único en todo el árbol.")])],-1),w=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  node-key=\"id\"\n  :default-expanded-keys=\"[2, 3]\"\n  :default-checked-keys=\"[5]\"\n  :props=\"defaultProps\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),x=Object(n.createVNode)("h3",{id:"seleccionando-nodos"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#seleccionando-nodos"},"¶"),Object(n.createTextVNode)(" Seleccionando nodos")],-1),y=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Este ejemplo muestra como establecer y leer nodos seleccionados. Esto se puede hacer por nodos o por claves. Si lo hace por claves el atributo "),Object(n.createVNode)("code",null,"node-key"),Object(n.createTextVNode)(" es necesario.")])],-1),V=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  show-checkbox\n  default-expand-all\n  node-key=\"id\"\n  ref=\"tree\"\n  highlight-current\n  :props=\"defaultProps\">\n</el-tree>\n\n<div class=\"buttons\">\n  <el-button @click=\"getCheckedNodes\">get by node</el-button>\n  <el-button @click=\"getCheckedKeys\">get by key</el-button>\n  <el-button @click=\"setCheckedNodes\">set by node</el-button>\n  <el-button @click=\"setCheckedKeys\">set by key</el-button>\n  <el-button @click=\"resetChecked\">reset</el-button>\n</div>\n\n<script>\n  export default {\n    methods: {\n      getCheckedNodes() {\n        console.log(this.$refs.tree.getCheckedNodes());\n      },\n      getCheckedKeys() {\n        console.log(this.$refs.tree.getCheckedKeys());\n      },\n      setCheckedNodes() {\n        this.$refs.tree.setCheckedNodes([{\n          id: 5,\n          label: 'Level two 2-1'\n        }, {\n          id: 9,\n          label: 'Level three 1-1-1'\n        }]);\n      },\n      setCheckedKeys() {\n        this.$refs.tree.setCheckedKeys([3]);\n      },\n      resetChecked() {\n        this.$refs.tree.setCheckedKeys([]);\n      }\n    },\n\n    data() {\n      return {\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),C=Object(n.createVNode)("h3",{id:"contenido-personalizado-en-los-nodos"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#contenido-personalizado-en-los-nodos"},"¶"),Object(n.createTextVNode)(" Contenido personalizado en los nodos")],-1),T=Object(n.createVNode)("p",null,"El contenido de los nodos puede ser personalizado, así que puede añadir iconos y botones a su gusto.",-1),D=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Hay dos maneras de personalizar la plantilla para los nodos de árbol: "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" y scoped slot. Utilice "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" para asignar una función de renderizado que devuelve el contenido del árbol de nodos. Mire la documentación de node para una introducción detallada a las funciones de renderizado. Si prefiere scoped slot, tendrá acceso a los "),Object(n.createVNode)("code",null,"nodos"),Object(n.createTextVNode)(" y "),Object(n.createVNode)("code",null,"datos"),Object(n.createTextVNode)(" en el ámbito de aplicación, representando el objeto TreeNode y los datos del nodo actual respectivamente. Tenga en cuenta que este ejemplo no puede ejecutarse en codepen.io ya que no soporta la sintaxis JSX. En un proyecto real "),Object(n.createVNode)("code",null,"render-content"),Object(n.createTextVNode)(" funcionará si las dependencias relevantes están configuradas correctamente.")])],-1),z=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},'<div class="custom-tree-container">\n  <div class="block">\n    <p>Using render-content</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false"\n      :render-content="renderContent">\n    </el-tree>\n  </div>\n  <div class="block">\n    <p>Using scoped slot</p>\n    <el-tree\n      :data="data"\n      show-checkbox\n      node-key="id"\n      default-expand-all\n      :expand-on-click-node="false">\n      <template #default="{ node, data }">\n        <span class="custom-tree-node">\n          <span>{{ node.label }}</span>\n          <span>\n            <a\n              @click="append(data)">\n              Append\n            </a>\n            <a\n              @click="remove(node, data)">\n              Delete\n            </a>\n          </span>\n        </span>\n      </template>\n    </el-tree>\n  </div>\n</div>\n\n<script>\n  let id = 1000;\n\n  export default {\n    data() {\n      const data = [{\n        id: 1,\n        label: \'Level one 1\',\n        children: [{\n          id: 4,\n          label: \'Level two 1-1\',\n          children: [{\n            id: 9,\n            label: \'Level three 1-1-1\'\n          }, {\n            id: 10,\n            label: \'Level three 1-1-2\'\n          }]\n        }]\n      }, {\n        id: 2,\n        label: \'Level one 2\',\n        children: [{\n          id: 5,\n          label: \'Level two 2-1\'\n        }, {\n          id: 6,\n          label: \'Level two 2-2\'\n        }]\n      }, {\n        id: 3,\n        label: \'Level one 3\',\n        children: [{\n          id: 7,\n          label: \'Level two 3-1\'\n        }, {\n          id: 8,\n          label: \'Level two 3-2\'\n        }]\n      }];\n      return {\n        data: JSON.parse(JSON.stringify(data)),\n        data: JSON.parse(JSON.stringify(data))\n      }\n    },\n\n    methods: {\n      append(data) {\n        const newChild = { id: id++, label: \'testtest\', children: [] };\n        if (!data.children) {\n          data.children = []\n        }\n        data.children.push(newChild);\n        this.data = [...this.data]\n      },\n\n      remove(node, data) {\n        const parent = node.parent;\n        const children = parent.data.children || parent.data;\n        const index = children.findIndex(d => d.id === data.id);\n        children.splice(index, 1);\n        this.data = [...this.data]\n      },\n\n      renderContent(h, { node, data, store }) {\n        return h("span", {\n          class: "custom-tree-node"\n        }, h("span", null, node.label), h("span", null, h("a", {\n          onClick: () => this.append(data)\n        }, "Append "), h("a", {\n          onClick: () => this.remove(node, data)\n        }, "Delete")));\n      }\n    }\n  };\n<\/script>\n\n<style>\n  .custom-tree-node {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 14px;\n    padding-right: 8px;\n  }\n</style>\n')],-1),q=Object(n.createVNode)("h3",{id:"filtrado-de-nodos"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#filtrado-de-nodos"},"¶"),Object(n.createTextVNode)(" Filtrado de nodos")],-1),S=Object(n.createVNode)("p",null,"Los nodos del árbol se pueden filtrar.",-1),P=Object(n.createVNode)("div",null,[Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Invoque el método "),Object(n.createVNode)("code",null,"filter"),Object(n.createTextVNode)(" de la instancia de Tree para filtrar los nodos. Su parámetro es la palabra de filtrado. Tenga en cuenta que para que funcione es necesario "),Object(n.createVNode)("code",null,"filter-node-method"),Object(n.createTextVNode)(", y su valor el método de filtrado.")])],-1),E=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-input\n  placeholder=\"Filter keyword\"\n  v-model=\"filterText\">\n</el-input>\n\n<el-tree\n  class=\"filter-tree\"\n  :data=\"data\"\n  :props=\"defaultProps\"\n  default-expand-all\n  :filter-node-method=\"filterNode\"\n  ref=\"tree\">\n</el-tree>\n\n<script>\n  export default {\n    watch: {\n      filterText(val) {\n        this.$refs.tree.filter(val);\n      }\n    },\n\n    methods: {\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      }\n    },\n\n    data() {\n      return {\n        filterText: '',\n        data: [{\n          id: 1,\n          label: 'Level one 1',\n          children: [{\n            id: 4,\n            label: 'Level two 1-1',\n            children: [{\n              id: 9,\n              label: 'Level three 1-1-1'\n            }, {\n              id: 10,\n              label: 'Level three 1-1-2'\n            }]\n          }]\n        }, {\n          id: 2,\n          label: 'Level one 2',\n          children: [{\n            id: 5,\n            label: 'Level two 2-1'\n          }, {\n            id: 6,\n            label: 'Level two 2-2'\n          }]\n        }, {\n          id: 3,\n          label: 'Level one 3',\n          children: [{\n            id: 7,\n            label: 'Level two 3-1'\n          }, {\n            id: 8,\n            label: 'Level two 3-2'\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    }\n  };\n<\/script>\n")],-1),B=Object(n.createVNode)("h3",{id:"acordeon"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#acordeon"},"¶"),Object(n.createTextVNode)(" Acordeón")],-1),K=Object(n.createVNode)("p",null,"Solo puede ser expandido un nodo del mismo nivel a la vez.",-1),A=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  :props=\"defaultProps\"\n  accordion\n  @node-click=\"handleNodeClick\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleNodeClick(data) {\n        console.log(data);\n      }\n    }\n  };\n<\/script>\n")],-1),_=Object(n.createVNode)("h3",{id:"draggable"},[Object(n.createVNode)("a",{class:"header-anchor",href:"#draggable"},"¶"),Object(n.createTextVNode)(" Draggable")],-1),$=Object(n.createVNode)("p",null,[Object(n.createTextVNode)("Puede arrastrar y soltar nodos de Tree añadiendo un atributo "),Object(n.createVNode)("code",null,"draggable"),Object(n.createTextVNode)(" .")],-1),J=Object(n.createVNode)("pre",null,[Object(n.createVNode)("code",{class:"html"},"<el-tree\n  :data=\"data\"\n  node-key=\"id\"\n  default-expand-all\n  @node-drag-start=\"handleDragStart\"\n  @node-drag-enter=\"handleDragEnter\"\n  @node-drag-leave=\"handleDragLeave\"\n  @node-drag-over=\"handleDragOver\"\n  @node-drag-end=\"handleDragEnd\"\n  @node-drop=\"handleDrop\"\n  draggable\n  :allow-drop=\"allowDrop\"\n  :allow-drag=\"allowDrag\">\n</el-tree>\n\n<script>\n  export default {\n    data() {\n      return {\n        data: [{\n          label: 'Level one 1',\n          children: [{\n            label: 'Level two 1-1',\n            children: [{\n              label: 'Level three 1-1-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 2',\n          children: [{\n            label: 'Level two 2-1',\n            children: [{\n              label: 'Level three 2-1-1'\n            }]\n          }, {\n            label: 'Level two 2-2',\n            children: [{\n              label: 'Level three 2-2-1'\n            }]\n          }]\n        }, {\n          label: 'Level one 3',\n          children: [{\n            label: 'Level two 3-1',\n            children: [{\n              label: 'Level three 3-1-1'\n            }]\n          }, {\n            label: 'Level two 3-2',\n            children: [{\n              label: 'Level three 3-2-1'\n            }]\n          }]\n        }],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        }\n      };\n    },\n    methods: {\n      handleDragStart(node, ev) {\n        console.log('drag start', node);\n      },\n      handleDragEnter(draggingNode, dropNode, ev) {\n        console.log('tree drag enter: ', dropNode.label);\n      },\n      handleDragLeave(draggingNode, dropNode, ev) {\n        console.log('tree drag leave: ', dropNode.label);\n      },\n      handleDragOver(draggingNode, dropNode, ev) {\n        console.log('tree drag over: ', dropNode.label);\n      },\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n      },\n      handleDrop(draggingNode, dropNode, dropType, ev) {\n        console.log('tree drop: ', dropNode.label, dropType);\n      },\n      allowDrop(draggingNode, dropNode, type) {\n        if (dropNode.data.label === 'Level two 3-1') {\n          return type !== 'inner';\n        } else {\n          return true;\n        }\n      },\n      allowDrag(draggingNode) {\n        return draggingNode.data.label.indexOf('Level three 3-1-1') === -1;\n      }\n    }\n  };\n<\/script>\n")],-1),U=Object(n.createStaticVNode)('<h3 id="atributos"><a class="header-anchor" href="#atributos">¶</a> Atributos</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>data</td><td>Datos del árbol</td><td>array</td><td>—</td><td>—</td></tr><tr><td>empty-text</td><td>Texto a mostrar cuando data es void</td><td>string</td><td>—</td><td>—</td></tr><tr><td>node-key</td><td>Identificador único en todo el árbol para los nodos</td><td>string</td><td>—</td><td>—</td></tr><tr><td>props</td><td>Opciones de configuración</td><td>object</td><td>—</td><td>—</td></tr><tr><td>render-after-expand</td><td>si se mostrarán los nodos hijo sólo después de que se desglose por primera vez un nodo padre</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>load</td><td>Método para cargar los datos de subárboles</td><td>function(node, resolve)</td><td>—</td><td>—</td></tr><tr><td>render-content</td><td>Función de renderizado para los nodos</td><td>Function(h, { node, data, store }</td><td>—</td><td>—</td></tr><tr><td>highlight-current</td><td>Si el nodo actual está resaltado</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-expand-all</td><td>Expandir todos los nodos por defecto</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>expand-on-click-node</td><td>Si expandir o contraer un nodo al pincharlo, si es false solo se hará al pinchar en la flecha</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>check-on-click-node</td><td>si marcar o desmarcar el nodo al hacer clic en el. Si es <code>false</code>, el nodo sólo se puede marcar o desmarcar haciendo clic en la casilla de verificación.</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>auto-expand-parent</td><td>Expandir un nodo padre si el hijo está seleccionado</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>default-expanded-keys</td><td>Array de claves de los nodos expandidos inicialmente</td><td>array</td><td>—</td><td>—</td></tr><tr><td>show-checkbox</td><td>Si un nodo es seleccionable</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>check-strictly</td><td>El estado de selección de un nodo no afecta a sus padres o hijos, cuando <code>show-checkbox</code> es <code>true</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>default-checked-keys</td><td>Array con claves de los nodos seleccionados inicialmente</td><td>array</td><td>—</td><td>—</td></tr><tr><td>current-node-key</td><td>la clave del nodo inicialmente seleccionado</td><td>string, number</td><td>—</td><td>—</td></tr><tr><td>filter-node-method</td><td>Esta función se ejecutará en cada nodo cuando se use el método filtrar, si devuelve <code>false</code> el nodo se oculta</td><td>Function(value, data, node)</td><td>—</td><td>—</td></tr><tr><td>accordion</td><td>Si solo un nodo de cada nivel puede expandirse a la vez</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>indent</td><td>Indentación horizontal de los nodos en niveles adyacentes, en pixeles</td><td>number</td><td>—</td><td>16</td></tr><tr><td>icon-class</td><td>Icono del nodo del árbol de cliente</td><td>string</td><td>-</td><td>-</td></tr><tr><td>lazy</td><td>si se trata de un nodo de hoja lazy load, utilizado con el atributo <code>load</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>draggable</td><td>si se habilita la función de drag &amp; drop en los nodos</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>allow-drag</td><td>esta función se ejecutará antes de arrastrar un nodo. si devuelve <code>false</code>, el nodo no puede ser arrastrado.</td><td>Function(nodo)</td><td>—</td><td>—</td></tr><tr><td>allow-drop</td><td>esta función se ejecutará al arrastrar y soltar un nodo. si devuelve false, el nodo arrastrando no se puede soltar en el nodo destino. <code>type</code> tiene tres valores posibles: &#39;prev&#39; (insertar el nodo de arrastre antes del nodo de destino), &#39;inner&#39; (insertar el nodo de arrastre en el nodo de destino) y &#39;next&#39; (insertar el nodo de arrastre después del nodo de destino)</td><td>Function(Nodoquesearrastra, Nododestino, type)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="props"><a class="header-anchor" href="#props">¶</a> props</h3><table><thead><tr><th>Atributo</th><th>Descripción</th><th>Tipo</th><th>Valores aceptados</th><th>Por defecto</th></tr></thead><tbody><tr><td>label</td><td>Especifica que clave del objecto nodo se utilizará como label</td><td>string, function(data, node)</td><td>—</td><td>—</td></tr><tr><td>children</td><td>Especifica que objeto del nodo se utiliza como subárbol</td><td>string</td><td>—</td><td>—</td></tr><tr><td>isLeaf</td><td>Especifica si el nodo es una hoja, sólo funciona cuando lazy load está activado</td><td>boolean, function(datos, nodo)</td><td>—</td><td>—</td></tr></tbody></table><h3 id="metodos"><a class="header-anchor" href="#metodos">¶</a> Métodos</h3><p><code>Tree</code> tiene los siguientes métodos, que devuelven el array de nodos seleccionados.</p><table><thead><tr><th>Método</th><th>Descripción</th><th>Parámetros</th></tr></thead><tbody><tr><td>filter</td><td>Filtra los nodos del árbol, los nodos filtrados estarán ocultos</td><td>Acepta un parámetro que será usado como primer parámetro para filter-node-method</td></tr><tr><td>updateKeyChildren</td><td>Asocia un nuevo dato al nodo, solo funciona si <code>node-key</code> está asignado</td><td>(key, data)Acepta dos parámetros: 1. clave del nodo 2. nuevo dato</td></tr><tr><td>getCheckedNodes</td><td>si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve el array de nodos actualmente seleccionada.</td><td>(leafOnly, includeHalfChecked) Acepta dos parámetros de tipo booleano: 1. El valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, sólo devuelve el array de subnodos actualmente seleccionado. 2. El valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, el valor de retorno contiene nodos halfchecked.</td></tr><tr><td>setCheckedNodes</td><td>Establece algunos nodos como seleccionados, solo funciona cuando <code>node-key</code> está asignado</td><td>Un array de nodos a seleccionar</td></tr><tr><td>getCheckedKeys</td><td>Si los nodos pueden ser seleccionados (<code>show-checkbox</code> es <code>true</code>), devuelve un array con las claves de los nodos seleccionados</td><td>(leafOnly) Acepta un booleano que por defecto es <code>false</code>.</td></tr><tr><td>setCheckedKeys</td><td>Establece algunos nodos como seleccionados, solo si <code>node-key</code> está asignado</td><td>(keys, leafOnly) Acepta dos parametros: 1. un array de claves 2. un booleano cuyo valor por defecto es <code>false</code>. Si el parámetro es <code>true</code>, solo devuelve los nodos seleccionados</td></tr><tr><td>setChecked</td><td>Establece si un nodo está seleccionado, solo funciona si <code>node-key</code> esta asignado</td><td>(key/data, checked, deep) Acepta tres parámetros: 1. la clave o dato del nodo a ser seleccionado 2. un booleano que indica si un nodo el nodo estará seleccionado 3. un booleanoque indica si se hará en profundidad</td></tr><tr><td>getHalfCheckedNodes</td><td>Si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve la mitad del array de nodos actualmente seleccionada.</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>Si el nodo puede ser seleccionado (<code>show-checkbox</code> es <code>true</code>), devuelve la mitad del array de claves del nodo actualmente seleccionado.</td><td>-</td></tr><tr><td>getCurrentKey</td><td>devuelve la clave del nodo resaltado actualmente (null si no hay ninguno)</td><td>—</td></tr><tr><td>getCurrentNode</td><td>devuelve los datos del nodo de resaltado (nulo si no hay ningún nodo resaltado)</td><td>—</td></tr><tr><td>setCurrentKey</td><td>establece el nodo resaltado por la clave, solo funciona si <code>node-key</code> está asignado</td><td>(key) la clave del nodo a ser resaltado. Si es <code>null</code>, cancela los nodos actualmente resaltados</td></tr><tr><td>setCurrentNode</td><td>establece el nodo resaltado, solo funciona si <code>node-key</code> está asignado</td><td>(node) nodo a ser resaltado</td></tr><tr><td>getNode</td><td>devuelve el nodo por el dato o la clave</td><td>(data) los datos o clave del nodo</td></tr><tr><td>remove</td><td>elimina un nodo, solo funciona si <code>node-key</code> está asignado</td><td>(data) los datos del nodo o nodo a borrar</td></tr><tr><td>append</td><td>añadir un nodo hijo a un nodo determinado del árbol</td><td>(data, parentNode) 1. los datos del nodo hijo que se añadirán 2. los datos del nodo padre, clave o nodo</td></tr><tr><td>insertBefore</td><td>insertar un nodo antes de un nodo dado en el árbol</td><td>(data, refNode) 1. Datos del nodo que se insertarán 2. Datos del nodo de referencia, clave o nodo</td></tr><tr><td>insertAfter</td><td>insertar un nodo después de un nodo dado en el árbol</td><td>(data, refNode) 1. Datos del nodo que se insertarán 2. Datos del nodo de referencia, clave o nodo</td></tr></tbody></table><h3 id="eventos"><a class="header-anchor" href="#eventos">¶</a> Eventos</h3><table><thead><tr><th>Nombre del evento</th><th>Descripción</th><th>Parámetros</th></tr></thead><tbody><tr><td>node-click</td><td>se lanza cuando un nodo es pinchado</td><td>tres parámetros: el objeto del nodo seleccionado, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-contextmenu</td><td>se lanza cuando en un nodo se hace clic con el botón derecho</td><td>cuatro parámetros: evento, el objeto nodo sobre el que se hizo clic, la propiedad <code>node</code> del TreeNode, el TreeNode en si mismo</td></tr><tr><td>check-change</td><td>se lanza cuando el estado de selección del nodo cambia</td><td>tres parámetros: objeto nodo que se corresponde con el que ha cambiado, booleano que dice si esta seleccionado, booleano que dice si el nodo tiene hijos seleccionados</td></tr><tr><td>check</td><td>se activa al hacer clic en la casilla de selección de un nodo</td><td>dos parámetros: objeto de nodo correspondiente al nodo que se marca/desmarca, objeto de estatus de árbol verificado que tiene cuatro puntales: checkedNodes, checkedKeys, halfCheckedNodes, halfCheckedKeys</td></tr><tr><td>current-change</td><td>cambia cuando el nodo actual cambia</td><td>dos parámetros: objeto nodo que se corresponde al nodo actual y propiedad <code>node</code> del TreeNode</td></tr><tr><td>node-expand</td><td>se lanza cuando el nodo actual se abre</td><td>tres parámetros: el objeto del nodo abierto, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-collapse</td><td>se lanza cuando el nodo actual se cierra</td><td>tres parámetros: el objeto del nodo cerrado, propiedad <code>node</code> de TreeNode y el TreeNode en si</td></tr><tr><td>node-drag-start</td><td>se activa cuando se inicia el arrastre</td><td>dos parámetros: el objeto del nodo que se arrastrara, evento.</td></tr><tr><td>node-drag-enter</td><td>se desencadena cuando el nodo de arrastre entra en otro nodo</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo en el que entra, evento.</td></tr><tr><td>node-drag-leave</td><td>se desencadena cuando el nodo de arrastre sale de un nodo</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo del cual se sale, evento.</td></tr><tr><td>node-drag-over</td><td>se activa cuando se arrastra sobre un nodo (como el evento mouseover)</td><td>tres parámetros: objeto del nodo que se arrastra, objeto del nodo sobre el que esta el arrastre, evento.</td></tr><tr><td>node-drag-end</td><td>se activa cuando se termina de arrastrar</td><td>cuatro parámetros: objeto del nodo que se arrastra, objeto del nodo que corresponde al final del arrastre (puede ser <code>undefined</code> ), tipo de integración (antes (before), después (after), dentro (inner) ), evento.</td></tr><tr><td>node-drop</td><td>después de soltar el nodo de arrastre</td><td>cuatro parámetros: objeto del nodo que se esta arrastrando, objeto del nodo sobre el que se esta soltando, tipo de integración (antes (before), después (after), dentro (inner) ), evento.</td></tr></tbody></table><h3 id="scoped-slot"><a class="header-anchor" href="#scoped-slot">¶</a> Scoped Slot</h3><table><thead><tr><th>Nombre</th><th>Descripción</th></tr></thead><tbody><tr><td>—</td><td>Contenido personalizado para nodos de tree. El parámetro del scope es { node, data }.</td></tr></tbody></table>',11);var F={name:"component-doc",components:{"element-demo0":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,"onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},l)}(),"element-demo1":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({props:{label:"name",children:"zones"},count:1}),methods:{handleCheckChange(e,t,d){console.log(e,t,d)},handleNodeClick(e){console.log(e)},loadNode(e,t){return 0===e.level?t([{name:"Root1"},{name:"Root2"}]):e.level>3?t([]):(d="region1"===e.data.name||"region2"!==e.data.name&&Math.random()>.5,void setTimeout(()=>{var e;e=d?[{name:"zone"+this.count++},{name:"zone"+this.count++}]:[],t(e)},500));var d}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":"","onCheck-change":n.handleCheckChange},null,8,["props","load","onCheck-change"])])}},l)}(),"element-demo2":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({props:{label:"name",children:"zones",isLeaf:"leaf"}}),methods:{loadNode:(e,t)=>0===e.level?t([{name:"region"}]):e.level>1?t([]):void setTimeout(()=>{t([{name:"leaf",leaf:!0},{name:"zone"}])},500)}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{props:n.props,load:n.loadNode,lazy:"","show-checkbox":""},null,8,["props","load"])])}},l)}(),"element-demo3":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{id:1,label:"Level one 1",children:[{id:3,label:"Level two 2-1",children:[{id:4,label:"Level three 3-1-1"},{id:5,label:"Level three 3-1-2",disabled:!0}]},{id:2,label:"Level two 2-2",disabled:!0,children:[{id:6,label:"Level three 3-2-1"},{id:7,label:"Level three 3-2-2",disabled:!0}]}]}],defaultProps:{children:"children",label:"label",disabled:"disabled"}})};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,"show-checkbox":""},null,8,["data","props"])])}},l)}(),"element-demo4":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,"show-checkbox":"","node-key":"id","default-expanded-keys":[2,3],"default-checked-keys":[5],props:n.defaultProps},null,8,["data","props"])])}},l)}(),"element-demo5":function(){const{resolveComponent:e,createVNode:t,createTextVNode:d,withCtx:o,openBlock:l,createBlock:a}=n,r={class:"buttons"},c=d("get by node"),s=d("get by key"),i=d("set by node"),h=d("set by key"),b=d("reset");const u={methods:{getCheckedNodes(){console.log(this.$refs.tree.getCheckedNodes())},getCheckedKeys(){console.log(this.$refs.tree.getCheckedKeys())},setCheckedNodes(){this.$refs.tree.setCheckedNodes([{id:5,label:"Level two 2-1"},{id:9,label:"Level three 1-1-1"}])},setCheckedKeys(){this.$refs.tree.setCheckedKeys([3])},resetChecked(){this.$refs.tree.setCheckedKeys([])}},data:()=>({data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(d,n){const u=e("el-tree"),p=e("el-button");return l(),a("div",null,[t(u,{data:d.data,"show-checkbox":"","default-expand-all":"","node-key":"id",ref:"tree","highlight-current":"",props:d.defaultProps},null,8,["data","props"]),t("div",r,[t(p,{onClick:d.getCheckedNodes},{default:o(()=>[c]),_:1},8,["onClick"]),t(p,{onClick:d.getCheckedKeys},{default:o(()=>[s]),_:1},8,["onClick"]),t(p,{onClick:d.setCheckedNodes},{default:o(()=>[i]),_:1},8,["onClick"]),t(p,{onClick:d.setCheckedKeys},{default:o(()=>[h]),_:1},8,["onClick"]),t(p,{onClick:d.resetChecked},{default:o(()=>[b]),_:1},8,["onClick"])])])}},u)}(),"element-demo6":function(){const{createVNode:e,resolveComponent:t,toDisplayString:d,withCtx:o,openBlock:l,createBlock:a}=n,r={class:"custom-tree-container"},c={class:"block"},s=e("p",null,"Using render-content",-1),i={class:"block"},h=e("p",null,"Using scoped slot",-1),b={class:"custom-tree-node"};let u=1e3;const p={data(){const e=[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}];return{data:JSON.parse(JSON.stringify(e)),data:JSON.parse(JSON.stringify(e))}},methods:{append(e){const t={id:u++,label:"testtest",children:[]};e.children||(e.children=[]),e.children.push(t),this.data=[...this.data]},remove(e,t){const d=e.parent,n=d.data.children||d.data,o=n.findIndex(e=>e.id===t.id);n.splice(o,1),this.data=[...this.data]},renderContent(e,{node:t,data:d,store:n}){return e("span",{class:"custom-tree-node"},e("span",null,t.label),e("span",null,e("a",{onClick:()=>this.append(d)},"Append "),e("a",{onClick:()=>this.remove(t,d)},"Delete")))}}};return Object.assign({render:function(n,u){const p=t("el-tree");return l(),a("div",null,[e("div",r,[e("div",c,[s,e(p,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1,"render-content":n.renderContent},null,8,["data","render-content"])]),e("div",i,[h,e(p,{data:n.data,"show-checkbox":"","node-key":"id","default-expand-all":"","expand-on-click-node":!1},{default:o(({node:t,data:o})=>[e("span",b,[e("span",null,d(t.label),1),e("span",null,[e("a",{onClick:e=>n.append(o)}," Append ",8,["onClick"]),e("a",{onClick:e=>n.remove(t,o)}," Delete ",8,["onClick"])])])]),_:1},8,["data"])])])])}},p)}(),"element-demo7":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={watch:{filterText(e){this.$refs.tree.filter(e)}},methods:{filterNode:(e,t)=>!e||-1!==t.label.indexOf(e)},data:()=>({filterText:"",data:[{id:1,label:"Level one 1",children:[{id:4,label:"Level two 1-1",children:[{id:9,label:"Level three 1-1-1"},{id:10,label:"Level three 1-1-2"}]}]},{id:2,label:"Level one 2",children:[{id:5,label:"Level two 2-1"},{id:6,label:"Level two 2-2"}]},{id:3,label:"Level one 3",children:[{id:7,label:"Level two 3-1"},{id:8,label:"Level two 3-2"}]}],defaultProps:{children:"children",label:"label"}})};return Object.assign({render:function(n,l){const a=e("el-input"),r=e("el-tree");return d(),o("div",null,[t(a,{placeholder:"Filter keyword",modelValue:n.filterText,"onUpdate:modelValue":l[1]||(l[1]=e=>n.filterText=e)},null,8,["modelValue"]),t(r,{class:"filter-tree",data:n.data,props:n.defaultProps,"default-expand-all":"","filter-node-method":n.filterNode,ref:"tree"},null,8,["data","props","filter-node-method"])])}},l)}(),"element-demo8":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleNodeClick(e){console.log(e)}}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,props:n.defaultProps,accordion:"","onNode-click":n.handleNodeClick},null,8,["data","props","onNode-click"])])}},l)}(),"element-demo9":function(){const{resolveComponent:e,createVNode:t,openBlock:d,createBlock:o}=n;const l={data:()=>({data:[{label:"Level one 1",children:[{label:"Level two 1-1",children:[{label:"Level three 1-1-1"}]}]},{label:"Level one 2",children:[{label:"Level two 2-1",children:[{label:"Level three 2-1-1"}]},{label:"Level two 2-2",children:[{label:"Level three 2-2-1"}]}]},{label:"Level one 3",children:[{label:"Level two 3-1",children:[{label:"Level three 3-1-1"}]},{label:"Level two 3-2",children:[{label:"Level three 3-2-1"}]}]}],defaultProps:{children:"children",label:"label"}}),methods:{handleDragStart(e,t){console.log("drag start",e)},handleDragEnter(e,t,d){console.log("tree drag enter: ",t.label)},handleDragLeave(e,t,d){console.log("tree drag leave: ",t.label)},handleDragOver(e,t,d){console.log("tree drag over: ",t.label)},handleDragEnd(e,t,d,n){console.log("tree drag end: ",t&&t.label,d)},handleDrop(e,t,d,n){console.log("tree drop: ",t.label,d)},allowDrop:(e,t,d)=>"Level two 3-1"!==t.data.label||"inner"!==d,allowDrag:e=>-1===e.data.label.indexOf("Level three 3-1-1")}};return Object.assign({render:function(n,l){const a=e("el-tree");return d(),o("div",null,[t(a,{data:n.data,"node-key":"id","default-expand-all":"","onNode-drag-start":n.handleDragStart,"onNode-drag-enter":n.handleDragEnter,"onNode-drag-leave":n.handleDragLeave,"onNode-drag-over":n.handleDragOver,"onNode-drag-end":n.handleDragEnd,"onNode-drop":n.handleDrop,draggable:"","allow-drop":n.allowDrop,"allow-drag":n.allowDrag},null,8,["data","onNode-drag-start","onNode-drag-enter","onNode-drag-leave","onNode-drag-over","onNode-drag-end","onNode-drop","allow-drop","allow-drag"])])}},l)}()},render:function(e,t,d,F,M,I){const H=Object(n.resolveComponent)("element-demo0"),R=Object(n.resolveComponent)("demo-block"),X=Object(n.resolveComponent)("element-demo1"),G=Object(n.resolveComponent)("element-demo2"),Q=Object(n.resolveComponent)("element-demo3"),W=Object(n.resolveComponent)("element-demo4"),Y=Object(n.resolveComponent)("element-demo5"),Z=Object(n.resolveComponent)("element-demo6"),ee=Object(n.resolveComponent)("element-demo7"),te=Object(n.resolveComponent)("element-demo8"),de=Object(n.resolveComponent)("element-demo9");return Object(n.openBlock)(),Object(n.createBlock)("section",o,[l,a,r,c,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(H)]),highlight:Object(n.withCtx)(()=>[s]),_:1}),i,h,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(X)]),highlight:Object(n.withCtx)(()=>[u]),default:Object(n.withCtx)(()=>[b]),_:1}),p,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(G)]),highlight:Object(n.withCtx)(()=>[f]),default:Object(n.withCtx)(()=>[v]),_:1}),m,N,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Q)]),highlight:Object(n.withCtx)(()=>[j]),default:Object(n.withCtx)(()=>[g]),_:1}),O,k,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(W)]),highlight:Object(n.withCtx)(()=>[w]),default:Object(n.withCtx)(()=>[L]),_:1}),x,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Y)]),highlight:Object(n.withCtx)(()=>[V]),default:Object(n.withCtx)(()=>[y]),_:1}),C,T,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(Z)]),highlight:Object(n.withCtx)(()=>[z]),default:Object(n.withCtx)(()=>[D]),_:1}),q,S,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(ee)]),highlight:Object(n.withCtx)(()=>[E]),default:Object(n.withCtx)(()=>[P]),_:1}),B,K,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(te)]),highlight:Object(n.withCtx)(()=>[A]),_:1}),_,$,Object(n.createVNode)(R,null,{source:Object(n.withCtx)(()=>[Object(n.createVNode)(de)]),highlight:Object(n.withCtx)(()=>[J]),_:1}),U])}};t.default=F}}]);